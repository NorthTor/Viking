
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	c8 e2 00 20 2d 96 00 00 f1 ed 00 00 01 96 00 00     ... -...........
    8010:	01 96 00 00 01 96 00 00 01 96 00 00 01 96 00 00     ................
	...
    802c:	39 93 00 00 01 96 00 00 00 00 00 00 d9 92 00 00     9...............
    803c:	01 96 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	c1 93 00 00 c1 93 00 00 c1 93 00 00 c1 93 00 00     ................
    8050:	c1 93 00 00 c1 93 00 00 c1 93 00 00 c1 93 00 00     ................
    8060:	c1 93 00 00 c1 93 00 00 c1 93 00 00 c1 93 00 00     ................
    8070:	c1 93 00 00 c1 93 00 00 c1 93 00 00 c1 93 00 00     ................
    8080:	c1 93 00 00 c1 93 00 00 c1 93 00 00 c1 93 00 00     ................
    8090:	c1 93 00 00 c1 93 00 00 c1 93 00 00 c1 93 00 00     ................
    80a0:	c1 93 00 00 c1 93 00 00 c1 93 00 00 c1 93 00 00     ................
    80b0:	fb f3 00 00 c1 93 00 00 c1 93 00 00 c1 93 00 00     ................
    80c0:	c1 93 00 00 c1 93 00 00 c1 93 00 00 c1 93 00 00     ................
    80d0:	c1 93 00 00 c1 93 00 00 c1 93 00 00 c1 93 00 00     ................
    80e0:	c1 93 00 00 c1 93 00 00 c1 93 00 00 c1 93 00 00     ................
    80f0:	c1 93 00 00 c1 93 00 00 c1 93 00 00 c1 93 00 00     ................
    8100:	c1 93 00 00 c1 93 00 00 c1 93 00 00 c1 93 00 00     ................
    8110:	c1 93 00 00 c1 93 00 00 c1 93 00 00 c1 93 00 00     ................
    8120:	c1 93 00 00 c1 93 00 00 c1 93 00 00 c1 93 00 00     ................
    8130:	c1 93 00 00 c1 93 00 00 c1 93 00 00 c1 93 00 00     ................
    8140:	c1 93 00 00                                         ....

Disassembly of section text:

00008144 <__aeabi_uldivmod>:
    8144:	b953      	cbnz	r3, 815c <__aeabi_uldivmod+0x18>
    8146:	b94a      	cbnz	r2, 815c <__aeabi_uldivmod+0x18>
    8148:	2900      	cmp	r1, #0
    814a:	bf08      	it	eq
    814c:	2800      	cmpeq	r0, #0
    814e:	bf1c      	itt	ne
    8150:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    8154:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    8158:	f000 b80c 	b.w	8174 <__aeabi_idiv0>
    815c:	f1ad 0c08 	sub.w	ip, sp, #8
    8160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8164:	f000 f808 	bl	8178 <__udivmoddi4>
    8168:	f8dd e004 	ldr.w	lr, [sp, #4]
    816c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8170:	b004      	add	sp, #16
    8172:	4770      	bx	lr

00008174 <__aeabi_idiv0>:
    8174:	4770      	bx	lr
    8176:	bf00      	nop

00008178 <__udivmoddi4>:
    8178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    817c:	4607      	mov	r7, r0
    817e:	468c      	mov	ip, r1
    8180:	4608      	mov	r0, r1
    8182:	9e09      	ldr	r6, [sp, #36]	; 0x24
    8184:	4615      	mov	r5, r2
    8186:	463c      	mov	r4, r7
    8188:	4619      	mov	r1, r3
    818a:	2b00      	cmp	r3, #0
    818c:	f040 80c5 	bne.w	831a <__udivmoddi4+0x1a2>
    8190:	4282      	cmp	r2, r0
    8192:	fab2 f782 	clz	r7, r2
    8196:	d946      	bls.n	8226 <__udivmoddi4+0xae>
    8198:	b14f      	cbz	r7, 81ae <__udivmoddi4+0x36>
    819a:	f1c7 0e20 	rsb	lr, r7, #32
    819e:	fa00 f307 	lsl.w	r3, r0, r7
    81a2:	40bd      	lsls	r5, r7
    81a4:	fa24 fe0e 	lsr.w	lr, r4, lr
    81a8:	40bc      	lsls	r4, r7
    81aa:	ea4e 0c03 	orr.w	ip, lr, r3
    81ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
    81b2:	fa1f fe85 	uxth.w	lr, r5
    81b6:	0c22      	lsrs	r2, r4, #16
    81b8:	fbbc f9f8 	udiv	r9, ip, r8
    81bc:	fb08 c319 	mls	r3, r8, r9, ip
    81c0:	fb09 fa0e 	mul.w	sl, r9, lr
    81c4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    81c8:	459a      	cmp	sl, r3
    81ca:	d928      	bls.n	821e <__udivmoddi4+0xa6>
    81cc:	18eb      	adds	r3, r5, r3
    81ce:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    81d2:	d204      	bcs.n	81de <__udivmoddi4+0x66>
    81d4:	459a      	cmp	sl, r3
    81d6:	d902      	bls.n	81de <__udivmoddi4+0x66>
    81d8:	f1a9 0002 	sub.w	r0, r9, #2
    81dc:	442b      	add	r3, r5
    81de:	eba3 030a 	sub.w	r3, r3, sl
    81e2:	b2a4      	uxth	r4, r4
    81e4:	fbb3 f2f8 	udiv	r2, r3, r8
    81e8:	fb08 3312 	mls	r3, r8, r2, r3
    81ec:	fb02 fe0e 	mul.w	lr, r2, lr
    81f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    81f4:	45a6      	cmp	lr, r4
    81f6:	d914      	bls.n	8222 <__udivmoddi4+0xaa>
    81f8:	192c      	adds	r4, r5, r4
    81fa:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    81fe:	d203      	bcs.n	8208 <__udivmoddi4+0x90>
    8200:	45a6      	cmp	lr, r4
    8202:	d901      	bls.n	8208 <__udivmoddi4+0x90>
    8204:	1e93      	subs	r3, r2, #2
    8206:	442c      	add	r4, r5
    8208:	eba4 040e 	sub.w	r4, r4, lr
    820c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8210:	b11e      	cbz	r6, 821a <__udivmoddi4+0xa2>
    8212:	40fc      	lsrs	r4, r7
    8214:	2300      	movs	r3, #0
    8216:	6034      	str	r4, [r6, #0]
    8218:	6073      	str	r3, [r6, #4]
    821a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    821e:	4648      	mov	r0, r9
    8220:	e7dd      	b.n	81de <__udivmoddi4+0x66>
    8222:	4613      	mov	r3, r2
    8224:	e7f0      	b.n	8208 <__udivmoddi4+0x90>
    8226:	b902      	cbnz	r2, 822a <__udivmoddi4+0xb2>
    8228:	deff      	udf	#255	; 0xff
    822a:	bb87      	cbnz	r7, 828e <__udivmoddi4+0x116>
    822c:	1a83      	subs	r3, r0, r2
    822e:	2101      	movs	r1, #1
    8230:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8234:	b2aa      	uxth	r2, r5
    8236:	0c20      	lsrs	r0, r4, #16
    8238:	fbb3 fcfe 	udiv	ip, r3, lr
    823c:	fb0e 331c 	mls	r3, lr, ip, r3
    8240:	fb0c f802 	mul.w	r8, ip, r2
    8244:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8248:	4598      	cmp	r8, r3
    824a:	d962      	bls.n	8312 <__udivmoddi4+0x19a>
    824c:	18eb      	adds	r3, r5, r3
    824e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    8252:	d204      	bcs.n	825e <__udivmoddi4+0xe6>
    8254:	4598      	cmp	r8, r3
    8256:	d902      	bls.n	825e <__udivmoddi4+0xe6>
    8258:	f1ac 0002 	sub.w	r0, ip, #2
    825c:	442b      	add	r3, r5
    825e:	eba3 0308 	sub.w	r3, r3, r8
    8262:	b2a4      	uxth	r4, r4
    8264:	fbb3 fcfe 	udiv	ip, r3, lr
    8268:	fb0e 331c 	mls	r3, lr, ip, r3
    826c:	fb0c f202 	mul.w	r2, ip, r2
    8270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8274:	42a2      	cmp	r2, r4
    8276:	d94e      	bls.n	8316 <__udivmoddi4+0x19e>
    8278:	192c      	adds	r4, r5, r4
    827a:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    827e:	d204      	bcs.n	828a <__udivmoddi4+0x112>
    8280:	42a2      	cmp	r2, r4
    8282:	d902      	bls.n	828a <__udivmoddi4+0x112>
    8284:	f1ac 0302 	sub.w	r3, ip, #2
    8288:	442c      	add	r4, r5
    828a:	1aa4      	subs	r4, r4, r2
    828c:	e7be      	b.n	820c <__udivmoddi4+0x94>
    828e:	f1c7 0c20 	rsb	ip, r7, #32
    8292:	40bd      	lsls	r5, r7
    8294:	fa00 f307 	lsl.w	r3, r0, r7
    8298:	fa20 f80c 	lsr.w	r8, r0, ip
    829c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    82a0:	fa24 fc0c 	lsr.w	ip, r4, ip
    82a4:	40bc      	lsls	r4, r7
    82a6:	ea4c 0203 	orr.w	r2, ip, r3
    82aa:	b2ab      	uxth	r3, r5
    82ac:	fbb8 fcfe 	udiv	ip, r8, lr
    82b0:	0c11      	lsrs	r1, r2, #16
    82b2:	fb0e 801c 	mls	r0, lr, ip, r8
    82b6:	fb0c f903 	mul.w	r9, ip, r3
    82ba:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    82be:	4581      	cmp	r9, r0
    82c0:	d923      	bls.n	830a <__udivmoddi4+0x192>
    82c2:	1828      	adds	r0, r5, r0
    82c4:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    82c8:	d204      	bcs.n	82d4 <__udivmoddi4+0x15c>
    82ca:	4581      	cmp	r9, r0
    82cc:	d902      	bls.n	82d4 <__udivmoddi4+0x15c>
    82ce:	f1ac 0102 	sub.w	r1, ip, #2
    82d2:	4428      	add	r0, r5
    82d4:	eba0 0009 	sub.w	r0, r0, r9
    82d8:	b292      	uxth	r2, r2
    82da:	fbb0 fcfe 	udiv	ip, r0, lr
    82de:	fb0e 001c 	mls	r0, lr, ip, r0
    82e2:	fb0c f803 	mul.w	r8, ip, r3
    82e6:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    82ea:	4598      	cmp	r8, r3
    82ec:	d90f      	bls.n	830e <__udivmoddi4+0x196>
    82ee:	18eb      	adds	r3, r5, r3
    82f0:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
    82f4:	d204      	bcs.n	8300 <__udivmoddi4+0x188>
    82f6:	4598      	cmp	r8, r3
    82f8:	d902      	bls.n	8300 <__udivmoddi4+0x188>
    82fa:	f1ac 0202 	sub.w	r2, ip, #2
    82fe:	442b      	add	r3, r5
    8300:	eba3 0308 	sub.w	r3, r3, r8
    8304:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    8308:	e792      	b.n	8230 <__udivmoddi4+0xb8>
    830a:	4661      	mov	r1, ip
    830c:	e7e2      	b.n	82d4 <__udivmoddi4+0x15c>
    830e:	4662      	mov	r2, ip
    8310:	e7f6      	b.n	8300 <__udivmoddi4+0x188>
    8312:	4660      	mov	r0, ip
    8314:	e7a3      	b.n	825e <__udivmoddi4+0xe6>
    8316:	4663      	mov	r3, ip
    8318:	e7b7      	b.n	828a <__udivmoddi4+0x112>
    831a:	4283      	cmp	r3, r0
    831c:	d905      	bls.n	832a <__udivmoddi4+0x1b2>
    831e:	b10e      	cbz	r6, 8324 <__udivmoddi4+0x1ac>
    8320:	e9c6 7000 	strd	r7, r0, [r6]
    8324:	2100      	movs	r1, #0
    8326:	4608      	mov	r0, r1
    8328:	e777      	b.n	821a <__udivmoddi4+0xa2>
    832a:	fab3 f183 	clz	r1, r3
    832e:	b981      	cbnz	r1, 8352 <__udivmoddi4+0x1da>
    8330:	4283      	cmp	r3, r0
    8332:	d301      	bcc.n	8338 <__udivmoddi4+0x1c0>
    8334:	42ba      	cmp	r2, r7
    8336:	d80a      	bhi.n	834e <__udivmoddi4+0x1d6>
    8338:	1abc      	subs	r4, r7, r2
    833a:	eb60 0303 	sbc.w	r3, r0, r3
    833e:	2001      	movs	r0, #1
    8340:	469c      	mov	ip, r3
    8342:	2e00      	cmp	r6, #0
    8344:	d067      	beq.n	8416 <__udivmoddi4+0x29e>
    8346:	e9c6 4c00 	strd	r4, ip, [r6]
    834a:	2100      	movs	r1, #0
    834c:	e765      	b.n	821a <__udivmoddi4+0xa2>
    834e:	4608      	mov	r0, r1
    8350:	e7f7      	b.n	8342 <__udivmoddi4+0x1ca>
    8352:	f1c1 0c20 	rsb	ip, r1, #32
    8356:	408b      	lsls	r3, r1
    8358:	fa02 f501 	lsl.w	r5, r2, r1
    835c:	fa22 f40c 	lsr.w	r4, r2, ip
    8360:	fa20 fb0c 	lsr.w	fp, r0, ip
    8364:	fa27 f20c 	lsr.w	r2, r7, ip
    8368:	408f      	lsls	r7, r1
    836a:	431c      	orrs	r4, r3
    836c:	fa00 f301 	lsl.w	r3, r0, r1
    8370:	ea4f 4914 	mov.w	r9, r4, lsr #16
    8374:	4313      	orrs	r3, r2
    8376:	fa1f fe84 	uxth.w	lr, r4
    837a:	0c1a      	lsrs	r2, r3, #16
    837c:	fbbb f8f9 	udiv	r8, fp, r9
    8380:	fb09 bb18 	mls	fp, r9, r8, fp
    8384:	fb08 fa0e 	mul.w	sl, r8, lr
    8388:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    838c:	4592      	cmp	sl, r2
    838e:	d93e      	bls.n	840e <__udivmoddi4+0x296>
    8390:	18a2      	adds	r2, r4, r2
    8392:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    8396:	d204      	bcs.n	83a2 <__udivmoddi4+0x22a>
    8398:	4592      	cmp	sl, r2
    839a:	d902      	bls.n	83a2 <__udivmoddi4+0x22a>
    839c:	f1a8 0002 	sub.w	r0, r8, #2
    83a0:	4422      	add	r2, r4
    83a2:	eba2 020a 	sub.w	r2, r2, sl
    83a6:	b29b      	uxth	r3, r3
    83a8:	fbb2 f8f9 	udiv	r8, r2, r9
    83ac:	fb09 2218 	mls	r2, r9, r8, r2
    83b0:	fb08 fe0e 	mul.w	lr, r8, lr
    83b4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    83b8:	4596      	cmp	lr, r2
    83ba:	d92a      	bls.n	8412 <__udivmoddi4+0x29a>
    83bc:	18a2      	adds	r2, r4, r2
    83be:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    83c2:	d204      	bcs.n	83ce <__udivmoddi4+0x256>
    83c4:	4596      	cmp	lr, r2
    83c6:	d902      	bls.n	83ce <__udivmoddi4+0x256>
    83c8:	f1a8 0302 	sub.w	r3, r8, #2
    83cc:	4422      	add	r2, r4
    83ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    83d2:	eba2 020e 	sub.w	r2, r2, lr
    83d6:	fba0 9305 	umull	r9, r3, r0, r5
    83da:	429a      	cmp	r2, r3
    83dc:	46ce      	mov	lr, r9
    83de:	4698      	mov	r8, r3
    83e0:	d302      	bcc.n	83e8 <__udivmoddi4+0x270>
    83e2:	d106      	bne.n	83f2 <__udivmoddi4+0x27a>
    83e4:	454f      	cmp	r7, r9
    83e6:	d204      	bcs.n	83f2 <__udivmoddi4+0x27a>
    83e8:	3801      	subs	r0, #1
    83ea:	ebb9 0e05 	subs.w	lr, r9, r5
    83ee:	eb63 0804 	sbc.w	r8, r3, r4
    83f2:	b186      	cbz	r6, 8416 <__udivmoddi4+0x29e>
    83f4:	ebb7 030e 	subs.w	r3, r7, lr
    83f8:	eb62 0708 	sbc.w	r7, r2, r8
    83fc:	fa07 fc0c 	lsl.w	ip, r7, ip
    8400:	40cb      	lsrs	r3, r1
    8402:	40cf      	lsrs	r7, r1
    8404:	ea4c 0303 	orr.w	r3, ip, r3
    8408:	e9c6 3700 	strd	r3, r7, [r6]
    840c:	e79d      	b.n	834a <__udivmoddi4+0x1d2>
    840e:	4640      	mov	r0, r8
    8410:	e7c7      	b.n	83a2 <__udivmoddi4+0x22a>
    8412:	4643      	mov	r3, r8
    8414:	e7db      	b.n	83ce <__udivmoddi4+0x256>
    8416:	4631      	mov	r1, r6
    8418:	e6ff      	b.n	821a <__udivmoddi4+0xa2>

0000841a <strlen>:
    841a:	4603      	mov	r3, r0
    841c:	f813 2b01 	ldrb.w	r2, [r3], #1
    8420:	2a00      	cmp	r2, #0
    8422:	d1fb      	bne.n	841c <strlen+0x2>
    8424:	1a18      	subs	r0, r3, r0
    8426:	3801      	subs	r0, #1
    8428:	4770      	bx	lr
	...

0000842c <spi_test_send>:
		return;
	}
}

void spi_test_send(void)
{
    842c:	b530      	push	{r4, r5, lr}
    842e:	b089      	sub	sp, #36	; 0x24
	int err;
	static uint8_t tx_buffer[1];
	static uint8_t rx_buffer[1];

	const struct spi_buf tx_buf = {
    8430:	466d      	mov	r5, sp
    8432:	4c17      	ldr	r4, [pc, #92]	; (8490 <spi_test_send+0x64>)
    8434:	e894 0003 	ldmia.w	r4, {r0, r1}
    8438:	e885 0003 	stmia.w	r5, {r0, r1}
		.buf = tx_buffer,
		.len = sizeof(tx_buffer)
	};

	printk("size of Tx buffer: %x\n", sizeof(tx_buffer));
    843c:	2101      	movs	r1, #1
    843e:	4815      	ldr	r0, [pc, #84]	; (8494 <spi_test_send+0x68>)
    8440:	f006 fa1b 	bl	e87a <printk>
	const struct spi_buf_set tx = {
		.buffers = &tx_buf,
		.count = 1
	};

	struct spi_buf rx_buf = {
    8444:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
	const struct spi_buf_set tx = {
    8448:	2201      	movs	r2, #1
	struct spi_buf rx_buf = {
    844a:	ab04      	add	r3, sp, #16
    844c:	e883 0003 	stmia.w	r3, {r0, r1}
		.buf = rx_buffer,
		.len = sizeof(rx_buffer),
	};
	const struct spi_buf_set rx = {
    8450:	e9cd 3206 	strd	r3, r2, [sp, #24]
		.buffers = &rx_buf,
		.count = 1
	};

	err = spi_transceive(spi_dev, &spi_cfg, &tx, &rx);
    8454:	4b10      	ldr	r3, [pc, #64]	; (8498 <spi_test_send+0x6c>)
	const struct spi_buf_set tx = {
    8456:	9502      	str	r5, [sp, #8]
	err = spi_transceive(spi_dev, &spi_cfg, &tx, &rx);
    8458:	6818      	ldr	r0, [r3, #0]
	const struct spi_buf_set tx = {
    845a:	9203      	str	r2, [sp, #12]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    845c:	6883      	ldr	r3, [r0, #8]
    845e:	490f      	ldr	r1, [pc, #60]	; (849c <spi_test_send+0x70>)
    8460:	681c      	ldr	r4, [r3, #0]
    8462:	aa02      	add	r2, sp, #8
    8464:	ab06      	add	r3, sp, #24
    8466:	47a0      	blx	r4
	if (err) {
    8468:	4601      	mov	r1, r0
    846a:	b120      	cbz	r0, 8476 <spi_test_send+0x4a>
		printk("SPI error: %d\n", err);
    846c:	480c      	ldr	r0, [pc, #48]	; (84a0 <spi_test_send+0x74>)
    846e:	f006 fa04 	bl	e87a <printk>
		/* Connect MISO to MOSI for loopback */
		printk("TX sent: %x\n", tx_buffer[0]);
		printk("RX recv: %x\n", rx_buffer[0]);
		tx_buffer[0] = 0xf2;
	}	
}
    8472:	b009      	add	sp, #36	; 0x24
    8474:	bd30      	pop	{r4, r5, pc}
		printk("TX sent: %x\n", tx_buffer[0]);
    8476:	4c0b      	ldr	r4, [pc, #44]	; (84a4 <spi_test_send+0x78>)
    8478:	480b      	ldr	r0, [pc, #44]	; (84a8 <spi_test_send+0x7c>)
    847a:	7821      	ldrb	r1, [r4, #0]
    847c:	f006 f9fd 	bl	e87a <printk>
		printk("RX recv: %x\n", rx_buffer[0]);
    8480:	4b0a      	ldr	r3, [pc, #40]	; (84ac <spi_test_send+0x80>)
    8482:	480b      	ldr	r0, [pc, #44]	; (84b0 <spi_test_send+0x84>)
    8484:	7819      	ldrb	r1, [r3, #0]
    8486:	f006 f9f8 	bl	e87a <printk>
		tx_buffer[0] = 0xf2;
    848a:	23f2      	movs	r3, #242	; 0xf2
    848c:	7023      	strb	r3, [r4, #0]
}
    848e:	e7f0      	b.n	8472 <spi_test_send+0x46>
    8490:	00010120 	.word	0x00010120
    8494:	00010534 	.word	0x00010534
    8498:	2000c8c0 	.word	0x2000c8c0
    849c:	00010148 	.word	0x00010148
    84a0:	0001054b 	.word	0x0001054b
    84a4:	2000cea7 	.word	0x2000cea7
    84a8:	0001055a 	.word	0x0001055a
    84ac:	2000cea6 	.word	0x2000cea6
    84b0:	00010567 	.word	0x00010567

000084b4 <main>:

void main(void)
{
    84b4:	b510      	push	{r4, lr}
	printk("SPIM Example\n");
    84b6:	480a      	ldr	r0, [pc, #40]	; (84e0 <main+0x2c>)
    84b8:	f006 f9df 	bl	e87a <printk>
	spi_dev = DEVICE_DT_GET(MY_SPI_MASTER);
    84bc:	4b09      	ldr	r3, [pc, #36]	; (84e4 <main+0x30>)
    84be:	4a0a      	ldr	r2, [pc, #40]	; (84e8 <main+0x34>)
	spi_init();
	printk("After init\n");
    84c0:	480a      	ldr	r0, [pc, #40]	; (84ec <main+0x38>)
	spi_dev = DEVICE_DT_GET(MY_SPI_MASTER);
    84c2:	601a      	str	r2, [r3, #0]
	printk("After init\n");
    84c4:	f006 f9d9 	bl	e87a <printk>
	while (1) {
		spi_test_send();
		k_sleep(K_MSEC(1000));
		printk(".");
    84c8:	4c09      	ldr	r4, [pc, #36]	; (84f0 <main+0x3c>)
		spi_test_send();
    84ca:	f7ff ffaf 	bl	842c <spi_test_send>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    84ce:	2100      	movs	r1, #0
    84d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    84d4:	f005 fad0 	bl	da78 <z_impl_k_sleep>
		printk(".");
    84d8:	4620      	mov	r0, r4
    84da:	f006 f9ce 	bl	e87a <printk>
	while (1) {
    84de:	e7f4      	b.n	84ca <main+0x16>
    84e0:	00010574 	.word	0x00010574
    84e4:	2000c8c0 	.word	0x2000c8c0
    84e8:	0000fed4 	.word	0x0000fed4
    84ec:	00010582 	.word	0x00010582
    84f0:	0001058e 	.word	0x0001058e

000084f4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    84f4:	4b01      	ldr	r3, [pc, #4]	; (84fc <char_out+0x8>)
    84f6:	681b      	ldr	r3, [r3, #0]
    84f8:	4718      	bx	r3
    84fa:	bf00      	nop
    84fc:	2000c500 	.word	0x2000c500

00008500 <__printk_hook_install>:
	_char_out = fn;
    8500:	4b01      	ldr	r3, [pc, #4]	; (8508 <__printk_hook_install+0x8>)
    8502:	6018      	str	r0, [r3, #0]
}
    8504:	4770      	bx	lr
    8506:	bf00      	nop
    8508:	2000c500 	.word	0x2000c500

0000850c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    850c:	b507      	push	{r0, r1, r2, lr}
    850e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    8510:	2100      	movs	r1, #0
    8512:	4602      	mov	r2, r0
    8514:	9100      	str	r1, [sp, #0]
    8516:	4803      	ldr	r0, [pc, #12]	; (8524 <vprintk+0x18>)
    8518:	f000 f946 	bl	87a8 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    851c:	b003      	add	sp, #12
    851e:	f85d fb04 	ldr.w	pc, [sp], #4
    8522:	bf00      	nop
    8524:	000084f5 	.word	0x000084f5

00008528 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    8528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    852c:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    8530:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    8532:	f019 0808 	ands.w	r8, r9, #8
{
    8536:	4693      	mov	fp, r2
	if (processing) {
    8538:	d00d      	beq.n	8556 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    853a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    853c:	bf0c      	ite	eq
    853e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    8542:	f049 0920 	orrne.w	r9, r9, #32
    8546:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    854a:	f38b 8811 	msr	BASEPRI, fp
    854e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    8552:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8556:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    855a:	2902      	cmp	r1, #2
    855c:	d107      	bne.n	856e <process_event+0x46>
			evt = process_recheck(mgr);
    855e:	4620      	mov	r0, r4
    8560:	f006 f998 	bl	e894 <process_recheck>
		if (evt == EVT_NOP) {
    8564:	2800      	cmp	r0, #0
    8566:	d0f0      	beq.n	854a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    8568:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    856a:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    856c:	d14e      	bne.n	860c <process_event+0xe4>
			res = mgr->last_res;
    856e:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8570:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    8572:	2f00      	cmp	r7, #0
    8574:	da15      	bge.n	85a2 <process_event+0x7a>
		*clients = mgr->clients;
    8576:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8578:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    857c:	e9c4 8800 	strd	r8, r8, [r4]
    8580:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    8584:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    8586:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8588:	8b21      	ldrh	r1, [r4, #24]
    858a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    858e:	45ca      	cmp	sl, r9
    8590:	d002      	beq.n	8598 <process_event+0x70>
		if (do_monitors
    8592:	68a3      	ldr	r3, [r4, #8]
    8594:	2b00      	cmp	r3, #0
    8596:	d15a      	bne.n	864e <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    8598:	b90d      	cbnz	r5, 859e <process_event+0x76>
		    || (transit != NULL)) {
    859a:	2e00      	cmp	r6, #0
    859c:	d071      	beq.n	8682 <process_event+0x15a>
    859e:	2300      	movs	r3, #0
    85a0:	e056      	b.n	8650 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    85a2:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    85a6:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    85a8:	2a01      	cmp	r2, #1
    85aa:	d81e      	bhi.n	85ea <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    85ac:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    85b0:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    85b2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    85b4:	b289      	uxth	r1, r1
    85b6:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    85ba:	d10a      	bne.n	85d2 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    85bc:	b13d      	cbz	r5, 85ce <process_event+0xa6>
    85be:	462a      	mov	r2, r5
    85c0:	8b63      	ldrh	r3, [r4, #26]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    85c2:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    85c4:	3301      	adds	r3, #1
    85c6:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    85c8:	2a00      	cmp	r2, #0
    85ca:	d1fa      	bne.n	85c2 <process_event+0x9a>
    85cc:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    85ce:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    85d2:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    85d4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    85d6:	f006 f95d 	bl	e894 <process_recheck>
    85da:	4606      	mov	r6, r0
    85dc:	2800      	cmp	r0, #0
    85de:	d0d3      	beq.n	8588 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    85e0:	8b23      	ldrh	r3, [r4, #24]
    85e2:	f043 0320 	orr.w	r3, r3, #32
    85e6:	8323      	strh	r3, [r4, #24]
    85e8:	e7cd      	b.n	8586 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    85ea:	2b04      	cmp	r3, #4
    85ec:	d10c      	bne.n	8608 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    85ee:	f021 0107 	bic.w	r1, r1, #7
    85f2:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    85f4:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    85f6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    85f8:	f006 f94c 	bl	e894 <process_recheck>
    85fc:	4605      	mov	r5, r0
    85fe:	2800      	cmp	r0, #0
    8600:	d0c1      	beq.n	8586 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8602:	f041 0120 	orr.w	r1, r1, #32
    8606:	8321      	strh	r1, [r4, #24]
    8608:	2500      	movs	r5, #0
    860a:	e7bc      	b.n	8586 <process_event+0x5e>
		} else if (evt == EVT_START) {
    860c:	2803      	cmp	r0, #3
    860e:	d109      	bne.n	8624 <process_event+0xfc>
			transit = mgr->transitions->start;
    8610:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8612:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    8616:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8618:	f043 0306 	orr.w	r3, r3, #6
}
    861c:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    861e:	8323      	strh	r3, [r4, #24]
		res = 0;
    8620:	462f      	mov	r7, r5
    8622:	e7b1      	b.n	8588 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    8624:	2804      	cmp	r0, #4
    8626:	d106      	bne.n	8636 <process_event+0x10e>
			transit = mgr->transitions->stop;
    8628:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    862a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    862e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8630:	f043 0304 	orr.w	r3, r3, #4
    8634:	e7f2      	b.n	861c <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    8636:	2805      	cmp	r0, #5
    8638:	d106      	bne.n	8648 <process_event+0x120>
			transit = mgr->transitions->reset;
    863a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    863c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    8640:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8642:	f043 0305 	orr.w	r3, r3, #5
    8646:	e7e9      	b.n	861c <process_event+0xf4>
    8648:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    864a:	462e      	mov	r6, r5
    864c:	e7e8      	b.n	8620 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    864e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    8650:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    8654:	8321      	strh	r1, [r4, #24]
    8656:	f38b 8811 	msr	BASEPRI, fp
    865a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    865e:	b9fb      	cbnz	r3, 86a0 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    8660:	bb85      	cbnz	r5, 86c4 <process_event+0x19c>
			if (transit != NULL) {
    8662:	b116      	cbz	r6, 866a <process_event+0x142>
				transit(mgr, transition_complete);
    8664:	4620      	mov	r0, r4
    8666:	491f      	ldr	r1, [pc, #124]	; (86e4 <process_event+0x1bc>)
    8668:	47b0      	blx	r6
	__asm__ volatile(
    866a:	f04f 0320 	mov.w	r3, #32
    866e:	f3ef 8b11 	mrs	fp, BASEPRI
    8672:	f383 8812 	msr	BASEPRI_MAX, r3
    8676:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    867a:	8b23      	ldrh	r3, [r4, #24]
    867c:	f023 0308 	bic.w	r3, r3, #8
    8680:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    8682:	8b23      	ldrh	r3, [r4, #24]
    8684:	06da      	lsls	r2, r3, #27
    8686:	d525      	bpl.n	86d4 <process_event+0x1ac>
			evt = EVT_COMPLETE;
    8688:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    868a:	f023 0310 	bic.w	r3, r3, #16
    868e:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    8690:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    8694:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    8698:	2900      	cmp	r1, #0
    869a:	f47f af5e 	bne.w	855a <process_event+0x32>
out:
    869e:	e754      	b.n	854a <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    86a0:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    86a2:	2900      	cmp	r1, #0
    86a4:	d0dc      	beq.n	8660 <process_event+0x138>
	return node->next;
    86a6:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    86aa:	463b      	mov	r3, r7
    86ac:	4652      	mov	r2, sl
    86ae:	4620      	mov	r0, r4
    86b0:	f8d1 b004 	ldr.w	fp, [r1, #4]
    86b4:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    86b6:	f1b9 0f00 	cmp.w	r9, #0
    86ba:	d0d1      	beq.n	8660 <process_event+0x138>
    86bc:	4649      	mov	r1, r9
    86be:	f8d9 9000 	ldr.w	r9, [r9]
    86c2:	e7f2      	b.n	86aa <process_event+0x182>
    86c4:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    86c6:	463b      	mov	r3, r7
    86c8:	4652      	mov	r2, sl
    86ca:	4620      	mov	r0, r4
    86cc:	682d      	ldr	r5, [r5, #0]
    86ce:	f006 f8fd 	bl	e8cc <notify_one>
    86d2:	e7c5      	b.n	8660 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    86d4:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    86d8:	bf1e      	ittt	ne
    86da:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    86de:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    86e0:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    86e2:	e7d5      	b.n	8690 <process_event+0x168>
    86e4:	0000e8f9 	.word	0x0000e8f9

000086e8 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    86e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    86ea:	4603      	mov	r3, r0
    86ec:	6802      	ldr	r2, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    86ee:	270a      	movs	r7, #10
	size_t val = 0;
    86f0:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    86f2:	4e06      	ldr	r6, [pc, #24]	; (870c <extract_decimal+0x24>)
    86f4:	4611      	mov	r1, r2
    86f6:	780c      	ldrb	r4, [r1, #0]
    86f8:	3201      	adds	r2, #1
    86fa:	5da5      	ldrb	r5, [r4, r6]
    86fc:	076d      	lsls	r5, r5, #29
    86fe:	d401      	bmi.n	8704 <extract_decimal+0x1c>
	}
	*str = sp;
    8700:	6019      	str	r1, [r3, #0]
	return val;
}
    8702:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    8704:	fb07 4000 	mla	r0, r7, r0, r4
    8708:	3830      	subs	r0, #48	; 0x30
    870a:	e7f3      	b.n	86f4 <extract_decimal+0xc>
    870c:	0001067f 	.word	0x0001067f

00008710 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    8710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8714:	4615      	mov	r5, r2
    8716:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    8718:	78d3      	ldrb	r3, [r2, #3]
    871a:	4a22      	ldr	r2, [pc, #136]	; (87a4 <encode_uint+0x94>)
	switch (specifier) {
    871c:	2b6f      	cmp	r3, #111	; 0x6f
    871e:	f813 b002 	ldrb.w	fp, [r3, r2]
{
    8722:	4680      	mov	r8, r0
    8724:	460f      	mov	r7, r1
    8726:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    872a:	d029      	beq.n	8780 <encode_uint+0x70>
    872c:	d824      	bhi.n	8778 <encode_uint+0x68>
		return 16;
    872e:	2b58      	cmp	r3, #88	; 0x58
    8730:	bf14      	ite	ne
    8732:	260a      	movne	r6, #10
    8734:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    8736:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    873a:	4632      	mov	r2, r6
    873c:	2300      	movs	r3, #0
    873e:	4640      	mov	r0, r8
    8740:	4639      	mov	r1, r7
    8742:	f7ff fcff 	bl	8144 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    8746:	2a09      	cmp	r2, #9
    8748:	b2d4      	uxtb	r4, r2
    874a:	d81e      	bhi.n	878a <encode_uint+0x7a>
    874c:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    874e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8750:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    8752:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8756:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    875a:	d301      	bcc.n	8760 <encode_uint+0x50>
    875c:	45d1      	cmp	r9, sl
    875e:	d811      	bhi.n	8784 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    8760:	782b      	ldrb	r3, [r5, #0]
    8762:	069b      	lsls	r3, r3, #26
    8764:	d505      	bpl.n	8772 <encode_uint+0x62>
		if (radix == 8) {
    8766:	2e08      	cmp	r6, #8
    8768:	d115      	bne.n	8796 <encode_uint+0x86>
			conv->altform_0 = true;
    876a:	78ab      	ldrb	r3, [r5, #2]
    876c:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    8770:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    8772:	4648      	mov	r0, r9
    8774:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    8778:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    877c:	2b70      	cmp	r3, #112	; 0x70
    877e:	e7d7      	b.n	8730 <encode_uint+0x20>
	switch (specifier) {
    8780:	2608      	movs	r6, #8
    8782:	e7d8      	b.n	8736 <encode_uint+0x26>
		value /= radix;
    8784:	4680      	mov	r8, r0
    8786:	460f      	mov	r7, r1
    8788:	e7d7      	b.n	873a <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    878a:	f1bb 0f01 	cmp.w	fp, #1
    878e:	bf0c      	ite	eq
    8790:	3437      	addeq	r4, #55	; 0x37
    8792:	3457      	addne	r4, #87	; 0x57
    8794:	e7db      	b.n	874e <encode_uint+0x3e>
		} else if (radix == 16) {
    8796:	2e10      	cmp	r6, #16
    8798:	d1eb      	bne.n	8772 <encode_uint+0x62>
			conv->altform_0c = true;
    879a:	78ab      	ldrb	r3, [r5, #2]
    879c:	f043 0310 	orr.w	r3, r3, #16
    87a0:	e7e6      	b.n	8770 <encode_uint+0x60>
    87a2:	bf00      	nop
    87a4:	0001067f 	.word	0x0001067f

000087a8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    87a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    87ac:	4682      	mov	sl, r0
    87ae:	468b      	mov	fp, r1
    87b0:	4691      	mov	r9, r2
    87b2:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    87b4:	2500      	movs	r5, #0
{
    87b6:	b093      	sub	sp, #76	; 0x4c
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    87b8:	f899 0000 	ldrb.w	r0, [r9]
    87bc:	b908      	cbnz	r0, 87c2 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    87be:	4628      	mov	r0, r5
    87c0:	e341      	b.n	8e46 <_flash_used+0x4aa>
			OUTC(*fp++);
    87c2:	f109 0301 	add.w	r3, r9, #1
		if (*fp != '%') {
    87c6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    87c8:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    87ca:	d006      	beq.n	87da <z_cbvprintf_impl+0x32>
			OUTC('%');
    87cc:	4659      	mov	r1, fp
    87ce:	47d0      	blx	sl
    87d0:	2800      	cmp	r0, #0
    87d2:	f2c0 8338 	blt.w	8e46 <_flash_used+0x4aa>
    87d6:	3501      	adds	r5, #1
			break;
    87d8:	e1f5      	b.n	8bc6 <_flash_used+0x22a>
		} state = {
    87da:	2218      	movs	r2, #24
    87dc:	2100      	movs	r1, #0
    87de:	a80c      	add	r0, sp, #48	; 0x30
    87e0:	f007 f98d 	bl	fafe <memset>
	if (*sp == '%') {
    87e4:	f899 3001 	ldrb.w	r3, [r9, #1]
    87e8:	2b25      	cmp	r3, #37	; 0x25
    87ea:	d05a      	beq.n	88a2 <z_cbvprintf_impl+0xfa>
    87ec:	f109 0201 	add.w	r2, r9, #1
    87f0:	4616      	mov	r6, r2
		switch (*sp) {
    87f2:	f812 3b01 	ldrb.w	r3, [r2], #1
    87f6:	2b2b      	cmp	r3, #43	; 0x2b
    87f8:	f000 808b 	beq.w	8912 <z_cbvprintf_impl+0x16a>
    87fc:	d879      	bhi.n	88f2 <z_cbvprintf_impl+0x14a>
    87fe:	2b20      	cmp	r3, #32
    8800:	f000 808c 	beq.w	891c <z_cbvprintf_impl+0x174>
    8804:	2b23      	cmp	r3, #35	; 0x23
    8806:	f000 808e 	beq.w	8926 <z_cbvprintf_impl+0x17e>
	if (conv->flag_zero && conv->flag_dash) {
    880a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    880e:	f003 0244 	and.w	r2, r3, #68	; 0x44
    8812:	2a44      	cmp	r2, #68	; 0x44
    8814:	d103      	bne.n	881e <z_cbvprintf_impl+0x76>
		conv->flag_zero = false;
    8816:	f36f 1386 	bfc	r3, #6, #1
    881a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    881e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    8822:	9605      	str	r6, [sp, #20]
    8824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8828:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    882c:	7833      	ldrb	r3, [r6, #0]
    882e:	2b2a      	cmp	r3, #42	; 0x2a
    8830:	d17e      	bne.n	8930 <z_cbvprintf_impl+0x188>
		conv->width_star = true;
    8832:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    8836:	f043 0301 	orr.w	r3, r3, #1
    883a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    883e:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    8840:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    8842:	781a      	ldrb	r2, [r3, #0]
    8844:	2a2e      	cmp	r2, #46	; 0x2e
    8846:	bf0c      	ite	eq
    8848:	2101      	moveq	r1, #1
    884a:	2100      	movne	r1, #0
    884c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    8850:	f361 0241 	bfi	r2, r1, #1, #1
    8854:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    8858:	d10b      	bne.n	8872 <z_cbvprintf_impl+0xca>
	++sp;
    885a:	1c5a      	adds	r2, r3, #1
    885c:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    885e:	785a      	ldrb	r2, [r3, #1]
    8860:	2a2a      	cmp	r2, #42	; 0x2a
    8862:	d17b      	bne.n	895c <z_cbvprintf_impl+0x1b4>
		conv->prec_star = true;
    8864:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    8868:	3302      	adds	r3, #2
		conv->prec_star = true;
    886a:	f042 0204 	orr.w	r2, r2, #4
    886e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	switch (*sp) {
    8872:	4619      	mov	r1, r3
    8874:	f811 0b01 	ldrb.w	r0, [r1], #1
    8878:	286c      	cmp	r0, #108	; 0x6c
    887a:	f000 80b6 	beq.w	89ea <_flash_used+0x4e>
    887e:	d87d      	bhi.n	897c <z_cbvprintf_impl+0x1d4>
    8880:	2868      	cmp	r0, #104	; 0x68
    8882:	f000 8084 	beq.w	898e <z_cbvprintf_impl+0x1e6>
    8886:	286a      	cmp	r0, #106	; 0x6a
    8888:	f000 80b9 	beq.w	89fe <_flash_used+0x62>
    888c:	284c      	cmp	r0, #76	; 0x4c
    888e:	f000 80bd 	beq.w	8a0c <_flash_used+0x70>
		conv->length_mod = LENGTH_NONE;
    8892:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		break;
    8896:	4619      	mov	r1, r3
		conv->length_mod = LENGTH_NONE;
    8898:	f36f 02c6 	bfc	r2, #3, #4
    889c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    88a0:	e080      	b.n	89a4 <_flash_used+0x8>
		conv->specifier = *sp++;
    88a2:	f109 0202 	add.w	r2, r9, #2
    88a6:	9202      	str	r2, [sp, #8]
    88a8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    88ac:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    88b0:	07d9      	lsls	r1, r3, #31
    88b2:	f140 814a 	bpl.w	8b4a <_flash_used+0x1ae>
			width = va_arg(ap, int);
    88b6:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    88ba:	f1b8 0f00 	cmp.w	r8, #0
    88be:	da07      	bge.n	88d0 <z_cbvprintf_impl+0x128>
				conv->flag_dash = true;
    88c0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				width = -width;
    88c4:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    88c8:	f042 0204 	orr.w	r2, r2, #4
    88cc:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		if (conv->prec_star) {
    88d0:	075a      	lsls	r2, r3, #29
    88d2:	f140 8143 	bpl.w	8b5c <_flash_used+0x1c0>
			int arg = va_arg(ap, int);
    88d6:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    88da:	2f00      	cmp	r7, #0
    88dc:	f280 8142 	bge.w	8b64 <_flash_used+0x1c8>
				conv->prec_present = false;
    88e0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    88e4:	f36f 0341 	bfc	r3, #1, #1
    88e8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    88ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    88f0:	e138      	b.n	8b64 <_flash_used+0x1c8>
		switch (*sp) {
    88f2:	2b2d      	cmp	r3, #45	; 0x2d
    88f4:	d006      	beq.n	8904 <z_cbvprintf_impl+0x15c>
    88f6:	2b30      	cmp	r3, #48	; 0x30
    88f8:	d187      	bne.n	880a <z_cbvprintf_impl+0x62>
			conv->flag_zero = true;
    88fa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    88fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8902:	e003      	b.n	890c <z_cbvprintf_impl+0x164>
			conv->flag_dash = true;
    8904:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    8908:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    890c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    8910:	e76e      	b.n	87f0 <z_cbvprintf_impl+0x48>
			conv->flag_plus = true;
    8912:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    8916:	f043 0308 	orr.w	r3, r3, #8
    891a:	e7f7      	b.n	890c <z_cbvprintf_impl+0x164>
			conv->flag_space = true;
    891c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    8920:	f043 0310 	orr.w	r3, r3, #16
    8924:	e7f2      	b.n	890c <z_cbvprintf_impl+0x164>
			conv->flag_hash = true;
    8926:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    892a:	f043 0320 	orr.w	r3, r3, #32
    892e:	e7ed      	b.n	890c <z_cbvprintf_impl+0x164>
	size_t width = extract_decimal(&sp);
    8930:	a805      	add	r0, sp, #20
    8932:	f7ff fed9 	bl	86e8 <extract_decimal>
	if (sp != wp) {
    8936:	9b05      	ldr	r3, [sp, #20]
    8938:	42b3      	cmp	r3, r6
    893a:	d081      	beq.n	8840 <z_cbvprintf_impl+0x98>
		conv->unsupported |= ((conv->width_value < 0)
    893c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    8940:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    8942:	f3c1 0240 	ubfx	r2, r1, #1, #1
    8946:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    894a:	0052      	lsls	r2, r2, #1
    894c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    8950:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    8954:	430a      	orrs	r2, r1
    8956:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    895a:	e771      	b.n	8840 <z_cbvprintf_impl+0x98>
	size_t prec = extract_decimal(&sp);
    895c:	a805      	add	r0, sp, #20
    895e:	f7ff fec3 	bl	86e8 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    8962:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    8966:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    8968:	f3c3 0240 	ubfx	r2, r3, #1, #1
    896c:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    8970:	f360 0341 	bfi	r3, r0, #1, #1
    8974:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    8978:	9b05      	ldr	r3, [sp, #20]
    897a:	e77a      	b.n	8872 <z_cbvprintf_impl+0xca>
	switch (*sp) {
    897c:	2874      	cmp	r0, #116	; 0x74
    897e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    8982:	d040      	beq.n	8a06 <_flash_used+0x6a>
    8984:	287a      	cmp	r0, #122	; 0x7a
    8986:	d184      	bne.n	8892 <z_cbvprintf_impl+0xea>
		conv->length_mod = LENGTH_Z;
    8988:	4613      	mov	r3, r2
    898a:	2206      	movs	r2, #6
    898c:	e028      	b.n	89e0 <_flash_used+0x44>
		if (*++sp == 'h') {
    898e:	785a      	ldrb	r2, [r3, #1]
    8990:	2a68      	cmp	r2, #104	; 0x68
    8992:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    8996:	d121      	bne.n	89dc <_flash_used+0x40>
			conv->length_mod = LENGTH_HH;
    8998:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    899a:	f361 02c6 	bfi	r2, r1, #3, #4
    899e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    89a2:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    89a4:	460b      	mov	r3, r1
    89a6:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
    89aa:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    89ac:	9302      	str	r3, [sp, #8]
    89ae:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
		if (conv->length_mod == LENGTH_UPPER_L) {
    89b2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	switch (conv->specifier) {
    89b6:	f200 80c0 	bhi.w	8b3a <_flash_used+0x19e>
    89ba:	2a57      	cmp	r2, #87	; 0x57
    89bc:	d833      	bhi.n	8a26 <_flash_used+0x8a>
    89be:	2a41      	cmp	r2, #65	; 0x41
    89c0:	d003      	beq.n	89ca <_flash_used+0x2e>
    89c2:	3a45      	subs	r2, #69	; 0x45
    89c4:	2a02      	cmp	r2, #2
    89c6:	f200 80b8 	bhi.w	8b3a <_flash_used+0x19e>
		conv->specifier_cat = SPECIFIER_FP;
    89ca:	2204      	movs	r2, #4
    89cc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    89d0:	f362 0302 	bfi	r3, r2, #0, #3
    89d4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    89d8:	2301      	movs	r3, #1
			break;
    89da:	e085      	b.n	8ae8 <_flash_used+0x14c>
			conv->length_mod = LENGTH_H;
    89dc:	4613      	mov	r3, r2
    89de:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    89e0:	f362 03c6 	bfi	r3, r2, #3, #4
    89e4:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    89e8:	e7dc      	b.n	89a4 <_flash_used+0x8>
		if (*++sp == 'l') {
    89ea:	785a      	ldrb	r2, [r3, #1]
    89ec:	2a6c      	cmp	r2, #108	; 0x6c
    89ee:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    89f2:	d101      	bne.n	89f8 <_flash_used+0x5c>
			conv->length_mod = LENGTH_LL;
    89f4:	2104      	movs	r1, #4
    89f6:	e7d0      	b.n	899a <z_cbvprintf_impl+0x1f2>
			conv->length_mod = LENGTH_L;
    89f8:	4613      	mov	r3, r2
    89fa:	2203      	movs	r2, #3
    89fc:	e7f0      	b.n	89e0 <_flash_used+0x44>
		conv->length_mod = LENGTH_J;
    89fe:	2205      	movs	r2, #5
    8a00:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    8a04:	e7ec      	b.n	89e0 <_flash_used+0x44>
		conv->length_mod = LENGTH_T;
    8a06:	4613      	mov	r3, r2
    8a08:	2207      	movs	r2, #7
    8a0a:	e7e9      	b.n	89e0 <_flash_used+0x44>
		conv->unsupported = true;
    8a0c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    8a10:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    8a14:	f023 0302 	bic.w	r3, r3, #2
    8a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    8a1c:	f043 0302 	orr.w	r3, r3, #2
    8a20:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    8a24:	e7be      	b.n	89a4 <_flash_used+0x8>
	switch (conv->specifier) {
    8a26:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    8a2a:	2920      	cmp	r1, #32
    8a2c:	f200 8085 	bhi.w	8b3a <_flash_used+0x19e>
    8a30:	a001      	add	r0, pc, #4	; (adr r0, 8a38 <_flash_used+0x9c>)
    8a32:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    8a36:	bf00      	nop
    8a38:	00008afd 	.word	0x00008afd
    8a3c:	00008b3b 	.word	0x00008b3b
    8a40:	00008b3b 	.word	0x00008b3b
    8a44:	00008b3b 	.word	0x00008b3b
    8a48:	00008b3b 	.word	0x00008b3b
    8a4c:	00008b3b 	.word	0x00008b3b
    8a50:	00008b3b 	.word	0x00008b3b
    8a54:	00008b3b 	.word	0x00008b3b
    8a58:	00008b3b 	.word	0x00008b3b
    8a5c:	000089cb 	.word	0x000089cb
    8a60:	00008b3b 	.word	0x00008b3b
    8a64:	00008afd 	.word	0x00008afd
    8a68:	00008abd 	.word	0x00008abd
    8a6c:	000089cb 	.word	0x000089cb
    8a70:	000089cb 	.word	0x000089cb
    8a74:	000089cb 	.word	0x000089cb
    8a78:	00008b3b 	.word	0x00008b3b
    8a7c:	00008abd 	.word	0x00008abd
    8a80:	00008b3b 	.word	0x00008b3b
    8a84:	00008b3b 	.word	0x00008b3b
    8a88:	00008b3b 	.word	0x00008b3b
    8a8c:	00008b3b 	.word	0x00008b3b
    8a90:	00008b05 	.word	0x00008b05
    8a94:	00008afd 	.word	0x00008afd
    8a98:	00008b21 	.word	0x00008b21
    8a9c:	00008b3b 	.word	0x00008b3b
    8aa0:	00008b3b 	.word	0x00008b3b
    8aa4:	00008b21 	.word	0x00008b21
    8aa8:	00008b3b 	.word	0x00008b3b
    8aac:	00008afd 	.word	0x00008afd
    8ab0:	00008b3b 	.word	0x00008b3b
    8ab4:	00008b3b 	.word	0x00008b3b
    8ab8:	00008afd 	.word	0x00008afd
		conv->specifier_cat = SPECIFIER_SINT;
    8abc:	2001      	movs	r0, #1
    8abe:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    8ac2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    8ac6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    8aca:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    8acc:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    8ad0:	bf02      	ittt	eq
    8ad2:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    8ad6:	f041 0101 	orreq.w	r1, r1, #1
    8ada:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    8ade:	2a63      	cmp	r2, #99	; 0x63
    8ae0:	d131      	bne.n	8b46 <_flash_used+0x1aa>
			unsupported = (conv->length_mod != LENGTH_NONE);
    8ae2:	3b00      	subs	r3, #0
    8ae4:	bf18      	it	ne
    8ae6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    8ae8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    8aec:	f3c2 0140 	ubfx	r1, r2, #1, #1
    8af0:	430b      	orrs	r3, r1
    8af2:	f363 0241 	bfi	r2, r3, #1, #1
    8af6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    8afa:	e6d7      	b.n	88ac <z_cbvprintf_impl+0x104>
		conv->specifier_cat = SPECIFIER_UINT;
    8afc:	2002      	movs	r0, #2
    8afe:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    8b02:	e7de      	b.n	8ac2 <_flash_used+0x126>
		conv->specifier_cat = SPECIFIER_PTR;
    8b04:	2103      	movs	r1, #3
    8b06:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    8b0a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    8b0e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    8b12:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    8b16:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    8b18:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    8b1c:	4143      	adcs	r3, r0
    8b1e:	e7e3      	b.n	8ae8 <_flash_used+0x14c>
		conv->specifier_cat = SPECIFIER_PTR;
    8b20:	2103      	movs	r1, #3
    8b22:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    8b26:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    8b2a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    8b2e:	bf14      	ite	ne
    8b30:	2301      	movne	r3, #1
    8b32:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    8b34:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    8b38:	e7d6      	b.n	8ae8 <_flash_used+0x14c>
		conv->invalid = true;
    8b3a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    8b3e:	f043 0301 	orr.w	r3, r3, #1
    8b42:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    8b46:	2300      	movs	r3, #0
    8b48:	e7ce      	b.n	8ae8 <_flash_used+0x14c>
		} else if (conv->width_present) {
    8b4a:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    8b4e:	2a00      	cmp	r2, #0
		int width = -1;
    8b50:	bfac      	ite	ge
    8b52:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
			width = conv->width_value;
    8b56:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
    8b5a:	e6b9      	b.n	88d0 <z_cbvprintf_impl+0x128>
		} else if (conv->prec_present) {
    8b5c:	079f      	lsls	r7, r3, #30
    8b5e:	f57f aec5 	bpl.w	88ec <z_cbvprintf_impl+0x144>
			precision = conv->prec_value;
    8b62:	9f10      	ldr	r7, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    8b64:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    8b66:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
    8b6a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			= (enum length_mod_enum)conv->length_mod;
    8b6e:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		enum specifier_cat_enum specifier_cat
    8b72:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    8b76:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    8b78:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    8b7c:	d136      	bne.n	8bec <_flash_used+0x250>
			switch (length_mod) {
    8b7e:	1ecb      	subs	r3, r1, #3
    8b80:	2b04      	cmp	r3, #4
    8b82:	d823      	bhi.n	8bcc <_flash_used+0x230>
    8b84:	e8df f003 	tbb	[pc, r3]
    8b88:	22090903 	.word	0x22090903
    8b8c:	22          	.byte	0x22
    8b8d:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    8b8e:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    8b92:	17da      	asrs	r2, r3, #31
    8b94:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    8b98:	e006      	b.n	8ba8 <_flash_used+0x20c>
					(sint_value_type)va_arg(ap, intmax_t);
    8b9a:	3407      	adds	r4, #7
    8b9c:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    8ba0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    8ba4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    8ba8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    8bac:	f013 0603 	ands.w	r6, r3, #3
    8bb0:	d05a      	beq.n	8c68 <_flash_used+0x2cc>
			OUTS(sp, fp);
    8bb2:	464a      	mov	r2, r9
    8bb4:	4659      	mov	r1, fp
    8bb6:	4650      	mov	r0, sl
    8bb8:	9b02      	ldr	r3, [sp, #8]
    8bba:	f006 f8e6 	bl	ed8a <outs>
    8bbe:	2800      	cmp	r0, #0
    8bc0:	f2c0 8141 	blt.w	8e46 <_flash_used+0x4aa>
    8bc4:	4405      	add	r5, r0
			OUTS(bps, bpe);
    8bc6:	f8dd 9008 	ldr.w	r9, [sp, #8]
    8bca:	e5f5      	b.n	87b8 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    8bcc:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    8bd0:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    8bd2:	ea4f 72e3 	mov.w	r2, r3, asr #31
    8bd6:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    8bda:	d102      	bne.n	8be2 <_flash_used+0x246>
				value->sint = (signed char)value->sint;
    8bdc:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
    8be0:	e7d7      	b.n	8b92 <_flash_used+0x1f6>
			} else if (length_mod == LENGTH_H) {
    8be2:	2902      	cmp	r1, #2
    8be4:	d1e0      	bne.n	8ba8 <_flash_used+0x20c>
				value->sint = (short)value->sint;
    8be6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    8bea:	e7d2      	b.n	8b92 <_flash_used+0x1f6>
		} else if (specifier_cat == SPECIFIER_UINT) {
    8bec:	2b02      	cmp	r3, #2
    8bee:	d129      	bne.n	8c44 <_flash_used+0x2a8>
			switch (length_mod) {
    8bf0:	1ecb      	subs	r3, r1, #3
    8bf2:	2b04      	cmp	r3, #4
    8bf4:	d813      	bhi.n	8c1e <_flash_used+0x282>
    8bf6:	e8df f003 	tbb	[pc, r3]
    8bfa:	0a03      	.short	0x0a03
    8bfc:	120a      	.short	0x120a
    8bfe:	12          	.byte	0x12
    8bff:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    8c00:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    8c02:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    8c04:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    8c06:	920c      	str	r2, [sp, #48]	; 0x30
    8c08:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    8c0a:	4604      	mov	r4, r0
    8c0c:	e7cc      	b.n	8ba8 <_flash_used+0x20c>
					(uint_value_type)va_arg(ap,
    8c0e:	1de0      	adds	r0, r4, #7
    8c10:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    8c14:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    8c18:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    8c1c:	e7f5      	b.n	8c0a <_flash_used+0x26e>
					(uint_value_type)va_arg(ap, size_t);
    8c1e:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    8c22:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    8c24:	930c      	str	r3, [sp, #48]	; 0x30
    8c26:	f04f 0300 	mov.w	r3, #0
    8c2a:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    8c2c:	d105      	bne.n	8c3a <_flash_used+0x29e>
				value->uint = (unsigned char)value->uint;
    8c2e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    8c32:	930c      	str	r3, [sp, #48]	; 0x30
    8c34:	2300      	movs	r3, #0
    8c36:	930d      	str	r3, [sp, #52]	; 0x34
    8c38:	e7b6      	b.n	8ba8 <_flash_used+0x20c>
			} else if (length_mod == LENGTH_H) {
    8c3a:	2902      	cmp	r1, #2
    8c3c:	d1b4      	bne.n	8ba8 <_flash_used+0x20c>
				value->uint = (unsigned short)value->uint;
    8c3e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    8c42:	e7f6      	b.n	8c32 <_flash_used+0x296>
		} else if (specifier_cat == SPECIFIER_FP) {
    8c44:	2b04      	cmp	r3, #4
    8c46:	d109      	bne.n	8c5c <_flash_used+0x2c0>
					(sint_value_type)va_arg(ap, long long);
    8c48:	1de3      	adds	r3, r4, #7
    8c4a:	f023 0307 	bic.w	r3, r3, #7
    8c4e:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    8c52:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c56:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    8c5a:	e7a5      	b.n	8ba8 <_flash_used+0x20c>
		} else if (specifier_cat == SPECIFIER_PTR) {
    8c5c:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    8c5e:	bf04      	itt	eq
    8c60:	f854 3b04 	ldreq.w	r3, [r4], #4
    8c64:	930c      	streq	r3, [sp, #48]	; 0x30
    8c66:	e79f      	b.n	8ba8 <_flash_used+0x20c>
		switch (conv->specifier) {
    8c68:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    8c6c:	2878      	cmp	r0, #120	; 0x78
    8c6e:	d8aa      	bhi.n	8bc6 <_flash_used+0x22a>
    8c70:	2862      	cmp	r0, #98	; 0x62
    8c72:	d820      	bhi.n	8cb6 <_flash_used+0x31a>
    8c74:	2825      	cmp	r0, #37	; 0x25
    8c76:	f43f ada9 	beq.w	87cc <z_cbvprintf_impl+0x24>
    8c7a:	2858      	cmp	r0, #88	; 0x58
    8c7c:	d1a3      	bne.n	8bc6 <_flash_used+0x22a>
			bps = encode_uint(value->uint, conv, buf, bpe);
    8c7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    8c82:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    8c86:	9300      	str	r3, [sp, #0]
    8c88:	aa0e      	add	r2, sp, #56	; 0x38
    8c8a:	ab06      	add	r3, sp, #24
    8c8c:	f7ff fd40 	bl	8710 <encode_uint>
    8c90:	4681      	mov	r9, r0
			if (precision >= 0) {
    8c92:	2f00      	cmp	r7, #0
    8c94:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    8c98:	db0b      	blt.n	8cb2 <_flash_used+0x316>
				conv->flag_zero = false;
    8c9a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    8c9e:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
    8ca2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    8ca6:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    8ca8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    8cac:	d901      	bls.n	8cb2 <_flash_used+0x316>
					conv->pad0_value = precision - (int)len;
    8cae:	1afb      	subs	r3, r7, r3
    8cb0:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    8cb2:	4607      	mov	r7, r0
    8cb4:	e03d      	b.n	8d32 <_flash_used+0x396>
		switch (conv->specifier) {
    8cb6:	3863      	subs	r0, #99	; 0x63
    8cb8:	2815      	cmp	r0, #21
    8cba:	d884      	bhi.n	8bc6 <_flash_used+0x22a>
    8cbc:	a201      	add	r2, pc, #4	; (adr r2, 8cc4 <_flash_used+0x328>)
    8cbe:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    8cc2:	bf00      	nop
    8cc4:	00008d43 	.word	0x00008d43
    8cc8:	00008da5 	.word	0x00008da5
    8ccc:	00008bc7 	.word	0x00008bc7
    8cd0:	00008bc7 	.word	0x00008bc7
    8cd4:	00008bc7 	.word	0x00008bc7
    8cd8:	00008bc7 	.word	0x00008bc7
    8cdc:	00008da5 	.word	0x00008da5
    8ce0:	00008bc7 	.word	0x00008bc7
    8ce4:	00008bc7 	.word	0x00008bc7
    8ce8:	00008bc7 	.word	0x00008bc7
    8cec:	00008bc7 	.word	0x00008bc7
    8cf0:	00008dff 	.word	0x00008dff
    8cf4:	00008dcd 	.word	0x00008dcd
    8cf8:	00008dd1 	.word	0x00008dd1
    8cfc:	00008bc7 	.word	0x00008bc7
    8d00:	00008bc7 	.word	0x00008bc7
    8d04:	00008d1d 	.word	0x00008d1d
    8d08:	00008bc7 	.word	0x00008bc7
    8d0c:	00008dcd 	.word	0x00008dcd
    8d10:	00008bc7 	.word	0x00008bc7
    8d14:	00008bc7 	.word	0x00008bc7
    8d18:	00008dcd 	.word	0x00008dcd
			if (precision >= 0) {
    8d1c:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    8d1e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
    8d22:	db0a      	blt.n	8d3a <_flash_used+0x39e>
				len = strnlen(bps, precision);
    8d24:	4639      	mov	r1, r7
    8d26:	4648      	mov	r0, r9
    8d28:	f006 ff69 	bl	fbfe <strnlen>
		char sign = 0;
    8d2c:	2600      	movs	r6, #0
			bpe = bps + len;
    8d2e:	eb09 0700 	add.w	r7, r9, r0
		if (bps == NULL) {
    8d32:	f1b9 0f00 	cmp.w	r9, #0
    8d36:	d10c      	bne.n	8d52 <_flash_used+0x3b6>
    8d38:	e745      	b.n	8bc6 <_flash_used+0x22a>
				len = strlen(bps);
    8d3a:	4648      	mov	r0, r9
    8d3c:	f7ff fb6d 	bl	841a <strlen>
    8d40:	e7f4      	b.n	8d2c <_flash_used+0x390>
			break;
    8d42:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    8d44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			bpe = buf + 1;
    8d46:	f10d 0719 	add.w	r7, sp, #25
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    8d4a:	f88d 3018 	strb.w	r3, [sp, #24]
			bps = buf;
    8d4e:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
    8d52:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
    8d56:	b106      	cbz	r6, 8d5a <_flash_used+0x3be>
			nj_len += 1U;
    8d58:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    8d5a:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    8d5e:	06d0      	lsls	r0, r2, #27
    8d60:	d566      	bpl.n	8e30 <_flash_used+0x494>
			nj_len += 2U;
    8d62:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    8d64:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    8d66:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
    8d68:	bf48      	it	mi
    8d6a:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
    8d6c:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    8d6e:	bf48      	it	mi
    8d70:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    8d72:	f1b8 0f00 	cmp.w	r8, #0
    8d76:	dd73      	ble.n	8e60 <_flash_used+0x4c4>
			if (!conv->flag_dash) {
    8d78:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
    8d7c:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    8d80:	f3c2 0380 	ubfx	r3, r2, #2, #1
    8d84:	9303      	str	r3, [sp, #12]
    8d86:	0753      	lsls	r3, r2, #29
    8d88:	d46a      	bmi.n	8e60 <_flash_used+0x4c4>
				if (conv->flag_zero) {
    8d8a:	0650      	lsls	r0, r2, #25
    8d8c:	d55e      	bpl.n	8e4c <_flash_used+0x4b0>
					if (sign != 0) {
    8d8e:	b13e      	cbz	r6, 8da0 <_flash_used+0x404>
						OUTC(sign);
    8d90:	4659      	mov	r1, fp
    8d92:	4630      	mov	r0, r6
    8d94:	47d0      	blx	sl
    8d96:	2800      	cmp	r0, #0
    8d98:	db55      	blt.n	8e46 <_flash_used+0x4aa>
						sign = 0;
    8d9a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    8d9c:	3501      	adds	r5, #1
						sign = 0;
    8d9e:	461e      	mov	r6, r3
					pad = '0';
    8da0:	2330      	movs	r3, #48	; 0x30
    8da2:	e054      	b.n	8e4e <_flash_used+0x4b2>
			if (conv->flag_plus) {
    8da4:	071e      	lsls	r6, r3, #28
    8da6:	d40f      	bmi.n	8dc8 <_flash_used+0x42c>
				sign = ' ';
    8da8:	f013 0610 	ands.w	r6, r3, #16
    8dac:	bf18      	it	ne
    8dae:	2620      	movne	r6, #32
			sint = value->sint;
    8db0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    8db4:	2b00      	cmp	r3, #0
    8db6:	f6bf af62 	bge.w	8c7e <_flash_used+0x2e2>
				value->uint = (uint_value_type)-sint;
    8dba:	4252      	negs	r2, r2
    8dbc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    8dc0:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    8dc2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    8dc6:	e75a      	b.n	8c7e <_flash_used+0x2e2>
				sign = '+';
    8dc8:	262b      	movs	r6, #43	; 0x2b
    8dca:	e7f1      	b.n	8db0 <_flash_used+0x414>
		switch (conv->specifier) {
    8dcc:	2600      	movs	r6, #0
    8dce:	e756      	b.n	8c7e <_flash_used+0x2e2>
			if (value->ptr != NULL) {
    8dd0:	980c      	ldr	r0, [sp, #48]	; 0x30
    8dd2:	b340      	cbz	r0, 8e26 <_flash_used+0x48a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    8dd4:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    8dd8:	9300      	str	r3, [sp, #0]
    8dda:	2100      	movs	r1, #0
    8ddc:	ab06      	add	r3, sp, #24
    8dde:	aa0e      	add	r2, sp, #56	; 0x38
    8de0:	f7ff fc96 	bl	8710 <encode_uint>
				conv->altform_0c = true;
    8de4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
				bps = encode_uint((uintptr_t)value->ptr, conv,
    8de8:	4681      	mov	r9, r0
				conv->altform_0c = true;
    8dea:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    8dee:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    8df2:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    8df6:	2600      	movs	r6, #0
				conv->altform_0c = true;
    8df8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
				goto prec_int_pad0;
    8dfc:	e749      	b.n	8c92 <_flash_used+0x2f6>
				store_count(conv, value->ptr, count);
    8dfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    8e00:	2907      	cmp	r1, #7
    8e02:	f63f aee0 	bhi.w	8bc6 <_flash_used+0x22a>
    8e06:	e8df f001 	tbb	[pc, r1]
    8e0a:	040c      	.short	0x040c
    8e0c:	08080c06 	.word	0x08080c06
    8e10:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    8e12:	701d      	strb	r5, [r3, #0]
		break;
    8e14:	e6d7      	b.n	8bc6 <_flash_used+0x22a>
		*(short *)dp = (short)count;
    8e16:	801d      	strh	r5, [r3, #0]
		break;
    8e18:	e6d5      	b.n	8bc6 <_flash_used+0x22a>
		*(intmax_t *)dp = (intmax_t)count;
    8e1a:	17ea      	asrs	r2, r5, #31
    8e1c:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    8e20:	e6d1      	b.n	8bc6 <_flash_used+0x22a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    8e22:	601d      	str	r5, [r3, #0]
		break;
    8e24:	e6cf      	b.n	8bc6 <_flash_used+0x22a>
			bpe = bps + 5;
    8e26:	4f2e      	ldr	r7, [pc, #184]	; (8ee0 <_flash_used+0x544>)
    8e28:	4606      	mov	r6, r0
			bps = "(nil)";
    8e2a:	f1a7 0905 	sub.w	r9, r7, #5
    8e2e:	e790      	b.n	8d52 <_flash_used+0x3b6>
		} else if (conv->altform_0) {
    8e30:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    8e32:	bf48      	it	mi
    8e34:	3301      	addmi	r3, #1
    8e36:	e795      	b.n	8d64 <_flash_used+0x3c8>
					OUTC(pad);
    8e38:	4618      	mov	r0, r3
    8e3a:	4659      	mov	r1, fp
    8e3c:	9303      	str	r3, [sp, #12]
    8e3e:	47d0      	blx	sl
    8e40:	2800      	cmp	r0, #0
    8e42:	9b03      	ldr	r3, [sp, #12]
    8e44:	da04      	bge.n	8e50 <_flash_used+0x4b4>
#undef OUTS
#undef OUTC
}
    8e46:	b013      	add	sp, #76	; 0x4c
    8e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    8e4c:	2320      	movs	r3, #32
    8e4e:	4445      	add	r5, r8
    8e50:	4642      	mov	r2, r8
				while (width-- > 0) {
    8e52:	2a00      	cmp	r2, #0
    8e54:	eba5 0108 	sub.w	r1, r5, r8
    8e58:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    8e5c:	dcec      	bgt.n	8e38 <_flash_used+0x49c>
    8e5e:	460d      	mov	r5, r1
		if (sign != 0) {
    8e60:	b12e      	cbz	r6, 8e6e <_flash_used+0x4d2>
			OUTC(sign);
    8e62:	4659      	mov	r1, fp
    8e64:	4630      	mov	r0, r6
    8e66:	47d0      	blx	sl
    8e68:	2800      	cmp	r0, #0
    8e6a:	dbec      	blt.n	8e46 <_flash_used+0x4aa>
    8e6c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    8e6e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    8e72:	06d9      	lsls	r1, r3, #27
    8e74:	d401      	bmi.n	8e7a <_flash_used+0x4de>
    8e76:	071a      	lsls	r2, r3, #28
    8e78:	d505      	bpl.n	8e86 <_flash_used+0x4ea>
				OUTC('0');
    8e7a:	4659      	mov	r1, fp
    8e7c:	2030      	movs	r0, #48	; 0x30
    8e7e:	47d0      	blx	sl
    8e80:	2800      	cmp	r0, #0
    8e82:	dbe0      	blt.n	8e46 <_flash_used+0x4aa>
    8e84:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    8e86:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    8e8a:	06db      	lsls	r3, r3, #27
    8e8c:	d506      	bpl.n	8e9c <_flash_used+0x500>
				OUTC(conv->specifier);
    8e8e:	4659      	mov	r1, fp
    8e90:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    8e94:	47d0      	blx	sl
    8e96:	2800      	cmp	r0, #0
    8e98:	dbd5      	blt.n	8e46 <_flash_used+0x4aa>
    8e9a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    8e9c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    8e9e:	442e      	add	r6, r5
    8ea0:	1b73      	subs	r3, r6, r5
    8ea2:	2b00      	cmp	r3, #0
    8ea4:	dc15      	bgt.n	8ed2 <_flash_used+0x536>
			OUTS(bps, bpe);
    8ea6:	463b      	mov	r3, r7
    8ea8:	464a      	mov	r2, r9
    8eaa:	4659      	mov	r1, fp
    8eac:	4650      	mov	r0, sl
    8eae:	f005 ff6c 	bl	ed8a <outs>
    8eb2:	2800      	cmp	r0, #0
    8eb4:	dbc7      	blt.n	8e46 <_flash_used+0x4aa>
    8eb6:	4405      	add	r5, r0
		while (width > 0) {
    8eb8:	44a8      	add	r8, r5
    8eba:	eba8 0305 	sub.w	r3, r8, r5
    8ebe:	2b00      	cmp	r3, #0
    8ec0:	f77f ae81 	ble.w	8bc6 <_flash_used+0x22a>
			OUTC(' ');
    8ec4:	4659      	mov	r1, fp
    8ec6:	2020      	movs	r0, #32
    8ec8:	47d0      	blx	sl
    8eca:	2800      	cmp	r0, #0
    8ecc:	dbbb      	blt.n	8e46 <_flash_used+0x4aa>
    8ece:	3501      	adds	r5, #1
			--width;
    8ed0:	e7f3      	b.n	8eba <_flash_used+0x51e>
				OUTC('0');
    8ed2:	4659      	mov	r1, fp
    8ed4:	2030      	movs	r0, #48	; 0x30
    8ed6:	47d0      	blx	sl
    8ed8:	2800      	cmp	r0, #0
    8eda:	dbb4      	blt.n	8e46 <_flash_used+0x4aa>
    8edc:	3501      	adds	r5, #1
    8ede:	e7df      	b.n	8ea0 <_flash_used+0x504>
    8ee0:	00010595 	.word	0x00010595

00008ee4 <nordicsemi_nrf91_init>:
    8ee4:	f04f 0220 	mov.w	r2, #32
    8ee8:	f3ef 8311 	mrs	r3, BASEPRI
    8eec:	f382 8812 	msr	BASEPRI_MAX, r2
    8ef0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    8ef4:	2101      	movs	r1, #1
    8ef6:	4a04      	ldr	r2, [pc, #16]	; (8f08 <nordicsemi_nrf91_init+0x24>)
    8ef8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    8efc:	f383 8811 	msr	BASEPRI, r3
    8f00:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    8f04:	2000      	movs	r0, #0
    8f06:	4770      	bx	lr
    8f08:	40039000 	.word	0x40039000

00008f0c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    8f0c:	b120      	cbz	r0, 8f18 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    8f0e:	4b03      	ldr	r3, [pc, #12]	; (8f1c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    8f10:	0180      	lsls	r0, r0, #6
    8f12:	f043 0301 	orr.w	r3, r3, #1
    8f16:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    8f18:	4770      	bx	lr
    8f1a:	bf00      	nop
    8f1c:	00010140 	.word	0x00010140

00008f20 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    8f20:	f002 b8f4 	b.w	b10c <SystemInit>

00008f24 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    8f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8f28:	4605      	mov	r5, r0
	__asm__ volatile(
    8f2a:	f04f 0320 	mov.w	r3, #32
    8f2e:	f3ef 8611 	mrs	r6, BASEPRI
    8f32:	f383 8812 	msr	BASEPRI_MAX, r3
    8f36:	f3bf 8f6f 	isb	sy
	return list->head;
    8f3a:	4b0e      	ldr	r3, [pc, #56]	; (8f74 <pm_state_notify+0x50>)
    8f3c:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    8f3e:	b19c      	cbz	r4, 8f68 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    8f40:	f04f 090c 	mov.w	r9, #12
    8f44:	4f0c      	ldr	r7, [pc, #48]	; (8f78 <pm_state_notify+0x54>)
    8f46:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8f7c <pm_state_notify+0x58>
			callback = notifier->state_exit;
    8f4a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    8f4e:	2d00      	cmp	r5, #0
    8f50:	bf08      	it	eq
    8f52:	4613      	moveq	r3, r2
		if (callback) {
    8f54:	b12b      	cbz	r3, 8f62 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    8f56:	f898 2014 	ldrb.w	r2, [r8, #20]
    8f5a:	fb09 f202 	mul.w	r2, r9, r2
    8f5e:	5cb8      	ldrb	r0, [r7, r2]
    8f60:	4798      	blx	r3
	return node->next;
    8f62:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    8f64:	2c00      	cmp	r4, #0
    8f66:	d1f0      	bne.n	8f4a <pm_state_notify+0x26>
	__asm__ volatile(
    8f68:	f386 8811 	msr	BASEPRI, r6
    8f6c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    8f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8f74:	2000c8c4 	.word	0x2000c8c4
    8f78:	2000c8d8 	.word	0x2000c8d8
    8f7c:	2000ce54 	.word	0x2000ce54

00008f80 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    8f80:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    8f82:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = CURRENT_CPU;
    8f84:	4b17      	ldr	r3, [pc, #92]	; (8fe4 <pm_system_resume+0x64>)
    8f86:	7d1c      	ldrb	r4, [r3, #20]
    8f88:	f004 031f 	and.w	r3, r4, #31
    8f8c:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8f8e:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8f90:	4b15      	ldr	r3, [pc, #84]	; (8fe8 <pm_system_resume+0x68>)
    8f92:	0961      	lsrs	r1, r4, #5
    8f94:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    8f98:	e8d3 1fef 	ldaex	r1, [r3]
    8f9c:	ea01 0500 	and.w	r5, r1, r0
    8fa0:	e8c3 5fec 	stlex	ip, r5, [r3]
    8fa4:	f1bc 0f00 	cmp.w	ip, #0
    8fa8:	d1f6      	bne.n	8f98 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    8faa:	4211      	tst	r1, r2
    8fac:	d013      	beq.n	8fd6 <pm_system_resume+0x56>
	if (pm_state_exit_post_ops != NULL) {
    8fae:	4b0f      	ldr	r3, [pc, #60]	; (8fec <pm_system_resume+0x6c>)
    8fb0:	4d0f      	ldr	r5, [pc, #60]	; (8ff0 <pm_system_resume+0x70>)
    8fb2:	b18b      	cbz	r3, 8fd8 <pm_system_resume+0x58>
		pm_state_exit_post_ops(info->state, info->substate_id);
    8fb4:	230c      	movs	r3, #12
    8fb6:	4363      	muls	r3, r4
    8fb8:	18ea      	adds	r2, r5, r3
    8fba:	7851      	ldrb	r1, [r2, #1]
    8fbc:	5ce8      	ldrb	r0, [r5, r3]
    8fbe:	f005 ff07 	bl	edd0 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    8fc2:	2000      	movs	r0, #0
    8fc4:	f7ff ffae 	bl	8f24 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    8fc8:	230c      	movs	r3, #12
    8fca:	435c      	muls	r4, r3
    8fcc:	2300      	movs	r3, #0
    8fce:	192a      	adds	r2, r5, r4
    8fd0:	512b      	str	r3, [r5, r4]
    8fd2:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    8fd6:	bd38      	pop	{r3, r4, r5, pc}
    8fd8:	f383 8811 	msr	BASEPRI, r3
    8fdc:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    8fe0:	e7ef      	b.n	8fc2 <pm_system_resume+0x42>
    8fe2:	bf00      	nop
    8fe4:	2000ce54 	.word	0x2000ce54
    8fe8:	2000c8e4 	.word	0x2000c8e4
    8fec:	0000edd1 	.word	0x0000edd1
    8ff0:	2000c8d8 	.word	0x2000c8d8

00008ff4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    8ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    8ff8:	4b31      	ldr	r3, [pc, #196]	; (90c0 <pm_system_suspend+0xcc>)
{
    8ffa:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    8ffc:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    8ffe:	f04f 0320 	mov.w	r3, #32
    9002:	f3ef 8811 	mrs	r8, BASEPRI
    9006:	f383 8812 	msr	BASEPRI_MAX, r3
    900a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    900e:	240c      	movs	r4, #12
    9010:	436c      	muls	r4, r5
    9012:	4b2c      	ldr	r3, [pc, #176]	; (90c4 <pm_system_suspend+0xd0>)
    9014:	4e2c      	ldr	r6, [pc, #176]	; (90c8 <pm_system_suspend+0xd4>)
    9016:	5d19      	ldrb	r1, [r3, r4]
    9018:	191a      	adds	r2, r3, r4
    901a:	2900      	cmp	r1, #0
    901c:	d045      	beq.n	90aa <pm_system_suspend+0xb6>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    901e:	ca07      	ldmia	r2, {r0, r1, r2}
    9020:	eb06 0c04 	add.w	ip, r6, r4
    9024:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    9028:	2200      	movs	r2, #0
    902a:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    902c:	f388 8811 	msr	BASEPRI, r8
    9030:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    9034:	230c      	movs	r3, #12
    9036:	436b      	muls	r3, r5
    9038:	5cf0      	ldrb	r0, [r6, r3]
    903a:	18f2      	adds	r2, r6, r3
    903c:	b398      	cbz	r0, 90a6 <pm_system_suspend+0xb2>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    903e:	1c7b      	adds	r3, r7, #1
    9040:	d00f      	beq.n	9062 <pm_system_suspend+0x6e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    9042:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    9046:	2100      	movs	r1, #0
    9048:	f8d2 c008 	ldr.w	ip, [r2, #8]
    904c:	481f      	ldr	r0, [pc, #124]	; (90cc <pm_system_suspend+0xd8>)
    904e:	2300      	movs	r3, #0
    9050:	fbec 0104 	umlal	r0, r1, ip, r4
    9054:	4a1e      	ldr	r2, [pc, #120]	; (90d0 <pm_system_suspend+0xdc>)
    9056:	f7ff f875 	bl	8144 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    905a:	2101      	movs	r1, #1
    905c:	1a38      	subs	r0, r7, r0
    905e:	f006 fc5f 	bl	f920 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    9062:	f004 fa89 	bl	d578 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    9066:	2001      	movs	r0, #1
    9068:	f7ff ff5c 	bl	8f24 <pm_state_notify>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    906c:	2101      	movs	r1, #1
    906e:	f005 021f 	and.w	r2, r5, #31
    9072:	4091      	lsls	r1, r2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9074:	4a17      	ldr	r2, [pc, #92]	; (90d4 <pm_system_suspend+0xe0>)

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9076:	096b      	lsrs	r3, r5, #5
    9078:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    907c:	e8d3 2fef 	ldaex	r2, [r3]
    9080:	430a      	orrs	r2, r1
    9082:	e8c3 2fe0 	stlex	r0, r2, [r3]
    9086:	2800      	cmp	r0, #0
    9088:	d1f8      	bne.n	907c <pm_system_suspend+0x88>
	if (pm_state_set != NULL) {
    908a:	4b13      	ldr	r3, [pc, #76]	; (90d8 <pm_system_suspend+0xe4>)
    908c:	b133      	cbz	r3, 909c <pm_system_suspend+0xa8>
		pm_state_set(info->state, info->substate_id);
    908e:	200c      	movs	r0, #12
    9090:	4368      	muls	r0, r5
    9092:	1833      	adds	r3, r6, r0
    9094:	7859      	ldrb	r1, [r3, #1]
    9096:	5c30      	ldrb	r0, [r6, r0]
    9098:	f005 fe8e 	bl	edb8 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    909c:	f7ff ff70 	bl	8f80 <pm_system_resume>
	k_sched_unlock();
    90a0:	f004 fc3a 	bl	d918 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    90a4:	2001      	movs	r0, #1
}
    90a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    90aa:	4601      	mov	r1, r0
    90ac:	4628      	mov	r0, r5
    90ae:	f000 f815 	bl	90dc <pm_policy_next_state>
		if (info != NULL) {
    90b2:	2800      	cmp	r0, #0
    90b4:	d0ba      	beq.n	902c <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    90b6:	c807      	ldmia	r0, {r0, r1, r2}
    90b8:	4434      	add	r4, r6
    90ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    90be:	e7b5      	b.n	902c <pm_system_suspend+0x38>
    90c0:	2000ce54 	.word	0x2000ce54
    90c4:	2000c8cc 	.word	0x2000c8cc
    90c8:	2000c8d8 	.word	0x2000c8d8
    90cc:	000f423f 	.word	0x000f423f
    90d0:	000f4240 	.word	0x000f4240
    90d4:	2000c8e4 	.word	0x2000c8e4
    90d8:	0000edb9 	.word	0x0000edb9

000090dc <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    90dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90e0:	b085      	sub	sp, #20
    90e2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    90e4:	a903      	add	r1, sp, #12
    90e6:	f000 f841 	bl	916c <pm_state_cpu_get_all>
    90ea:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    90ee:	f04f 0b00 	mov.w	fp, #0

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
    90f2:	9b03      	ldr	r3, [sp, #12]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    90f4:	1e44      	subs	r4, r0, #1
		const struct pm_state_info *state = &cpu_states[i];
    90f6:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    90f8:	4b19      	ldr	r3, [pc, #100]	; (9160 <pm_policy_next_state+0x84>)
    90fa:	f8df 8068 	ldr.w	r8, [pc, #104]	; 9164 <pm_policy_next_state+0x88>
    90fe:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    9102:	b224      	sxth	r4, r4
    9104:	1c63      	adds	r3, r4, #1
    9106:	d104      	bne.n	9112 <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    9108:	2500      	movs	r5, #0
}
    910a:	4628      	mov	r0, r5
    910c:	b005      	add	sp, #20
    910e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9112:	46c4      	mov	ip, r8
    9114:	4659      	mov	r1, fp
		const struct pm_state_info *state = &cpu_states[i];
    9116:	9b01      	ldr	r3, [sp, #4]
    9118:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    911c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    9120:	6868      	ldr	r0, [r5, #4]
    9122:	2300      	movs	r3, #0
    9124:	fbe0 c107 	umlal	ip, r1, r0, r7
    9128:	4a0f      	ldr	r2, [pc, #60]	; (9168 <pm_policy_next_state+0x8c>)
    912a:	4660      	mov	r0, ip
    912c:	f7ff f80a 	bl	8144 <__aeabi_uldivmod>
    9130:	46c4      	mov	ip, r8
    9132:	4659      	mov	r1, fp
    9134:	4681      	mov	r9, r0
    9136:	68a8      	ldr	r0, [r5, #8]
    9138:	2300      	movs	r3, #0
    913a:	fbe0 c107 	umlal	ip, r1, r0, r7
    913e:	4a0a      	ldr	r2, [pc, #40]	; (9168 <pm_policy_next_state+0x8c>)
    9140:	4660      	mov	r0, ip
    9142:	f7fe ffff 	bl	8144 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    9146:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
    914a:	d001      	beq.n	9150 <pm_policy_next_state+0x74>
    914c:	4582      	cmp	sl, r0
    914e:	d904      	bls.n	915a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    9150:	1c72      	adds	r2, r6, #1
    9152:	d0da      	beq.n	910a <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
    9154:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
    9156:	42b0      	cmp	r0, r6
    9158:	d9d7      	bls.n	910a <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    915a:	3c01      	subs	r4, #1
    915c:	b224      	sxth	r4, r4
    915e:	e7d1      	b.n	9104 <pm_policy_next_state+0x28>
    9160:	2000c504 	.word	0x2000c504
    9164:	000f423f 	.word	0x000f423f
    9168:	000f4240 	.word	0x000f4240

0000916c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    916c:	b908      	cbnz	r0, 9172 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    916e:	4b02      	ldr	r3, [pc, #8]	; (9178 <pm_state_cpu_get_all+0xc>)
    9170:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    9172:	2000      	movs	r0, #0
    9174:	4770      	bx	lr
    9176:	bf00      	nop
    9178:	00010154 	.word	0x00010154

0000917c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    917c:	4901      	ldr	r1, [pc, #4]	; (9184 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    917e:	2210      	movs	r2, #16
	str	r2, [r1]
    9180:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    9182:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    9184:	e000ed10 	.word	0xe000ed10

00009188 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    9188:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    918a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    918c:	f380 8811 	msr	BASEPRI, r0
	isb
    9190:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    9194:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    9198:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    919a:	b662      	cpsie	i
	isb
    919c:	f3bf 8f6f 	isb	sy

	bx	lr
    91a0:	4770      	bx	lr
    91a2:	bf00      	nop

000091a4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    91a4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    91a6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    91a8:	f381 8811 	msr	BASEPRI, r1

	wfe
    91ac:	bf20      	wfe

	msr	BASEPRI, r0
    91ae:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    91b2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    91b4:	4770      	bx	lr
    91b6:	bf00      	nop

000091b8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    91b8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    91ba:	2b00      	cmp	r3, #0
    91bc:	db08      	blt.n	91d0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    91be:	2201      	movs	r2, #1
    91c0:	f000 001f 	and.w	r0, r0, #31
    91c4:	fa02 f000 	lsl.w	r0, r2, r0
    91c8:	4a02      	ldr	r2, [pc, #8]	; (91d4 <arch_irq_enable+0x1c>)
    91ca:	095b      	lsrs	r3, r3, #5
    91cc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    91d0:	4770      	bx	lr
    91d2:	bf00      	nop
    91d4:	e000e100 	.word	0xe000e100

000091d8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    91d8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    91da:	2b00      	cmp	r3, #0
    91dc:	db0d      	blt.n	91fa <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    91de:	2201      	movs	r2, #1
    91e0:	f000 001f 	and.w	r0, r0, #31
    91e4:	fa02 f000 	lsl.w	r0, r2, r0
    91e8:	095b      	lsrs	r3, r3, #5
    91ea:	4a04      	ldr	r2, [pc, #16]	; (91fc <arch_irq_disable+0x24>)
    91ec:	3320      	adds	r3, #32
    91ee:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    91f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    91f6:	f3bf 8f6f 	isb	sy
}
    91fa:	4770      	bx	lr
    91fc:	e000e100 	.word	0xe000e100

00009200 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    9200:	4b05      	ldr	r3, [pc, #20]	; (9218 <arch_irq_is_enabled+0x18>)
    9202:	0942      	lsrs	r2, r0, #5
    9204:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    9208:	2301      	movs	r3, #1
    920a:	f000 001f 	and.w	r0, r0, #31
    920e:	fa03 f000 	lsl.w	r0, r3, r0
}
    9212:	4010      	ands	r0, r2
    9214:	4770      	bx	lr
    9216:	bf00      	nop
    9218:	e000e100 	.word	0xe000e100

0000921c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    921c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    921e:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
    9220:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9224:	bfac      	ite	ge
    9226:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    922a:	4b06      	ldrlt	r3, [pc, #24]	; (9244 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    922c:	ea4f 1141 	mov.w	r1, r1, lsl #5
    9230:	b2c9      	uxtb	r1, r1
    9232:	bfab      	itete	ge
    9234:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9238:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    923c:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9240:	5419      	strblt	r1, [r3, r0]
}
    9242:	4770      	bx	lr
    9244:	e000ed14 	.word	0xe000ed14

00009248 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    9248:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    924a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    924c:	4b04      	ldr	r3, [pc, #16]	; (9260 <_arch_isr_direct_pm+0x18>)
    924e:	699a      	ldr	r2, [r3, #24]
    9250:	b11a      	cbz	r2, 925a <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    9252:	2200      	movs	r2, #0
    9254:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    9256:	f006 fa34 	bl	f6c2 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    925a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    925c:	bd08      	pop	{r3, pc}
    925e:	bf00      	nop
    9260:	2000ce54 	.word	0x2000ce54

00009264 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    9264:	bf30      	wfi
    b z_SysNmiOnReset
    9266:	f7ff bffd 	b.w	9264 <z_SysNmiOnReset>
    926a:	bf00      	nop

0000926c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    926c:	4a0b      	ldr	r2, [pc, #44]	; (929c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    926e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    9270:	4b0b      	ldr	r3, [pc, #44]	; (92a0 <z_arm_prep_c+0x34>)
    9272:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    9276:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    9278:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    927c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    9280:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    9284:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    9288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    928c:	f003 fe88 	bl	cfa0 <z_bss_zero>
	z_data_copy();
    9290:	f004 fc84 	bl	db9c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    9294:	f000 f9be 	bl	9614 <z_arm_interrupt_init>
	z_cstart();
    9298:	f003 fec2 	bl	d020 <z_cstart>
    929c:	00008000 	.word	0x00008000
    92a0:	e000ed00 	.word	0xe000ed00

000092a4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    92a4:	4a09      	ldr	r2, [pc, #36]	; (92cc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    92a6:	490a      	ldr	r1, [pc, #40]	; (92d0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    92a8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    92aa:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    92ac:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    92ae:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    92b0:	4908      	ldr	r1, [pc, #32]	; (92d4 <arch_swap+0x30>)
    92b2:	684b      	ldr	r3, [r1, #4]
    92b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    92b8:	604b      	str	r3, [r1, #4]
    92ba:	2300      	movs	r3, #0
    92bc:	f383 8811 	msr	BASEPRI, r3
    92c0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    92c4:	6893      	ldr	r3, [r2, #8]
}
    92c6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    92c8:	4770      	bx	lr
    92ca:	bf00      	nop
    92cc:	2000ce54 	.word	0x2000ce54
    92d0:	000104d0 	.word	0x000104d0
    92d4:	e000ed00 	.word	0xe000ed00

000092d8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    92d8:	4915      	ldr	r1, [pc, #84]	; (9330 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    92da:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    92dc:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    92e0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    92e4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    92e6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    92ea:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    92ee:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    92f0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    92f4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    92f8:	4f0e      	ldr	r7, [pc, #56]	; (9334 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    92fa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    92fe:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    9300:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    9302:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    9304:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    9308:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    930a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    930c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    930e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    9312:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    9316:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    931a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    931e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    9322:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    9324:	f005 fd6b 	bl	edfe <configure_builtin_stack_guard>
    pop {r2, lr}
    9328:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    932c:	4770      	bx	lr
    932e:	0000      	.short	0x0000
    ldr r1, =_kernel
    9330:	2000ce54 	.word	0x2000ce54
    ldr v4, =_SCS_ICSR
    9334:	e000ed04 	.word	0xe000ed04

00009338 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    9338:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    933c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    933e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    9342:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    9346:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    9348:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    934c:	2902      	cmp	r1, #2
    beq _oops
    934e:	d0ff      	beq.n	9350 <_oops>

00009350 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    9350:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    9352:	f005 fd45 	bl	ede0 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    9356:	bd01      	pop	{r0, pc}

00009358 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    9358:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    935c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    935e:	490d      	ldr	r1, [pc, #52]	; (9394 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    9360:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    9364:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    9366:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    936a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    936e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    9370:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    9374:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    9378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    937c:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    9380:	2300      	movs	r3, #0
    9382:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    9384:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    9388:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    938a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    938c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    9390:	4770      	bx	lr
    9392:	bf00      	nop
    9394:	0000e9eb 	.word	0x0000e9eb

00009398 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    9398:	4b08      	ldr	r3, [pc, #32]	; (93bc <arch_switch_to_main_thread+0x24>)
    939a:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    939c:	6e83      	ldr	r3, [r0, #104]	; 0x68
    939e:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    93a2:	4610      	mov	r0, r2
    93a4:	f381 8809 	msr	PSP, r1
    93a8:	2100      	movs	r1, #0
    93aa:	b663      	cpsie	if
    93ac:	f381 8811 	msr	BASEPRI, r1
    93b0:	f3bf 8f6f 	isb	sy
    93b4:	2200      	movs	r2, #0
    93b6:	2300      	movs	r3, #0
    93b8:	f005 fb17 	bl	e9ea <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    93bc:	2000ce54 	.word	0x2000ce54

000093c0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    93c0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    93c2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    93c4:	4a0b      	ldr	r2, [pc, #44]	; (93f4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    93c6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    93c8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    93ca:	bf1e      	ittt	ne
	movne	r1, #0
    93cc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    93ce:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    93d0:	f006 f977 	blne	f6c2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    93d4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    93d6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    93da:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    93de:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    93e2:	4905      	ldr	r1, [pc, #20]	; (93f8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    93e4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    93e6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    93e8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    93ea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    93ee:	4903      	ldr	r1, [pc, #12]	; (93fc <_isr_wrapper+0x3c>)
	bx r1
    93f0:	4708      	bx	r1
    93f2:	0000      	.short	0x0000
	ldr r2, =_kernel
    93f4:	2000ce54 	.word	0x2000ce54
	ldr r1, =_sw_isr_table
    93f8:	0000feec 	.word	0x0000feec
	ldr r1, =z_arm_int_exit
    93fc:	00009401 	.word	0x00009401

00009400 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    9400:	4b04      	ldr	r3, [pc, #16]	; (9414 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    9402:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    9404:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    9406:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    9408:	d003      	beq.n	9412 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    940a:	4903      	ldr	r1, [pc, #12]	; (9418 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    940c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    9410:	600a      	str	r2, [r1, #0]

00009412 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    9412:	4770      	bx	lr
	ldr r3, =_kernel
    9414:	2000ce54 	.word	0x2000ce54
	ldr r1, =_SCS_ICSR
    9418:	e000ed04 	.word	0xe000ed04

0000941c <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    941c:	4b09      	ldr	r3, [pc, #36]	; (9444 <usage_fault.constprop.0+0x28>)
    941e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    9420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    9422:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    9424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    9426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    9428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    942a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    942c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    942e:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    9432:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    9436:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
    943a:	bf18      	it	ne
    943c:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    943e:	629a      	str	r2, [r3, #40]	; 0x28
}
    9440:	4770      	bx	lr
    9442:	bf00      	nop
    9444:	e000ed00 	.word	0xe000ed00

00009448 <bus_fault.constprop.0>:
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    9448:	4b0d      	ldr	r3, [pc, #52]	; (9480 <bus_fault.constprop.0+0x38>)
    944a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    944c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    944e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9450:	0592      	lsls	r2, r2, #22
    9452:	d508      	bpl.n	9466 <bus_fault.constprop.0+0x1e>
		STORE_xFAR(bfar, SCB->BFAR);
    9454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    9456:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9458:	0412      	lsls	r2, r2, #16
    945a:	d504      	bpl.n	9466 <bus_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
    945c:	b118      	cbz	r0, 9466 <bus_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    945e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9460:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    9464:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    9466:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    9468:	4b05      	ldr	r3, [pc, #20]	; (9480 <bus_fault.constprop.0+0x38>)
    946a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    946c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    946e:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    9470:	bf58      	it	pl
    9472:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    9474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9476:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    947a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    947c:	7008      	strb	r0, [r1, #0]
}
    947e:	4770      	bx	lr
    9480:	e000ed00 	.word	0xe000ed00

00009484 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    9484:	4b12      	ldr	r3, [pc, #72]	; (94d0 <mem_manage_fault.constprop.0+0x4c>)
    9486:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    9488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    948a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    948c:	0792      	lsls	r2, r2, #30
    948e:	d508      	bpl.n	94a2 <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
    9490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    9492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9494:	0612      	lsls	r2, r2, #24
    9496:	d504      	bpl.n	94a2 <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
    9498:	b118      	cbz	r0, 94a2 <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    949a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    949c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    94a0:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    94a2:	4b0b      	ldr	r3, [pc, #44]	; (94d0 <mem_manage_fault.constprop.0+0x4c>)
    94a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    94a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    94a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    94aa:	06d0      	lsls	r0, r2, #27
	*recoverable = memory_fault_recoverable(esf, true);
    94ac:	f04f 0000 	mov.w	r0, #0
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    94b0:	bf58      	it	pl
    94b2:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    94b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    94b6:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    94b8:	bf42      	ittt	mi
    94ba:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    94bc:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    94c0:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    94c2:	4a03      	ldr	r2, [pc, #12]	; (94d0 <mem_manage_fault.constprop.0+0x4c>)
    94c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    94c6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    94ca:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    94cc:	7008      	strb	r0, [r1, #0]
}
    94ce:	4770      	bx	lr
    94d0:	e000ed00 	.word	0xe000ed00

000094d4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    94d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    94d6:	4b43      	ldr	r3, [pc, #268]	; (95e4 <z_arm_fault+0x110>)
{
    94d8:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    94da:	685b      	ldr	r3, [r3, #4]
    94dc:	2500      	movs	r5, #0
{
    94de:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    94e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    94e4:	f385 8811 	msr	BASEPRI, r5
    94e8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    94ec:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    94f0:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    94f4:	d116      	bne.n	9524 <z_arm_fault+0x50>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    94f6:	07d6      	lsls	r6, r2, #31
    94f8:	d414      	bmi.n	9524 <z_arm_fault+0x50>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    94fa:	0650      	lsls	r0, r2, #25
    94fc:	d403      	bmi.n	9506 <z_arm_fault+0x32>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    94fe:	0712      	lsls	r2, r2, #28
    9500:	d404      	bmi.n	950c <z_arm_fault+0x38>
			*nested_exc = true;
    9502:	2501      	movs	r5, #1
    9504:	e004      	b.n	9510 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    9506:	f012 0504 	ands.w	r5, r2, #4
    950a:	d001      	beq.n	9510 <z_arm_fault+0x3c>
			ptr_esf = (z_arch_esf_t *)psp;
    950c:	460c      	mov	r4, r1
	*nested_exc = false;
    950e:	2500      	movs	r5, #0
	*recoverable = false;
    9510:	2200      	movs	r2, #0
	switch (fault) {
    9512:	3b03      	subs	r3, #3
	*recoverable = false;
    9514:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    9518:	2b03      	cmp	r3, #3
    951a:	d85b      	bhi.n	95d4 <z_arm_fault+0x100>
    951c:	e8df f003 	tbb	[pc, r3]
    9520:	4f565204 	.word	0x4f565204
		return NULL;
    9524:	462c      	mov	r4, r5
    9526:	e7f3      	b.n	9510 <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    9528:	4a2e      	ldr	r2, [pc, #184]	; (95e4 <z_arm_fault+0x110>)
    952a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    952c:	f013 0302 	ands.w	r3, r3, #2
    9530:	d150      	bne.n	95d4 <z_arm_fault+0x100>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    9532:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    9534:	2900      	cmp	r1, #0
    9536:	db0b      	blt.n	9550 <z_arm_fault+0x7c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    9538:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    953a:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    953e:	d007      	beq.n	9550 <z_arm_fault+0x7c>
	uint16_t fault_insn = *(ret_addr - 1);
    9540:	69a3      	ldr	r3, [r4, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    9542:	f833 1c02 	ldrh.w	r1, [r3, #-2]
    9546:	f64d 7302 	movw	r3, #57090	; 0xdf02
    954a:	4299      	cmp	r1, r3
    954c:	d11e      	bne.n	958c <z_arm_fault+0xb8>
			reason = esf->basic.r0;
    954e:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    9550:	f89d 2007 	ldrb.w	r2, [sp, #7]
    9554:	b9c2      	cbnz	r2, 9588 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    9556:	ae02      	add	r6, sp, #8
    9558:	f104 0720 	add.w	r7, r4, #32
    955c:	4632      	mov	r2, r6
    955e:	6820      	ldr	r0, [r4, #0]
    9560:	6861      	ldr	r1, [r4, #4]
    9562:	3408      	adds	r4, #8
    9564:	c203      	stmia	r2!, {r0, r1}
    9566:	42bc      	cmp	r4, r7
    9568:	4616      	mov	r6, r2
    956a:	d1f7      	bne.n	955c <z_arm_fault+0x88>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    956c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    956e:	b39d      	cbz	r5, 95d8 <z_arm_fault+0x104>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    9570:	f3c2 0108 	ubfx	r1, r2, #0, #9
    9574:	b921      	cbnz	r1, 9580 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    9576:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    957a:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    957e:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    9580:	4618      	mov	r0, r3
    9582:	a902      	add	r1, sp, #8
    9584:	f005 fc2a 	bl	eddc <z_arm_fatal_error>
}
    9588:	b00b      	add	sp, #44	; 0x2c
    958a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    958c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    958e:	b2db      	uxtb	r3, r3
    9590:	b133      	cbz	r3, 95a0 <z_arm_fault+0xcc>
			reason = mem_manage_fault(esf, 1, recoverable);
    9592:	2001      	movs	r0, #1
    9594:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    9598:	f7ff ff74 	bl	9484 <mem_manage_fault.constprop.0>
    959c:	4603      	mov	r3, r0
		break;
    959e:	e7d7      	b.n	9550 <z_arm_fault+0x7c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    95a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    95a2:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    95a6:	d005      	beq.n	95b4 <z_arm_fault+0xe0>
			reason = bus_fault(esf, 1, recoverable);
    95a8:	2001      	movs	r0, #1
    95aa:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    95ae:	f7ff ff4b 	bl	9448 <bus_fault.constprop.0>
    95b2:	e7f3      	b.n	959c <z_arm_fault+0xc8>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    95b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    95b6:	0c1b      	lsrs	r3, r3, #16
    95b8:	041b      	lsls	r3, r3, #16
    95ba:	2b00      	cmp	r3, #0
    95bc:	d0c8      	beq.n	9550 <z_arm_fault+0x7c>
		reason = usage_fault(esf);
    95be:	f7ff ff2d 	bl	941c <usage_fault.constprop.0>
    95c2:	e7eb      	b.n	959c <z_arm_fault+0xc8>
		reason = mem_manage_fault(esf, 0, recoverable);
    95c4:	2000      	movs	r0, #0
    95c6:	f10d 0107 	add.w	r1, sp, #7
    95ca:	e7e5      	b.n	9598 <z_arm_fault+0xc4>
		reason = bus_fault(esf, 0, recoverable);
    95cc:	2000      	movs	r0, #0
    95ce:	f10d 0107 	add.w	r1, sp, #7
    95d2:	e7ec      	b.n	95ae <z_arm_fault+0xda>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    95d4:	2300      	movs	r3, #0
    95d6:	e7bb      	b.n	9550 <z_arm_fault+0x7c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    95d8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    95dc:	f022 0201 	bic.w	r2, r2, #1
    95e0:	e7cd      	b.n	957e <z_arm_fault+0xaa>
    95e2:	bf00      	nop
    95e4:	e000ed00 	.word	0xe000ed00

000095e8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    95e8:	4b04      	ldr	r3, [pc, #16]	; (95fc <z_arm_fault_init+0x14>)
    95ea:	695a      	ldr	r2, [r3, #20]
    95ec:	f042 0210 	orr.w	r2, r2, #16
    95f0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    95f2:	695a      	ldr	r2, [r3, #20]
    95f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    95f8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    95fa:	4770      	bx	lr
    95fc:	e000ed00 	.word	0xe000ed00

00009600 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    9600:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    9604:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    9608:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    960a:	4672      	mov	r2, lr
	bl z_arm_fault
    960c:	f7ff ff62 	bl	94d4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    9610:	bd01      	pop	{r0, pc}
    9612:	bf00      	nop

00009614 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    9614:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9616:	2120      	movs	r1, #32
    9618:	4803      	ldr	r0, [pc, #12]	; (9628 <z_arm_interrupt_init+0x14>)
    961a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    961c:	3301      	adds	r3, #1
    961e:	2b41      	cmp	r3, #65	; 0x41
    9620:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    9624:	d1f9      	bne.n	961a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    9626:	4770      	bx	lr
    9628:	e000e100 	.word	0xe000e100

0000962c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    962c:	2000      	movs	r0, #0
    msr CONTROL, r0
    962e:	f380 8814 	msr	CONTROL, r0
    isb
    9632:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    9636:	2000      	movs	r0, #0
    msr MSPLIM, r0
    9638:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    963c:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    9640:	f7ff fc6e 	bl	8f20 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    9644:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    9646:	490e      	ldr	r1, [pc, #56]	; (9680 <__start+0x54>)
    str r0, [r1]
    9648:	6008      	str	r0, [r1, #0]
    dsb
    964a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    964e:	480d      	ldr	r0, [pc, #52]	; (9684 <__start+0x58>)
    msr msp, r0
    9650:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    9654:	f000 f83e 	bl	96d4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    9658:	2020      	movs	r0, #32
    msr BASEPRI, r0
    965a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    965e:	480a      	ldr	r0, [pc, #40]	; (9688 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    9660:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    9664:	1840      	adds	r0, r0, r1
    msr PSP, r0
    9666:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    966a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    966e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    9670:	4308      	orrs	r0, r1
    msr CONTROL, r0
    9672:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    9676:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    967a:	f7ff fdf7 	bl	926c <z_arm_prep_c>
    967e:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    9680:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    9684:	2000e2c8 	.word	0x2000e2c8
    ldr r0, =z_interrupt_stacks
    9688:	2000e408 	.word	0x2000e408

0000968c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    968c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    9690:	4905      	ldr	r1, [pc, #20]	; (96a8 <sys_arch_reboot+0x1c>)
    9692:	4b06      	ldr	r3, [pc, #24]	; (96ac <sys_arch_reboot+0x20>)
    9694:	68ca      	ldr	r2, [r1, #12]
    9696:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    969a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    969c:	60cb      	str	r3, [r1, #12]
    969e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    96a2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    96a4:	e7fd      	b.n	96a2 <sys_arch_reboot+0x16>
    96a6:	bf00      	nop
    96a8:	e000ed00 	.word	0xe000ed00
    96ac:	05fa0004 	.word	0x05fa0004

000096b0 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    96b0:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    96b2:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    96b4:	4906      	ldr	r1, [pc, #24]	; (96d0 <z_arm_clear_arm_mpu_config+0x20>)
    96b6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    96ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    96be:	4293      	cmp	r3, r2
    96c0:	d100      	bne.n	96c4 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    96c2:	4770      	bx	lr
  mpu->RNR = rnr;
    96c4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    96c8:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    96cc:	3301      	adds	r3, #1
    96ce:	e7f6      	b.n	96be <z_arm_clear_arm_mpu_config+0xe>
    96d0:	e000ed00 	.word	0xe000ed00

000096d4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    96d4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    96d6:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    96d8:	2400      	movs	r4, #0
    96da:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    96de:	f7ff ffe7 	bl	96b0 <z_arm_clear_arm_mpu_config>
    96e2:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    96e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    96e8:	4a0b      	ldr	r2, [pc, #44]	; (9718 <z_arm_init_arch_hw_at_boot+0x44>)
    96ea:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    96ee:	3301      	adds	r3, #1
    96f0:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    96f2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    96f6:	d1f8      	bne.n	96ea <z_arm_init_arch_hw_at_boot+0x16>
    96f8:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    96fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    96fe:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    9702:	3301      	adds	r3, #1
    9704:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    9706:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    970a:	d1f8      	bne.n	96fe <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    970c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    970e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9712:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    9716:	bd10      	pop	{r4, pc}
    9718:	e000e100 	.word	0xe000e100

0000971c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    971c:	4b08      	ldr	r3, [pc, #32]	; (9740 <z_impl_k_thread_abort+0x24>)
    971e:	689b      	ldr	r3, [r3, #8]
    9720:	4283      	cmp	r3, r0
    9722:	d10b      	bne.n	973c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9724:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    9728:	b143      	cbz	r3, 973c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    972a:	4b06      	ldr	r3, [pc, #24]	; (9744 <z_impl_k_thread_abort+0x28>)
    972c:	685a      	ldr	r2, [r3, #4]
    972e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    9732:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    9734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9736:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    973a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    973c:	f004 b9bc 	b.w	dab8 <z_thread_abort>
    9740:	2000ce54 	.word	0x2000ce54
    9744:	e000ed00 	.word	0xe000ed00

00009748 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    9748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    974a:	4c09      	ldr	r4, [pc, #36]	; (9770 <z_arm_configure_static_mpu_regions+0x28>)
    974c:	4a09      	ldr	r2, [pc, #36]	; (9774 <z_arm_configure_static_mpu_regions+0x2c>)
    974e:	4623      	mov	r3, r4
    9750:	2101      	movs	r1, #1
    9752:	4809      	ldr	r0, [pc, #36]	; (9778 <z_arm_configure_static_mpu_regions+0x30>)
    9754:	f000 f8f2 	bl	993c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    9758:	2300      	movs	r3, #0
    975a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    975c:	4b07      	ldr	r3, [pc, #28]	; (977c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    975e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    9760:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    9762:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    9764:	9301      	str	r3, [sp, #4]
    9766:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    9768:	f000 f8f2 	bl	9950 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    976c:	b004      	add	sp, #16
    976e:	bd10      	pop	{r4, pc}
    9770:	20040000 	.word	0x20040000
    9774:	2000c500 	.word	0x2000c500
    9778:	00010154 	.word	0x00010154
    977c:	2000c6c8 	.word	0x2000c6c8

00009780 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    9780:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    9782:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    9784:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    9786:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    978a:	f004 031f 	and.w	r3, r4, #31
    978e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    9790:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    9792:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    9794:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    9798:	4905      	ldr	r1, [pc, #20]	; (97b0 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    979a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    979e:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    97a2:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    97a6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    97aa:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    97ae:	bd10      	pop	{r4, pc}
    97b0:	e000ed00 	.word	0xe000ed00

000097b4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    97b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97b8:	460f      	mov	r7, r1
    97ba:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    97bc:	4606      	mov	r6, r0
    97be:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    97c2:	4d52      	ldr	r5, [pc, #328]	; (990c <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    97c4:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    97c6:	45b8      	cmp	r8, r7
    97c8:	da09      	bge.n	97de <mpu_configure_regions_and_partition.constprop.0+0x2a>
		if (regions[i].size == 0U) {
    97ca:	f8d6 9004 	ldr.w	r9, [r6, #4]
    97ce:	f1b9 0f00 	cmp.w	r9, #0
    97d2:	d03a      	beq.n	984a <mpu_configure_regions_and_partition.constprop.0+0x96>
		&&
    97d4:	f1b9 0f1f 	cmp.w	r9, #31
    97d8:	d805      	bhi.n	97e6 <mpu_configure_regions_and_partition.constprop.0+0x32>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    97da:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    97de:	4620      	mov	r0, r4
    97e0:	b005      	add	sp, #20
    97e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    97e6:	f019 0f1f 	tst.w	r9, #31
    97ea:	d1f6      	bne.n	97da <mpu_configure_regions_and_partition.constprop.0+0x26>
		((part->start &
    97ec:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    97f0:	f01a 0f1f 	tst.w	sl, #31
    97f4:	d1f1      	bne.n	97da <mpu_configure_regions_and_partition.constprop.0+0x26>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    97f6:	4650      	mov	r0, sl
    97f8:	f005 fb07 	bl	ee0a <arm_cmse_mpu_region_get>
    97fc:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    97fe:	eb09 000a 	add.w	r0, r9, sl
    9802:	3801      	subs	r0, #1
    9804:	f005 fb01 	bl	ee0a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    9808:	4583      	cmp	fp, r0
    980a:	d1e6      	bne.n	97da <mpu_configure_regions_and_partition.constprop.0+0x26>
		if ((u_reg_index == -EINVAL) ||
    980c:	f11b 0f16 	cmn.w	fp, #22
    9810:	d0e3      	beq.n	97da <mpu_configure_regions_and_partition.constprop.0+0x26>
    9812:	455c      	cmp	r4, fp
    9814:	dde1      	ble.n	97da <mpu_configure_regions_and_partition.constprop.0+0x26>
	MPU->RNR = rnr;
    9816:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    981a:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    981e:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    9822:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    9826:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    982a:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    982e:	e9d6 3200 	ldrd	r3, r2, [r6]
    9832:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    9834:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    9836:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    983a:	d11e      	bne.n	987a <mpu_configure_regions_and_partition.constprop.0+0xc6>
    983c:	45ca      	cmp	sl, r9
    983e:	d108      	bne.n	9852 <mpu_configure_regions_and_partition.constprop.0+0x9e>
			mpu_configure_region(u_reg_index, &regions[i]);
    9840:	4631      	mov	r1, r6
    9842:	fa5f f08b 	uxtb.w	r0, fp
    9846:	f005 fae9 	bl	ee1c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    984a:	f108 0801 	add.w	r8, r8, #1
    984e:	360c      	adds	r6, #12
    9850:	e7b9      	b.n	97c6 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    9852:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    9854:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    9858:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    985c:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    9860:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    9864:	431a      	orrs	r2, r3
	MPU->RBAR = rbar;
    9866:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    986a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    986c:	f005 fad6 	bl	ee1c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    9870:	f110 0f16 	cmn.w	r0, #22
    9874:	d0b1      	beq.n	97da <mpu_configure_regions_and_partition.constprop.0+0x26>
			reg_index++;
    9876:	1c44      	adds	r4, r0, #1
    9878:	e7e7      	b.n	984a <mpu_configure_regions_and_partition.constprop.0+0x96>
				regions[i].start - 1);
    987a:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    987c:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
    987e:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
    9880:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    9884:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    9888:	d108      	bne.n	989c <mpu_configure_regions_and_partition.constprop.0+0xe8>
	return MPU->RLAR;
    988a:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    988e:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    9890:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    9894:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    9896:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    989a:	e7e7      	b.n	986c <mpu_configure_regions_and_partition.constprop.0+0xb8>
	return MPU->RLAR;
    989c:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    98a0:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    98a4:	430b      	orrs	r3, r1
	MPU->RLAR = rlar;
    98a6:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    98aa:	4631      	mov	r1, r6
    98ac:	f005 fab6 	bl	ee1c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    98b0:	f110 0f16 	cmn.w	r0, #22
    98b4:	d091      	beq.n	97da <mpu_configure_regions_and_partition.constprop.0+0x26>
	MPU->RNR = rnr;
    98b6:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    98ba:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    98be:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    98c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = mpu_get_rbar() &
    98c6:	f362 0304 	bfi	r3, r2, #0, #5
    98ca:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
    98ce:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    98d2:	f89d 2008 	ldrb.w	r2, [sp, #8]
    98d6:	085b      	lsrs	r3, r3, #1
    98d8:	f363 1247 	bfi	r2, r3, #5, #3
    98dc:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    98e0:	e9d6 3200 	ldrd	r3, r2, [r6]
    98e4:	4413      	add	r3, r2
    98e6:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    98e8:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    98ec:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    98ee:	4453      	add	r3, sl
    98f0:	eba3 0309 	sub.w	r3, r3, r9
    98f4:	b2c8      	uxtb	r0, r1
    98f6:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    98fa:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    98fc:	9303      	str	r3, [sp, #12]
    98fe:	f63f af6c 	bhi.w	97da <mpu_configure_regions_and_partition.constprop.0+0x26>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    9902:	4669      	mov	r1, sp
    9904:	f7ff ff3c 	bl	9780 <region_init>
    9908:	e7b5      	b.n	9876 <mpu_configure_regions_and_partition.constprop.0+0xc2>
    990a:	bf00      	nop
    990c:	e000ed00 	.word	0xe000ed00

00009910 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    9910:	2205      	movs	r2, #5
    9912:	4b04      	ldr	r3, [pc, #16]	; (9924 <arm_core_mpu_enable+0x14>)
    9914:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    9918:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    991c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    9920:	4770      	bx	lr
    9922:	bf00      	nop
    9924:	e000ed00 	.word	0xe000ed00

00009928 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    9928:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    992c:	2200      	movs	r2, #0
    992e:	4b02      	ldr	r3, [pc, #8]	; (9938 <arm_core_mpu_disable+0x10>)
    9930:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    9934:	4770      	bx	lr
    9936:	bf00      	nop
    9938:	e000ed00 	.word	0xe000ed00

0000993c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    993c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    993e:	4c03      	ldr	r4, [pc, #12]	; (994c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    9940:	7822      	ldrb	r2, [r4, #0]
    9942:	f7ff ff37 	bl	97b4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    9946:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    9948:	bd10      	pop	{r4, pc}
    994a:	bf00      	nop
    994c:	2000cea8 	.word	0x2000cea8

00009950 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    9950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9954:	4d29      	ldr	r5, [pc, #164]	; (99fc <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    9956:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    9958:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    995a:	f04f 0800 	mov.w	r8, #0
    995e:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    9960:	4f27      	ldr	r7, [pc, #156]	; (9a00 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    9962:	45d0      	cmp	r8, sl
    9964:	da1b      	bge.n	999e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    9966:	f8d6 9004 	ldr.w	r9, [r6, #4]
    996a:	f1b9 0f00 	cmp.w	r9, #0
    996e:	d03f      	beq.n	99f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    9970:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    9972:	4608      	mov	r0, r1
    9974:	9101      	str	r1, [sp, #4]
    9976:	f005 fa48 	bl	ee0a <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    997a:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    997c:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    997e:	eb09 0001 	add.w	r0, r9, r1
    9982:	3801      	subs	r0, #1
    9984:	f005 fa41 	bl	ee0a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    9988:	4284      	cmp	r4, r0
    998a:	f04f 0214 	mov.w	r2, #20
    998e:	4b1d      	ldr	r3, [pc, #116]	; (9a04 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    9990:	d008      	beq.n	99a4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    9992:	f06f 0315 	mvn.w	r3, #21
    9996:	fb02 f808 	mul.w	r8, r2, r8
    999a:	f84b 3008 	str.w	r3, [fp, r8]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    999e:	b003      	add	sp, #12
    99a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    99a4:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    99a8:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    99aa:	d0f8      	beq.n	999e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    99ac:	7819      	ldrb	r1, [r3, #0]
    99ae:	42a1      	cmp	r1, r4
    99b0:	ddf5      	ble.n	999e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    99b2:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    99b6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    99ba:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    99be:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    99c2:	f100 0108 	add.w	r1, r0, #8
    99c6:	7b00      	ldrb	r0, [r0, #12]
    99c8:	f364 0004 	bfi	r0, r4, #0, #5
    99cc:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    99ce:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    99d2:	790c      	ldrb	r4, [r1, #4]
    99d4:	0840      	lsrs	r0, r0, #1
    99d6:	f360 1447 	bfi	r4, r0, #5, #3
    99da:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    99dc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    99e0:	f021 011f 	bic.w	r1, r1, #31
    99e4:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    99e6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    99ea:	f021 011f 	bic.w	r1, r1, #31
    99ee:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    99f0:	f108 0801 	add.w	r8, r8, #1
    99f4:	3514      	adds	r5, #20
    99f6:	360c      	adds	r6, #12
    99f8:	e7b3      	b.n	9962 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    99fa:	bf00      	nop
    99fc:	2000c8e8 	.word	0x2000c8e8
    9a00:	e000ed00 	.word	0xe000ed00
    9a04:	2000cea8 	.word	0x2000cea8

00009a08 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    9a08:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    9a0a:	4d0e      	ldr	r5, [pc, #56]	; (9a44 <z_arm_mpu_init+0x3c>)
    9a0c:	682c      	ldr	r4, [r5, #0]
    9a0e:	2c10      	cmp	r4, #16
    9a10:	d815      	bhi.n	9a3e <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    9a12:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    9a14:	f7ff ff88 	bl	9928 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    9a18:	4b0b      	ldr	r3, [pc, #44]	; (9a48 <z_arm_mpu_init+0x40>)
    9a1a:	4a0c      	ldr	r2, [pc, #48]	; (9a4c <z_arm_mpu_init+0x44>)
    9a1c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    9a20:	4284      	cmp	r4, r0
    9a22:	d105      	bne.n	9a30 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    9a24:	4b0a      	ldr	r3, [pc, #40]	; (9a50 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    9a26:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    9a28:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    9a2a:	f7ff ff71 	bl	9910 <arm_core_mpu_enable>
}
    9a2e:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    9a30:	6869      	ldr	r1, [r5, #4]
    9a32:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    9a36:	f7ff fea3 	bl	9780 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    9a3a:	3001      	adds	r0, #1
    9a3c:	e7f0      	b.n	9a20 <z_arm_mpu_init+0x18>
		return -1;
    9a3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9a42:	e7f4      	b.n	9a2e <z_arm_mpu_init+0x26>
    9a44:	00010160 	.word	0x00010160
    9a48:	e000ed00 	.word	0xe000ed00
    9a4c:	0044ffaa 	.word	0x0044ffaa
    9a50:	2000cea8 	.word	0x2000cea8

00009a54 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    9a54:	4b01      	ldr	r3, [pc, #4]	; (9a5c <__stdout_hook_install+0x8>)
    9a56:	6018      	str	r0, [r3, #0]
}
    9a58:	4770      	bx	lr
    9a5a:	bf00      	nop
    9a5c:	2000c508 	.word	0x2000c508

00009a60 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    9a60:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    9a62:	4c07      	ldr	r4, [pc, #28]	; (9a80 <_sbrk+0x20>)
    9a64:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    9a66:	18c2      	adds	r2, r0, r3
    9a68:	4806      	ldr	r0, [pc, #24]	; (9a84 <_sbrk+0x24>)
    9a6a:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    9a6e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    9a72:	428a      	cmp	r2, r1

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    9a74:	bf2e      	itee	cs
    9a76:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
    9a7a:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    9a7c:	6022      	strcc	r2, [r4, #0]
	}

	return ret;
}
    9a7e:	bd10      	pop	{r4, pc}
    9a80:	2000c8fc 	.word	0x2000c8fc
    9a84:	2000f208 	.word	0x2000f208

00009a88 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    9a88:	4b08      	ldr	r3, [pc, #32]	; (9aac <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    9a8a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    9a8c:	1ac3      	subs	r3, r0, r3
{
    9a8e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    9a90:	4907      	ldr	r1, [pc, #28]	; (9ab0 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    9a92:	109b      	asrs	r3, r3, #2
{
    9a94:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    9a96:	4359      	muls	r1, r3
    9a98:	2240      	movs	r2, #64	; 0x40
    9a9a:	4806      	ldr	r0, [pc, #24]	; (9ab4 <onoff_stop+0x2c>)
    9a9c:	f005 fa06 	bl	eeac <stop>
	notify(mgr, res);
    9aa0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    9aa2:	4601      	mov	r1, r0
	notify(mgr, res);
    9aa4:	4620      	mov	r0, r4
}
    9aa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    9aaa:	4718      	bx	r3
    9aac:	2000c910 	.word	0x2000c910
    9ab0:	b6db6db7 	.word	0xb6db6db7
    9ab4:	0000fe74 	.word	0x0000fe74

00009ab8 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9ab8:	2340      	movs	r3, #64	; 0x40
{
    9aba:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    9abc:	4c0b      	ldr	r4, [pc, #44]	; (9aec <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9abe:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    9ac0:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9ac2:	460b      	mov	r3, r1
{
    9ac4:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9ac6:	490a      	ldr	r1, [pc, #40]	; (9af0 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    9ac8:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9aca:	4361      	muls	r1, r4
{
    9acc:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9ace:	4a09      	ldr	r2, [pc, #36]	; (9af4 <onoff_start+0x3c>)
    9ad0:	4809      	ldr	r0, [pc, #36]	; (9af8 <onoff_start+0x40>)
    9ad2:	f005 fa17 	bl	ef04 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    9ad6:	1e01      	subs	r1, r0, #0
    9ad8:	da05      	bge.n	9ae6 <onoff_start+0x2e>
		notify(mgr, err);
    9ada:	4630      	mov	r0, r6
    9adc:	462b      	mov	r3, r5
	}
}
    9ade:	b002      	add	sp, #8
    9ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    9ae4:	4718      	bx	r3
}
    9ae6:	b002      	add	sp, #8
    9ae8:	bd70      	pop	{r4, r5, r6, pc}
    9aea:	bf00      	nop
    9aec:	2000c910 	.word	0x2000c910
    9af0:	b6db6db7 	.word	0xb6db6db7
    9af4:	0000ef75 	.word	0x0000ef75
    9af8:	0000fe74 	.word	0x0000fe74

00009afc <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    9afc:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    9afe:	2200      	movs	r2, #0
    9b00:	2101      	movs	r1, #1
{
    9b02:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    9b04:	2005      	movs	r0, #5
    9b06:	f7ff fb89 	bl	921c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    9b0a:	480f      	ldr	r0, [pc, #60]	; (9b48 <clk_init+0x4c>)
    9b0c:	f001 fb92 	bl	b234 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    9b10:	4b0e      	ldr	r3, [pc, #56]	; (9b4c <clk_init+0x50>)
    9b12:	4298      	cmp	r0, r3
    9b14:	d115      	bne.n	9b42 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    9b16:	f001 fb9d 	bl	b254 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    9b1a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    9b1c:	490c      	ldr	r1, [pc, #48]	; (9b50 <clk_init+0x54>)
    9b1e:	4630      	mov	r0, r6
    9b20:	f004 ff07 	bl	e932 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    9b24:	2800      	cmp	r0, #0
    9b26:	db0b      	blt.n	9b40 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    9b28:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
    9b2a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    9b2c:	4908      	ldr	r1, [pc, #32]	; (9b50 <clk_init+0x54>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    9b2e:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    9b30:	f104 001c 	add.w	r0, r4, #28
    9b34:	f004 fefd 	bl	e932 <onoff_manager_init>
		if (err < 0) {
    9b38:	2800      	cmp	r0, #0
    9b3a:	db01      	blt.n	9b40 <clk_init+0x44>
	}

	return 0;
    9b3c:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    9b3e:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    9b40:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    9b42:	f06f 0004 	mvn.w	r0, #4
    9b46:	e7fb      	b.n	9b40 <clk_init+0x44>
    9b48:	00009b89 	.word	0x00009b89
    9b4c:	0bad0000 	.word	0x0bad0000
    9b50:	000101b4 	.word	0x000101b4

00009b54 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    9b54:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    9b56:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    9b58:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    9b5a:	434b      	muls	r3, r1
    9b5c:	4808      	ldr	r0, [pc, #32]	; (9b80 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    9b5e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    9b60:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    9b62:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    9b64:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    9b68:	4418      	add	r0, r3
	sub_data->cb = NULL;
    9b6a:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    9b6c:	f005 f98b 	bl	ee86 <set_on_state>
	if (callback) {
    9b70:	b12d      	cbz	r5, 9b7e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    9b72:	4632      	mov	r2, r6
    9b74:	462b      	mov	r3, r5
}
    9b76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    9b7a:	4802      	ldr	r0, [pc, #8]	; (9b84 <clkstarted_handle.constprop.0+0x30>)
    9b7c:	4718      	bx	r3
}
    9b7e:	bd70      	pop	{r4, r5, r6, pc}
    9b80:	2000c910 	.word	0x2000c910
    9b84:	0000fe74 	.word	0x0000fe74

00009b88 <clock_event_handler>:
	switch (event) {
    9b88:	b110      	cbz	r0, 9b90 <clock_event_handler+0x8>
    9b8a:	2801      	cmp	r0, #1
    9b8c:	d004      	beq.n	9b98 <clock_event_handler+0x10>
    9b8e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    9b90:	4b03      	ldr	r3, [pc, #12]	; (9ba0 <clock_event_handler+0x18>)
    9b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9b94:	075b      	lsls	r3, r3, #29
    9b96:	d101      	bne.n	9b9c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    9b98:	f7ff bfdc 	b.w	9b54 <clkstarted_handle.constprop.0>
}
    9b9c:	4770      	bx	lr
    9b9e:	bf00      	nop
    9ba0:	2000c910 	.word	0x2000c910

00009ba4 <generic_hfclk_start>:
{
    9ba4:	b508      	push	{r3, lr}
	__asm__ volatile(
    9ba6:	f04f 0320 	mov.w	r3, #32
    9baa:	f3ef 8111 	mrs	r1, BASEPRI
    9bae:	f383 8812 	msr	BASEPRI_MAX, r3
    9bb2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    9bb6:	4a11      	ldr	r2, [pc, #68]	; (9bfc <generic_hfclk_start+0x58>)
    9bb8:	6813      	ldr	r3, [r2, #0]
    9bba:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    9bbe:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    9bc2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    9bc4:	d00b      	beq.n	9bde <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    9bc6:	4a0e      	ldr	r2, [pc, #56]	; (9c00 <generic_hfclk_start+0x5c>)
    9bc8:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    9bcc:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    9bd0:	f013 0301 	ands.w	r3, r3, #1
    9bd4:	d003      	beq.n	9bde <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    9bd6:	480b      	ldr	r0, [pc, #44]	; (9c04 <generic_hfclk_start+0x60>)
    9bd8:	f005 f955 	bl	ee86 <set_on_state>
			already_started = true;
    9bdc:	2301      	movs	r3, #1
	__asm__ volatile(
    9bde:	f381 8811 	msr	BASEPRI, r1
    9be2:	f3bf 8f6f 	isb	sy
	if (already_started) {
    9be6:	b123      	cbz	r3, 9bf2 <generic_hfclk_start+0x4e>
}
    9be8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    9bec:	2000      	movs	r0, #0
    9bee:	f7ff bfb1 	b.w	9b54 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    9bf2:	2001      	movs	r0, #1
}
    9bf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9bf8:	f001 bb3c 	b.w	b274 <nrfx_clock_start>
    9bfc:	2000c960 	.word	0x2000c960
    9c00:	40005000 	.word	0x40005000
    9c04:	2000c950 	.word	0x2000c950

00009c08 <api_blocking_start>:
{
    9c08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    9c0a:	2200      	movs	r2, #0
    9c0c:	2301      	movs	r3, #1
    9c0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    9c12:	ab04      	add	r3, sp, #16
    9c14:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    9c18:	4a09      	ldr	r2, [pc, #36]	; (9c40 <api_blocking_start+0x38>)
    9c1a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    9c1c:	f8cd d000 	str.w	sp, [sp]
    9c20:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    9c24:	f005 f99f 	bl	ef66 <api_start>
	if (err < 0) {
    9c28:	2800      	cmp	r0, #0
    9c2a:	db05      	blt.n	9c38 <api_blocking_start+0x30>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    9c2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9c30:	2300      	movs	r3, #0
    9c32:	4668      	mov	r0, sp
    9c34:	f003 fc20 	bl	d478 <z_impl_k_sem_take>
}
    9c38:	b007      	add	sp, #28
    9c3a:	f85d fb04 	ldr.w	pc, [sp], #4
    9c3e:	bf00      	nop
    9c40:	0000ef93 	.word	0x0000ef93

00009c44 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9c44:	4b07      	ldr	r3, [pc, #28]	; (9c64 <generic_hfclk_stop+0x20>)
    9c46:	e8d3 2fef 	ldaex	r2, [r3]
    9c4a:	f022 0102 	bic.w	r1, r2, #2
    9c4e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    9c52:	2800      	cmp	r0, #0
    9c54:	d1f7      	bne.n	9c46 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    9c56:	07d3      	lsls	r3, r2, #31
    9c58:	d402      	bmi.n	9c60 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    9c5a:	2001      	movs	r0, #1
    9c5c:	f005 bbf5 	b.w	f44a <nrfx_clock_stop>
}
    9c60:	4770      	bx	lr
    9c62:	bf00      	nop
    9c64:	2000c960 	.word	0x2000c960

00009c68 <z_nrf_clock_control_lf_on>:
{
    9c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9c6c:	2201      	movs	r2, #1
    9c6e:	4607      	mov	r7, r0
    9c70:	4935      	ldr	r1, [pc, #212]	; (9d48 <z_nrf_clock_control_lf_on+0xe0>)
    9c72:	e8d1 3fef 	ldaex	r3, [r1]
    9c76:	e8c1 2fe0 	stlex	r0, r2, [r1]
    9c7a:	2800      	cmp	r0, #0
    9c7c:	d1f9      	bne.n	9c72 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    9c7e:	b933      	cbnz	r3, 9c8e <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    9c80:	4932      	ldr	r1, [pc, #200]	; (9d4c <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
    9c82:	4833      	ldr	r0, [pc, #204]	; (9d50 <z_nrf_clock_control_lf_on+0xe8>)
    9c84:	604b      	str	r3, [r1, #4]
    9c86:	60cb      	str	r3, [r1, #12]
    9c88:	608a      	str	r2, [r1, #8]
    9c8a:	f004 fe65 	bl	e958 <onoff_request>
	switch (start_mode) {
    9c8e:	1e7b      	subs	r3, r7, #1
    9c90:	2b01      	cmp	r3, #1
    9c92:	d82d      	bhi.n	9cf0 <z_nrf_clock_control_lf_on+0x88>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    9c94:	2f01      	cmp	r7, #1
    9c96:	d106      	bne.n	9ca6 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    9c98:	4b2e      	ldr	r3, [pc, #184]	; (9d54 <z_nrf_clock_control_lf_on+0xec>)
    9c9a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    9c9e:	f003 0303 	and.w	r3, r3, #3
    9ca2:	2b02      	cmp	r3, #2
    9ca4:	d024      	beq.n	9cf0 <z_nrf_clock_control_lf_on+0x88>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    9ca6:	f005 fd01 	bl	f6ac <k_is_in_isr>
    9caa:	4604      	mov	r4, r0
    9cac:	b918      	cbnz	r0, 9cb6 <z_nrf_clock_control_lf_on+0x4e>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    9cae:	4b2a      	ldr	r3, [pc, #168]	; (9d58 <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
    9cb0:	781b      	ldrb	r3, [r3, #0]
    9cb2:	2b00      	cmp	r3, #0
    9cb4:	d141      	bne.n	9d3a <z_nrf_clock_control_lf_on+0xd2>
	__asm__ volatile(
    9cb6:	f04f 0320 	mov.w	r3, #32
    9cba:	f3ef 8611 	mrs	r6, BASEPRI
    9cbe:	f383 8812 	msr	BASEPRI_MAX, r3
    9cc2:	f3bf 8f6f 	isb	sy
    9cc6:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9cc8:	4d22      	ldr	r5, [pc, #136]	; (9d54 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9cca:	f8df 8090 	ldr.w	r8, [pc, #144]	; 9d5c <z_nrf_clock_control_lf_on+0xf4>
    9cce:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9cd2:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    9cd6:	03d2      	lsls	r2, r2, #15
    9cd8:	d50c      	bpl.n	9cf4 <z_nrf_clock_control_lf_on+0x8c>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    9cda:	f003 0303 	and.w	r3, r3, #3
    9cde:	2b02      	cmp	r3, #2
    9ce0:	d001      	beq.n	9ce6 <z_nrf_clock_control_lf_on+0x7e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    9ce2:	2f01      	cmp	r7, #1
    9ce4:	d106      	bne.n	9cf4 <z_nrf_clock_control_lf_on+0x8c>
	if (isr_mode) {
    9ce6:	b324      	cbz	r4, 9d32 <z_nrf_clock_control_lf_on+0xca>
	__asm__ volatile(
    9ce8:	f386 8811 	msr	BASEPRI, r6
    9cec:	f3bf 8f6f 	isb	sy
}
    9cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    9cf4:	b1c4      	cbz	r4, 9d28 <z_nrf_clock_control_lf_on+0xc0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    9cf6:	4630      	mov	r0, r6
    9cf8:	f7ff fa54 	bl	91a4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    9cfc:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    9d00:	b2db      	uxtb	r3, r3
    9d02:	2b01      	cmp	r3, #1
    9d04:	d1e3      	bne.n	9cce <z_nrf_clock_control_lf_on+0x66>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9d06:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    9d0a:	2a00      	cmp	r2, #0
    9d0c:	d0df      	beq.n	9cce <z_nrf_clock_control_lf_on+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9d0e:	2200      	movs	r2, #0
    9d10:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    9d14:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    9d18:	2202      	movs	r2, #2
    9d1a:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    9d1e:	2220      	movs	r2, #32
    9d20:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9d24:	60ab      	str	r3, [r5, #8]
}
    9d26:	e7d2      	b.n	9cce <z_nrf_clock_control_lf_on+0x66>
	return z_impl_k_sleep(timeout);
    9d28:	2100      	movs	r1, #0
    9d2a:	2021      	movs	r0, #33	; 0x21
    9d2c:	f003 fea4 	bl	da78 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    9d30:	e7e4      	b.n	9cfc <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENSET = mask;
    9d32:	2302      	movs	r3, #2
    9d34:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
    9d38:	e7da      	b.n	9cf0 <z_nrf_clock_control_lf_on+0x88>
    p_reg->INTENCLR = mask;
    9d3a:	2202      	movs	r2, #2
    9d3c:	4b05      	ldr	r3, [pc, #20]	; (9d54 <z_nrf_clock_control_lf_on+0xec>)
	int key = isr_mode ? irq_lock() : 0;
    9d3e:	4606      	mov	r6, r0
    9d40:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    9d44:	e7c0      	b.n	9cc8 <z_nrf_clock_control_lf_on+0x60>
    9d46:	bf00      	nop
    9d48:	2000c964 	.word	0x2000c964
    9d4c:	2000c900 	.word	0x2000c900
    9d50:	2000c92c 	.word	0x2000c92c
    9d54:	40005000 	.word	0x40005000
    9d58:	2000d2c4 	.word	0x2000d2c4
    9d5c:	e000e100 	.word	0xe000e100

00009d60 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    9d60:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    9d62:	4808      	ldr	r0, [pc, #32]	; (9d84 <uart_console_init+0x24>)
    9d64:	4b08      	ldr	r3, [pc, #32]	; (9d88 <uart_console_init+0x28>)
    9d66:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    9d68:	f005 fc07 	bl	f57a <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    9d6c:	b138      	cbz	r0, 9d7e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    9d6e:	4807      	ldr	r0, [pc, #28]	; (9d8c <uart_console_init+0x2c>)
    9d70:	f7ff fe70 	bl	9a54 <__stdout_hook_install>
	__printk_hook_install(console_out);
    9d74:	4805      	ldr	r0, [pc, #20]	; (9d8c <uart_console_init+0x2c>)
    9d76:	f7fe fbc3 	bl	8500 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    9d7a:	2000      	movs	r0, #0
}
    9d7c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    9d7e:	f06f 0012 	mvn.w	r0, #18
    9d82:	e7fb      	b.n	9d7c <uart_console_init+0x1c>
    9d84:	0000febc 	.word	0x0000febc
    9d88:	2000c968 	.word	0x2000c968
    9d8c:	00009d91 	.word	0x00009d91

00009d90 <console_out>:
	if ('\n' == c) {
    9d90:	280a      	cmp	r0, #10
{
    9d92:	b538      	push	{r3, r4, r5, lr}
    9d94:	4604      	mov	r4, r0
    9d96:	4d07      	ldr	r5, [pc, #28]	; (9db4 <console_out+0x24>)
	if ('\n' == c) {
    9d98:	d104      	bne.n	9da4 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    9d9a:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    9d9c:	6883      	ldr	r3, [r0, #8]
    9d9e:	210d      	movs	r1, #13
    9da0:	685b      	ldr	r3, [r3, #4]
    9da2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    9da4:	6828      	ldr	r0, [r5, #0]
    9da6:	6883      	ldr	r3, [r0, #8]
    9da8:	b2e1      	uxtb	r1, r4
    9daa:	685b      	ldr	r3, [r3, #4]
    9dac:	4798      	blx	r3
}
    9dae:	4620      	mov	r0, r4
    9db0:	bd38      	pop	{r3, r4, r5, pc}
    9db2:	bf00      	nop
    9db4:	2000c968 	.word	0x2000c968

00009db8 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    9db8:	b530      	push	{r4, r5, lr}
	return port->config;
    9dba:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    9dbc:	f001 051f 	and.w	r5, r1, #31
    9dc0:	7b04      	ldrb	r4, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    9dc2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    9dc6:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    9dca:	b085      	sub	sp, #20
    9dcc:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    9dd0:	d105      	bne.n	9dde <gpio_nrfx_pin_interrupt_configure+0x26>
		nrfx_gpiote_trigger_disable(abs_pin);
    9dd2:	4628      	mov	r0, r5
    9dd4:	f001 fd0a 	bl	b7ec <nrfx_gpiote_trigger_disable>
		return -EINVAL;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    9dd8:	2000      	movs	r0, #0
}
    9dda:	b005      	add	sp, #20
    9ddc:	bd30      	pop	{r4, r5, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
    9dde:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    9de2:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    9de6:	d12e      	bne.n	9e46 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    9de8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    9dec:	bf0c      	ite	eq
    9dee:	2304      	moveq	r3, #4
    9df0:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    9df2:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    9df6:	6883      	ldr	r3, [r0, #8]
    9df8:	fa23 f101 	lsr.w	r1, r3, r1
    9dfc:	07c9      	lsls	r1, r1, #31
    9dfe:	d414      	bmi.n	9e2a <gpio_nrfx_pin_interrupt_configure+0x72>
    9e00:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    9e04:	d111      	bne.n	9e2a <gpio_nrfx_pin_interrupt_configure+0x72>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    9e06:	4a1b      	ldr	r2, [pc, #108]	; (9e74 <gpio_nrfx_pin_interrupt_configure+0xbc>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    9e08:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    9e0c:	3380      	adds	r3, #128	; 0x80
    9e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    9e12:	07db      	lsls	r3, r3, #31
    9e14:	d409      	bmi.n	9e2a <gpio_nrfx_pin_interrupt_configure+0x72>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    9e16:	f10d 0407 	add.w	r4, sp, #7
    9e1a:	4621      	mov	r1, r4
    9e1c:	4628      	mov	r0, r5
    9e1e:	f001 fc4d 	bl	b6bc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    9e22:	4b15      	ldr	r3, [pc, #84]	; (9e78 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    9e24:	4298      	cmp	r0, r3
    9e26:	d019      	beq.n	9e5c <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
    9e28:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    9e2a:	2300      	movs	r3, #0
    9e2c:	4628      	mov	r0, r5
    9e2e:	4619      	mov	r1, r3
    9e30:	aa02      	add	r2, sp, #8
    9e32:	f001 fb19 	bl	b468 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    9e36:	4b11      	ldr	r3, [pc, #68]	; (9e7c <gpio_nrfx_pin_interrupt_configure+0xc4>)
    9e38:	4298      	cmp	r0, r3
    9e3a:	d118      	bne.n	9e6e <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    9e3c:	2101      	movs	r1, #1
    9e3e:	4628      	mov	r0, r5
    9e40:	f001 fc90 	bl	b764 <nrfx_gpiote_trigger_enable>
    9e44:	e7c8      	b.n	9dd8 <gpio_nrfx_pin_interrupt_configure+0x20>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    9e46:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    9e4a:	d005      	beq.n	9e58 <gpio_nrfx_pin_interrupt_configure+0xa0>
    9e4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    9e50:	bf0c      	ite	eq
    9e52:	2302      	moveq	r3, #2
    9e54:	2301      	movne	r3, #1
    9e56:	e7cc      	b.n	9df2 <gpio_nrfx_pin_interrupt_configure+0x3a>
    9e58:	2303      	movs	r3, #3
    9e5a:	e7ca      	b.n	9df2 <gpio_nrfx_pin_interrupt_configure+0x3a>
			err = nrfx_gpiote_channel_alloc(&ch);
    9e5c:	4620      	mov	r0, r4
    9e5e:	f001 fc7b 	bl	b758 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    9e62:	4b06      	ldr	r3, [pc, #24]	; (9e7c <gpio_nrfx_pin_interrupt_configure+0xc4>)
    9e64:	4298      	cmp	r0, r3
    9e66:	d0df      	beq.n	9e28 <gpio_nrfx_pin_interrupt_configure+0x70>
				return -ENOMEM;
    9e68:	f06f 000b 	mvn.w	r0, #11
    9e6c:	e7b5      	b.n	9dda <gpio_nrfx_pin_interrupt_configure+0x22>
		return -EINVAL;
    9e6e:	f06f 0015 	mvn.w	r0, #21
    9e72:	e7b2      	b.n	9dda <gpio_nrfx_pin_interrupt_configure+0x22>
    9e74:	40842500 	.word	0x40842500
    9e78:	0bad0004 	.word	0x0bad0004
    9e7c:	0bad0000 	.word	0x0bad0000

00009e80 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    9e80:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    9e82:	f001 fc59 	bl	b738 <nrfx_gpiote_is_init>
    9e86:	4604      	mov	r4, r0
    9e88:	b968      	cbnz	r0, 9ea6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    9e8a:	f001 fc2d 	bl	b6e8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    9e8e:	4b08      	ldr	r3, [pc, #32]	; (9eb0 <gpio_nrfx_init+0x30>)
    9e90:	4298      	cmp	r0, r3
    9e92:	d10a      	bne.n	9eaa <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    9e94:	4621      	mov	r1, r4
    9e96:	4807      	ldr	r0, [pc, #28]	; (9eb4 <gpio_nrfx_init+0x34>)
    9e98:	f001 fc0a 	bl	b6b0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    9e9c:	4622      	mov	r2, r4
    9e9e:	2105      	movs	r1, #5
    9ea0:	2031      	movs	r0, #49	; 0x31
    9ea2:	f7ff f9bb 	bl	921c <z_arm_irq_priority_set>
		return 0;
    9ea6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    9ea8:	bd10      	pop	{r4, pc}
		return -EIO;
    9eaa:	f06f 0004 	mvn.w	r0, #4
    9eae:	e7fb      	b.n	9ea8 <gpio_nrfx_init+0x28>
    9eb0:	0bad0000 	.word	0x0bad0000
    9eb4:	00009eb9 	.word	0x00009eb9

00009eb8 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    9eb8:	0943      	lsrs	r3, r0, #5
{
    9eba:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    9ebc:	d110      	bne.n	9ee0 <nrfx_gpio_handler+0x28>
	return list->head;
    9ebe:	4b09      	ldr	r3, [pc, #36]	; (9ee4 <nrfx_gpio_handler+0x2c>)
    9ec0:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    9ec2:	b169      	cbz	r1, 9ee0 <nrfx_gpio_handler+0x28>
	gpio_fire_callbacks(list, port, BIT(pin));
    9ec4:	2501      	movs	r5, #1
	return node->next;
    9ec6:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    9ec8:	4e07      	ldr	r6, [pc, #28]	; (9ee8 <nrfx_gpio_handler+0x30>)
    9eca:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
    9ecc:	688a      	ldr	r2, [r1, #8]
    9ece:	402a      	ands	r2, r5
    9ed0:	d002      	beq.n	9ed8 <nrfx_gpio_handler+0x20>
			cb->handler(port, cb, cb->pin_mask & pins);
    9ed2:	4630      	mov	r0, r6
    9ed4:	684b      	ldr	r3, [r1, #4]
    9ed6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    9ed8:	b114      	cbz	r4, 9ee0 <nrfx_gpio_handler+0x28>
    9eda:	4621      	mov	r1, r4
    9edc:	6824      	ldr	r4, [r4, #0]
    9ede:	e7f5      	b.n	9ecc <nrfx_gpio_handler+0x14>
}
    9ee0:	bd70      	pop	{r4, r5, r6, pc}
    9ee2:	bf00      	nop
    9ee4:	2000c96c 	.word	0x2000c96c
    9ee8:	0000fe8c 	.word	0x0000fe8c

00009eec <gpio_nrfx_pin_configure>:
{
    9eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    9ef0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    9ef4:	f001 061f 	and.w	r6, r1, #31
    9ef8:	f898 300c 	ldrb.w	r3, [r8, #12]
{
    9efc:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    9efe:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
    9f02:	4614      	mov	r4, r2
    9f04:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    9f06:	4630      	mov	r0, r6
    9f08:	f10d 0103 	add.w	r1, sp, #3
    9f0c:	f001 fbd6 	bl	b6bc <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    9f10:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    9f14:	4681      	mov	r9, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    9f16:	d10b      	bne.n	9f30 <gpio_nrfx_pin_configure+0x44>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    9f18:	4630      	mov	r0, r6
    9f1a:	f001 fc8f 	bl	b83c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    9f1e:	4b42      	ldr	r3, [pc, #264]	; (a028 <gpio_nrfx_pin_configure+0x13c>)
    9f20:	4599      	cmp	r9, r3
    9f22:	d103      	bne.n	9f2c <gpio_nrfx_pin_configure+0x40>
			err = nrfx_gpiote_channel_free(ch);
    9f24:	f89d 0003 	ldrb.w	r0, [sp, #3]
    9f28:	f001 fc10 	bl	b74c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    9f2c:	2000      	movs	r0, #0
    9f2e:	e056      	b.n	9fde <gpio_nrfx_pin_configure+0xf2>
	nrfx_gpiote_trigger_config_t trigger_config = {
    9f30:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    9f32:	4630      	mov	r0, r6
    9f34:	4619      	mov	r1, r3
    9f36:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    9f38:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    9f3c:	f001 fa94 	bl	b468 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    9f40:	4b39      	ldr	r3, [pc, #228]	; (a028 <gpio_nrfx_pin_configure+0x13c>)
    9f42:	4298      	cmp	r0, r3
    9f44:	d002      	beq.n	9f4c <gpio_nrfx_pin_configure+0x60>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    9f46:	f06f 0015 	mvn.w	r0, #21
    9f4a:	e048      	b.n	9fde <gpio_nrfx_pin_configure+0xf2>
	if (free_ch) {
    9f4c:	4581      	cmp	r9, r0
    9f4e:	d103      	bne.n	9f58 <gpio_nrfx_pin_configure+0x6c>
		err = nrfx_gpiote_channel_free(ch);
    9f50:	f89d 0003 	ldrb.w	r0, [sp, #3]
    9f54:	f001 fbfa 	bl	b74c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    9f58:	03a5      	lsls	r5, r4, #14
    9f5a:	d552      	bpl.n	a002 <gpio_nrfx_pin_configure+0x116>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    9f5c:	f240 3306 	movw	r3, #774	; 0x306
    9f60:	4023      	ands	r3, r4
    9f62:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    9f66:	d03d      	beq.n	9fe4 <gpio_nrfx_pin_configure+0xf8>
    9f68:	d80c      	bhi.n	9f84 <gpio_nrfx_pin_configure+0x98>
    9f6a:	2b06      	cmp	r3, #6
    9f6c:	d015      	beq.n	9f9a <gpio_nrfx_pin_configure+0xae>
    9f6e:	d804      	bhi.n	9f7a <gpio_nrfx_pin_configure+0x8e>
    9f70:	b19b      	cbz	r3, 9f9a <gpio_nrfx_pin_configure+0xae>
    9f72:	2b02      	cmp	r3, #2
    9f74:	d1e7      	bne.n	9f46 <gpio_nrfx_pin_configure+0x5a>
    9f76:	2304      	movs	r3, #4
    9f78:	e00f      	b.n	9f9a <gpio_nrfx_pin_configure+0xae>
    9f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9f7e:	d1e2      	bne.n	9f46 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_H0S1;
    9f80:	2301      	movs	r3, #1
    9f82:	e00a      	b.n	9f9a <gpio_nrfx_pin_configure+0xae>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    9f84:	f240 2202 	movw	r2, #514	; 0x202
    9f88:	4293      	cmp	r3, r2
    9f8a:	d02d      	beq.n	9fe8 <gpio_nrfx_pin_configure+0xfc>
    9f8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    9f90:	d02c      	beq.n	9fec <gpio_nrfx_pin_configure+0x100>
    9f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9f96:	d1d6      	bne.n	9f46 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_S0H1;
    9f98:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    9f9a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    9f9e:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    9fa2:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    9fa6:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    9fa8:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    9fac:	bf4c      	ite	mi
    9fae:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
    9fb0:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    9fb4:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    9fb6:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    9fba:	d519      	bpl.n	9ff0 <gpio_nrfx_pin_configure+0x104>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    9fbc:	2101      	movs	r1, #1
    9fbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
    9fc2:	fa01 f707 	lsl.w	r7, r1, r7
    p_reg->OUTSET = set_mask;
    9fc6:	609f      	str	r7, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    9fc8:	2200      	movs	r2, #0
    9fca:	4630      	mov	r0, r6
    9fcc:	a901      	add	r1, sp, #4
    9fce:	f001 faf5 	bl	b5bc <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    9fd2:	4b15      	ldr	r3, [pc, #84]	; (a028 <gpio_nrfx_pin_configure+0x13c>)
    9fd4:	4298      	cmp	r0, r3
    9fd6:	bf14      	ite	ne
    9fd8:	f06f 0015 	mvnne.w	r0, #21
    9fdc:	2000      	moveq	r0, #0
}
    9fde:	b005      	add	sp, #20
    9fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
    9fe4:	2307      	movs	r3, #7
    9fe6:	e7d8      	b.n	9f9a <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_D0H1;
    9fe8:	2305      	movs	r3, #5
    9fea:	e7d6      	b.n	9f9a <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_H0H1;
    9fec:	2303      	movs	r3, #3
    9fee:	e7d4      	b.n	9f9a <gpio_nrfx_pin_configure+0xae>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    9ff0:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    9ff2:	bf41      	itttt	mi
    9ff4:	2101      	movmi	r1, #1
    9ff6:	f8d8 3004 	ldrmi.w	r3, [r8, #4]
    9ffa:	fa01 f707 	lslmi.w	r7, r1, r7
    p_reg->OUTCLR = clr_mask;
    9ffe:	60df      	strmi	r7, [r3, #12]
}
    a000:	e7e2      	b.n	9fc8 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    a002:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    a004:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    a008:	bf4c      	ite	mi
    a00a:	2403      	movmi	r4, #3
    a00c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    a010:	461a      	mov	r2, r3
    a012:	4630      	mov	r0, r6
    a014:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    a016:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    a01a:	f001 fa25 	bl	b468 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    a01e:	4b02      	ldr	r3, [pc, #8]	; (a028 <gpio_nrfx_pin_configure+0x13c>)
    a020:	4298      	cmp	r0, r3
    a022:	d083      	beq.n	9f2c <gpio_nrfx_pin_configure+0x40>
    a024:	e78f      	b.n	9f46 <gpio_nrfx_pin_configure+0x5a>
    a026:	bf00      	nop
    a028:	0bad0000 	.word	0x0bad0000

0000a02c <transfer_next_chunk>:
	return 0;
}
#endif

static void transfer_next_chunk(const struct device *dev)
{
    a02c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    a02e:	6904      	ldr	r4, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    a030:	6e23      	ldr	r3, [r4, #96]	; 0x60
		return ctx->rx_len;
    a032:	6ea5      	ldr	r5, [r4, #104]	; 0x68
	if (!ctx->tx_len) {
    a034:	b99b      	cbnz	r3, a05e <transfer_next_chunk+0x32>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    a036:	b9bd      	cbnz	r5, a068 <transfer_next_chunk+0x3c>
	_spi_context_cs_control(ctx, on, false);
    a038:	2200      	movs	r2, #0
    a03a:	4620      	mov	r0, r4
    a03c:	4611      	mov	r1, r2
    a03e:	f005 f823 	bl	f088 <_spi_context_cs_control>
	if (!ctx->asynchronous) {
    a042:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    a046:	2b00      	cmp	r3, #0
    a048:	d142      	bne.n	a0d0 <transfer_next_chunk+0xa4>
		ctx->sync_status = status;
    a04a:	6425      	str	r5, [r4, #64]	; 0x40
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    a04c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a050:	f003 f9ec 	bl	d42c <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
    a054:	2300      	movs	r3, #0
    a056:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
    a05a:	b004      	add	sp, #16
    a05c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!ctx->rx_len) {
    a05e:	2d00      	cmp	r5, #0
    a060:	d034      	beq.n	a0cc <transfer_next_chunk+0xa0>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    a062:	429d      	cmp	r5, r3
    a064:	bf28      	it	cs
    a066:	461d      	movcs	r5, r3
		const uint8_t *tx_buf = ctx->tx_buf;
    a068:	6de1      	ldr	r1, [r4, #92]	; 0x5c
	const struct spi_nrfx_config *dev_config = dev->config;
    a06a:	6846      	ldr	r6, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
    a06c:	b169      	cbz	r1, a08a <transfer_next_chunk+0x5e>
    a06e:	b163      	cbz	r3, a08a <transfer_next_chunk+0x5e>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    a070:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    a074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a078:	d007      	beq.n	a08a <transfer_next_chunk+0x5e>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
    a07a:	2d08      	cmp	r5, #8
    a07c:	bf28      	it	cs
    a07e:	2508      	movcs	r5, #8
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    a080:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    a082:	462a      	mov	r2, r5
    a084:	f005 fd2e 	bl	fae4 <memcpy>
			tx_buf = dev_data->buffer;
    a088:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
		if (chunk_len > MAX_CHUNK_LEN) {
    a08a:	f641 72ff 	movw	r2, #8191	; 0x1fff
    a08e:	4295      	cmp	r5, r2
    a090:	bf28      	it	cs
    a092:	4615      	movcs	r5, r2
    a094:	6de3      	ldr	r3, [r4, #92]	; 0x5c
		dev_data->chunk_len = chunk_len;
    a096:	6765      	str	r5, [r4, #116]	; 0x74
		xfer.p_tx_buffer = tx_buf;
    a098:	9100      	str	r1, [sp, #0]
    a09a:	b11b      	cbz	r3, a0a4 <transfer_next_chunk+0x78>
    a09c:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    a09e:	2b00      	cmp	r3, #0
    a0a0:	bf18      	it	ne
    a0a2:	462b      	movne	r3, r5
    a0a4:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    a0a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a0a8:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    a0aa:	b11b      	cbz	r3, a0b4 <transfer_next_chunk+0x88>
    a0ac:	6ea3      	ldr	r3, [r4, #104]	; 0x68
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    a0ae:	2b00      	cmp	r3, #0
    a0b0:	bf18      	it	ne
    a0b2:	462b      	movne	r3, r5
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    a0b4:	2200      	movs	r2, #0
    a0b6:	4669      	mov	r1, sp
    a0b8:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    a0ba:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    a0bc:	f001 fe12 	bl	bce4 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    a0c0:	4b0d      	ldr	r3, [pc, #52]	; (a0f8 <transfer_next_chunk+0xcc>)
    a0c2:	4298      	cmp	r0, r3
    a0c4:	d0c9      	beq.n	a05a <transfer_next_chunk+0x2e>
			error = -EIO;
    a0c6:	f06f 0504 	mvn.w	r5, #4
    a0ca:	e7b5      	b.n	a038 <transfer_next_chunk+0xc>
    a0cc:	461d      	mov	r5, r3
    a0ce:	e7cb      	b.n	a068 <transfer_next_chunk+0x3c>
		if (ctx->signal) {
    a0d0:	6c60      	ldr	r0, [r4, #68]	; 0x44
    a0d2:	b140      	cbz	r0, a0e6 <transfer_next_chunk+0xba>
	return (ctx->config->operation & SPI_OP_MODE_SLAVE);
    a0d4:	6823      	ldr	r3, [r4, #0]
    a0d6:	889b      	ldrh	r3, [r3, #4]
			if (spi_context_is_slave(ctx) && !status) {
    a0d8:	07db      	lsls	r3, r3, #31
    a0da:	d501      	bpl.n	a0e0 <transfer_next_chunk+0xb4>
    a0dc:	b905      	cbnz	r5, a0e0 <transfer_next_chunk+0xb4>
				status = ctx->recv_frames;
    a0de:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    a0e0:	4629      	mov	r1, r5
    a0e2:	f003 feaf 	bl	de44 <z_impl_k_poll_signal_raise>
		if (!(ctx->config->operation & SPI_LOCK_ON)) {
    a0e6:	6823      	ldr	r3, [r4, #0]
    a0e8:	889b      	ldrh	r3, [r3, #4]
    a0ea:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    a0ee:	d1b1      	bne.n	a054 <transfer_next_chunk+0x28>
			ctx->owner = NULL;
    a0f0:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    a0f2:	f104 0010 	add.w	r0, r4, #16
    a0f6:	e7ab      	b.n	a050 <transfer_next_chunk+0x24>
    a0f8:	0bad0000 	.word	0x0bad0000

0000a0fc <transceive>:
		      const struct spi_config *spi_cfg,
		      const struct spi_buf_set *tx_bufs,
		      const struct spi_buf_set *rx_bufs,
		      bool asynchronous,
		      struct k_poll_signal *signal)
{
    a0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a100:	461f      	mov	r7, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    a102:	888b      	ldrh	r3, [r1, #4]
    a104:	4681      	mov	r9, r0
    a106:	049e      	lsls	r6, r3, #18
    a108:	460d      	mov	r5, r1
    a10a:	4690      	mov	r8, r2
	struct spi_nrfx_data *dev_data = dev->data;
    a10c:	6904      	ldr	r4, [r0, #16]
{
    a10e:	b08b      	sub	sp, #44	; 0x2c
    a110:	f100 80e8 	bmi.w	a2e4 <transceive+0x1e8>
	return z_impl_k_sem_take(sem, timeout);
    a114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a11c:	f104 0010 	add.w	r0, r4, #16
    a120:	f003 f9aa 	bl	d478 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    a124:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
	ctx->owner = spi_cfg;
    a128:	6065      	str	r5, [r4, #4]
	ctx->asynchronous = asynchronous;
    a12a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	ctx->signal = signal;
    a12e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a130:	6463      	str	r3, [r4, #68]	; 0x44
	const struct spi_nrfx_config *dev_config = dev->config;
    a132:	f8d9 b004 	ldr.w	fp, [r9, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    a136:	f8d9 a010 	ldr.w	sl, [r9, #16]
	uint32_t max_freq = dev_config->max_freq;
    a13a:	f8db 3008 	ldr.w	r3, [fp, #8]
    a13e:	9303      	str	r3, [sp, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    a140:	f89a 3079 	ldrb.w	r3, [sl, #121]	; 0x79
    a144:	9301      	str	r3, [sp, #4]
    a146:	b11b      	cbz	r3, a150 <transceive+0x54>
    a148:	f8da 3000 	ldr.w	r3, [sl]
    a14c:	429d      	cmp	r5, r3
    a14e:	d066      	beq.n	a21e <transceive+0x122>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    a150:	88ae      	ldrh	r6, [r5, #4]
    a152:	0530      	lsls	r0, r6, #20
    a154:	f100 80f3 	bmi.w	a33e <transceive+0x242>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    a158:	f016 0f09 	tst.w	r6, #9
    a15c:	f040 80ec 	bne.w	a338 <transceive+0x23c>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    a160:	f3c6 1345 	ubfx	r3, r6, #5, #6
    a164:	2b08      	cmp	r3, #8
    a166:	f040 80e7 	bne.w	a338 <transceive+0x23c>
	if (spi_cfg->frequency < 125000) {
    a16a:	682b      	ldr	r3, [r5, #0]
    a16c:	9302      	str	r3, [sp, #8]
    a16e:	9a02      	ldr	r2, [sp, #8]
    a170:	4b81      	ldr	r3, [pc, #516]	; (a378 <transceive+0x27c>)
    a172:	429a      	cmp	r2, r3
    a174:	f240 80e0 	bls.w	a338 <transceive+0x23c>
	config = dev_config->def_config;
    a178:	f10d 0c14 	add.w	ip, sp, #20
    a17c:	f10b 0e0c 	add.w	lr, fp, #12
    a180:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    a184:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a188:	f8de 3000 	ldr.w	r3, [lr]
    a18c:	f8cc 3000 	str.w	r3, [ip]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    a190:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a194:	4293      	cmp	r3, r2
    a196:	bf28      	it	cs
    a198:	4613      	movcs	r3, r2
	if (frequency < 250000) {
    a19a:	4a78      	ldr	r2, [pc, #480]	; (a37c <transceive+0x280>)
    a19c:	4293      	cmp	r3, r2
    a19e:	f240 80aa 	bls.w	a2f6 <transceive+0x1fa>
	} else if (frequency < 500000) {
    a1a2:	4a77      	ldr	r2, [pc, #476]	; (a380 <transceive+0x284>)
    a1a4:	4293      	cmp	r3, r2
    a1a6:	f240 80a9 	bls.w	a2fc <transceive+0x200>
	} else if (frequency < 1000000) {
    a1aa:	4a76      	ldr	r2, [pc, #472]	; (a384 <transceive+0x288>)
    a1ac:	4293      	cmp	r3, r2
    a1ae:	f240 80a8 	bls.w	a302 <transceive+0x206>
	} else if (frequency < 2000000) {
    a1b2:	4a75      	ldr	r2, [pc, #468]	; (a388 <transceive+0x28c>)
    a1b4:	4293      	cmp	r3, r2
    a1b6:	f240 80a7 	bls.w	a308 <transceive+0x20c>
	} else if (frequency < 4000000) {
    a1ba:	4a74      	ldr	r2, [pc, #464]	; (a38c <transceive+0x290>)
    a1bc:	4293      	cmp	r3, r2
    a1be:	f240 80a6 	bls.w	a30e <transceive+0x212>
		return NRF_SPIM_FREQ_8M;
    a1c2:	4a73      	ldr	r2, [pc, #460]	; (a390 <transceive+0x294>)
    a1c4:	4293      	cmp	r3, r2
    a1c6:	bf34      	ite	cc
    a1c8:	f04f 4380 	movcc.w	r3, #1073741824	; 0x40000000
    a1cc:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    a1d0:	07b1      	lsls	r1, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    a1d2:	9307      	str	r3, [sp, #28]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    a1d4:	f006 0304 	and.w	r3, r6, #4
    a1d8:	f140 809c 	bpl.w	a314 <transceive+0x218>
			return NRF_SPIM_MODE_2;
    a1dc:	2b00      	cmp	r3, #0
    a1de:	bf14      	ite	ne
    a1e0:	2303      	movne	r3, #3
    a1e2:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    a1e4:	f88d 3020 	strb.w	r3, [sp, #32]
	if (dev_data->initialized) {
    a1e8:	9b01      	ldr	r3, [sp, #4]
	if (operation & SPI_TRANSFER_LSB) {
    a1ea:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    a1ee:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
	if (dev_data->initialized) {
    a1f2:	b12b      	cbz	r3, a200 <transceive+0x104>
		nrfx_spim_uninit(&dev_config->spim);
    a1f4:	4658      	mov	r0, fp
    a1f6:	f001 fd2d 	bl	bc54 <nrfx_spim_uninit>
		dev_data->initialized = false;
    a1fa:	2300      	movs	r3, #0
    a1fc:	f88a 3079 	strb.w	r3, [sl, #121]	; 0x79
	result = nrfx_spim_init(&dev_config->spim, &config,
    a200:	4653      	mov	r3, sl
    a202:	4658      	mov	r0, fp
    a204:	4a63      	ldr	r2, [pc, #396]	; (a394 <transceive+0x298>)
    a206:	a905      	add	r1, sp, #20
    a208:	f001 fc82 	bl	bb10 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    a20c:	4b62      	ldr	r3, [pc, #392]	; (a398 <transceive+0x29c>)
    a20e:	4298      	cmp	r0, r3
    a210:	f040 8084 	bne.w	a31c <transceive+0x220>
	dev_data->initialized = true;
    a214:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
    a216:	f8ca 5000 	str.w	r5, [sl]
	dev_data->initialized = true;
    a21a:	f88a 3079 	strb.w	r3, [sl, #121]	; 0x79

	spi_context_lock(&dev_data->ctx, asynchronous, signal, spi_cfg);

	error = configure(dev, spi_cfg);
	if (error == 0) {
		dev_data->busy = true;
    a21e:	2301      	movs	r3, #1
    a220:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    a224:	f1b8 0f00 	cmp.w	r8, #0
    a228:	f040 808c 	bne.w	a344 <transceive+0x248>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    a22c:	4642      	mov	r2, r8
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    a22e:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    a232:	6522      	str	r2, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    a234:	f104 0150 	add.w	r1, r4, #80	; 0x50
    a238:	f104 0260 	add.w	r2, r4, #96	; 0x60
    a23c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    a240:	f004 fefd 	bl	f03e <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    a244:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    a246:	2f00      	cmp	r7, #0
    a248:	f040 8085 	bne.w	a356 <transceive+0x25a>
    a24c:	6567      	str	r7, [r4, #84]	; 0x54
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    a24e:	f104 0268 	add.w	r2, r4, #104	; 0x68
    a252:	f104 0158 	add.w	r1, r4, #88	; 0x58
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    a256:	65a7      	str	r7, [r4, #88]	; 0x58
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    a258:	f104 0054 	add.w	r0, r4, #84	; 0x54
    a25c:	f004 feef 	bl	f03e <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    a260:	2200      	movs	r2, #0
	_spi_context_cs_control(ctx, on, false);
    a262:	2101      	movs	r1, #1
	ctx->rx_buf = (uint8_t *)
    a264:	6660      	str	r0, [r4, #100]	; 0x64
	ctx->sync_status = 0;
    a266:	6422      	str	r2, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
    a268:	4620      	mov	r0, r4
	ctx->recv_frames = 0;
    a26a:	66e2      	str	r2, [r4, #108]	; 0x6c
	_spi_context_cs_control(ctx, on, false);
    a26c:	f004 ff0c 	bl	f088 <_spi_context_cs_control>

		spi_context_buffers_setup(&dev_data->ctx, tx_bufs, rx_bufs, 1);
		spi_context_cs_control(&dev_data->ctx, true);

		transfer_next_chunk(dev);
    a270:	4648      	mov	r0, r9
    a272:	f7ff fedb 	bl	a02c <transfer_next_chunk>
	return (ctx->config->operation & SPI_OP_MODE_SLAVE);
    a276:	6823      	ldr	r3, [r4, #0]
    a278:	8899      	ldrh	r1, [r3, #4]
	if (IS_ENABLED(CONFIG_SPI_SLAVE) && spi_context_is_slave(ctx)) {
    a27a:	f011 0101 	ands.w	r1, r1, #1
    a27e:	d171      	bne.n	a364 <transceive+0x268>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    a280:	6ea5      	ldr	r5, [r4, #104]	; 0x68
    a282:	6e22      	ldr	r2, [r4, #96]	; 0x60
    a284:	681b      	ldr	r3, [r3, #0]
    a286:	4295      	cmp	r5, r2
    a288:	bf38      	it	cc
    a28a:	4615      	movcc	r5, r2
    a28c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    a290:	4355      	muls	r5, r2
    a292:	fbb5 f5f3 	udiv	r5, r5, r3
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    a296:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    a29a:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    a29e:	35c8      	adds	r5, #200	; 0xc8
    a2a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a2a4:	2300      	movs	r3, #0
    a2a6:	fbe5 0106 	umlal	r0, r1, r5, r6
    a2aa:	f7fd ff4b 	bl	8144 <__aeabi_uldivmod>
    a2ae:	4602      	mov	r2, r0
    a2b0:	460b      	mov	r3, r1
	if (!ctx->asynchronous) {
    a2b2:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    a2b6:	2900      	cmp	r1, #0
    a2b8:	d158      	bne.n	a36c <transceive+0x270>
    a2ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a2be:	f003 f8db 	bl	d478 <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
    a2c2:	2800      	cmp	r0, #0
    a2c4:	d154      	bne.n	a370 <transceive+0x274>
		status = ctx->sync_status;
    a2c6:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return (ctx->config->operation & SPI_OP_MODE_SLAVE);
    a2c8:	6823      	ldr	r3, [r4, #0]
    a2ca:	889b      	ldrh	r3, [r3, #4]
	if (spi_context_is_slave(ctx) && !status) {
    a2cc:	07da      	lsls	r2, r3, #31
    a2ce:	d501      	bpl.n	a2d4 <transceive+0x1d8>
    a2d0:	b905      	cbnz	r5, a2d4 <transceive+0x1d8>
		return ctx->recv_frames;
    a2d2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
	if (status >= 0 && (ctx->config->operation & SPI_LOCK_ON)) {
    a2d4:	2d00      	cmp	r5, #0
    a2d6:	db23      	blt.n	a320 <transceive+0x224>
    a2d8:	049b      	lsls	r3, r3, #18
    a2da:	d521      	bpl.n	a320 <transceive+0x224>
	}

	spi_context_release(&dev_data->ctx, error);

	return error;
}
    a2dc:	4628      	mov	r0, r5
    a2de:	b00b      	add	sp, #44	; 0x2c
    a2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    a2e4:	69a3      	ldr	r3, [r4, #24]
    a2e6:	2b00      	cmp	r3, #0
    a2e8:	f47f af14 	bne.w	a114 <transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
    a2ec:	6863      	ldr	r3, [r4, #4]
    a2ee:	4299      	cmp	r1, r3
    a2f0:	f47f af10 	bne.w	a114 <transceive+0x18>
    a2f4:	e71d      	b.n	a132 <transceive+0x36>
		return NRF_SPIM_FREQ_125K;
    a2f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    a2fa:	e769      	b.n	a1d0 <transceive+0xd4>
		return NRF_SPIM_FREQ_250K;
    a2fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    a300:	e766      	b.n	a1d0 <transceive+0xd4>
		return NRF_SPIM_FREQ_500K;
    a302:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    a306:	e763      	b.n	a1d0 <transceive+0xd4>
		return NRF_SPIM_FREQ_1M;
    a308:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    a30c:	e760      	b.n	a1d0 <transceive+0xd4>
		return NRF_SPIM_FREQ_2M;
    a30e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    a312:	e75d      	b.n	a1d0 <transceive+0xd4>
			return NRF_SPIM_MODE_0;
    a314:	3b00      	subs	r3, #0
    a316:	bf18      	it	ne
    a318:	2301      	movne	r3, #1
    a31a:	e763      	b.n	a1e4 <transceive+0xe8>
		return -EIO;
    a31c:	f06f 0504 	mvn.w	r5, #4
	if (!ctx->asynchronous || (status < 0)) {
    a320:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    a324:	b10b      	cbz	r3, a32a <transceive+0x22e>
    a326:	2d00      	cmp	r5, #0
    a328:	dad8      	bge.n	a2dc <transceive+0x1e0>
		ctx->owner = NULL;
    a32a:	2300      	movs	r3, #0
    a32c:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    a32e:	f104 0010 	add.w	r0, r4, #16
    a332:	f003 f87b 	bl	d42c <z_impl_k_sem_give>
	return error;
    a336:	e7d1      	b.n	a2dc <transceive+0x1e0>
		return -EINVAL;
    a338:	f06f 0515 	mvn.w	r5, #21
    a33c:	e7f0      	b.n	a320 <transceive+0x224>
		return -ENOTSUP;
    a33e:	f06f 0585 	mvn.w	r5, #133	; 0x85
    a342:	e7ed      	b.n	a320 <transceive+0x224>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    a344:	f8d8 2000 	ldr.w	r2, [r8]
    a348:	64e2      	str	r2, [r4, #76]	; 0x4c
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    a34a:	2a00      	cmp	r2, #0
    a34c:	f43f af71 	beq.w	a232 <transceive+0x136>
    a350:	f8d8 2004 	ldr.w	r2, [r8, #4]
    a354:	e76d      	b.n	a232 <transceive+0x136>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    a356:	683b      	ldr	r3, [r7, #0]
    a358:	6563      	str	r3, [r4, #84]	; 0x54
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    a35a:	b10b      	cbz	r3, a360 <transceive+0x264>
    a35c:	687f      	ldr	r7, [r7, #4]
    a35e:	e776      	b.n	a24e <transceive+0x152>
    a360:	461f      	mov	r7, r3
    a362:	e774      	b.n	a24e <transceive+0x152>
		timeout = K_FOREVER;
    a364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a368:	4613      	mov	r3, r2
    a36a:	e7a2      	b.n	a2b2 <transceive+0x1b6>
	int status = 0;
    a36c:	2500      	movs	r5, #0
    a36e:	e7ab      	b.n	a2c8 <transceive+0x1cc>
			return -ETIMEDOUT;
    a370:	f06f 0573 	mvn.w	r5, #115	; 0x73
    a374:	e7d4      	b.n	a320 <transceive+0x224>
    a376:	bf00      	nop
    a378:	0001e847 	.word	0x0001e847
    a37c:	0003d08f 	.word	0x0003d08f
    a380:	0007a11f 	.word	0x0007a11f
    a384:	000f423f 	.word	0x000f423f
    a388:	001e847f 	.word	0x001e847f
    a38c:	003d08ff 	.word	0x003d08ff
    a390:	007a1200 	.word	0x007a1200
    a394:	0000f1bd 	.word	0x0000f1bd
    a398:	0bad0000 	.word	0x0bad0000

0000a39c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    a39c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    a39e:	794b      	ldrb	r3, [r1, #5]
    a3a0:	2b01      	cmp	r3, #1
    a3a2:	d026      	beq.n	a3f2 <uarte_nrfx_configure+0x56>
    a3a4:	2b03      	cmp	r3, #3
    a3a6:	d121      	bne.n	a3ec <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    a3a8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    a3aa:	798b      	ldrb	r3, [r1, #6]
    a3ac:	2b03      	cmp	r3, #3
    a3ae:	d11d      	bne.n	a3ec <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    a3b0:	79cc      	ldrb	r4, [r1, #7]
    a3b2:	b10c      	cbz	r4, a3b8 <uarte_nrfx_configure+0x1c>
    a3b4:	2c01      	cmp	r4, #1
    a3b6:	d119      	bne.n	a3ec <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    a3b8:	790a      	ldrb	r2, [r1, #4]
    a3ba:	b112      	cbz	r2, a3c2 <uarte_nrfx_configure+0x26>
    a3bc:	2a02      	cmp	r2, #2
    a3be:	d115      	bne.n	a3ec <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    a3c0:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    a3c2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    a3c4:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    a3c6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    a3ca:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    a3cc:	d065      	beq.n	a49a <uarte_nrfx_configure+0xfe>
    a3ce:	d82d      	bhi.n	a42c <uarte_nrfx_configure+0x90>
    a3d0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    a3d4:	d064      	beq.n	a4a0 <uarte_nrfx_configure+0x104>
    a3d6:	d816      	bhi.n	a406 <uarte_nrfx_configure+0x6a>
    a3d8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    a3dc:	d062      	beq.n	a4a4 <uarte_nrfx_configure+0x108>
    a3de:	d80a      	bhi.n	a3f6 <uarte_nrfx_configure+0x5a>
    a3e0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    a3e4:	d061      	beq.n	a4aa <uarte_nrfx_configure+0x10e>
    a3e6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    a3ea:	d061      	beq.n	a4b0 <uarte_nrfx_configure+0x114>
    a3ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a3f0:	e052      	b.n	a498 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    a3f2:	2600      	movs	r6, #0
    a3f4:	e7d9      	b.n	a3aa <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    a3f6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    a3fa:	d05c      	beq.n	a4b6 <uarte_nrfx_configure+0x11a>
    a3fc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    a400:	d1f4      	bne.n	a3ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    a402:	4b37      	ldr	r3, [pc, #220]	; (a4e0 <uarte_nrfx_configure+0x144>)
    a404:	e03c      	b.n	a480 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a406:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    a40a:	d057      	beq.n	a4bc <uarte_nrfx_configure+0x120>
    a40c:	d807      	bhi.n	a41e <uarte_nrfx_configure+0x82>
    a40e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    a412:	d055      	beq.n	a4c0 <uarte_nrfx_configure+0x124>
    a414:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    a418:	d1e8      	bne.n	a3ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    a41a:	4b32      	ldr	r3, [pc, #200]	; (a4e4 <uarte_nrfx_configure+0x148>)
    a41c:	e030      	b.n	a480 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a41e:	f647 2712 	movw	r7, #31250	; 0x7a12
    a422:	42bb      	cmp	r3, r7
    a424:	d1e2      	bne.n	a3ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    a426:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    a42a:	e029      	b.n	a480 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a42c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    a430:	d048      	beq.n	a4c4 <uarte_nrfx_configure+0x128>
    a432:	d813      	bhi.n	a45c <uarte_nrfx_configure+0xc0>
    a434:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    a438:	d047      	beq.n	a4ca <uarte_nrfx_configure+0x12e>
    a43a:	d809      	bhi.n	a450 <uarte_nrfx_configure+0xb4>
    a43c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    a440:	42bb      	cmp	r3, r7
    a442:	d044      	beq.n	a4ce <uarte_nrfx_configure+0x132>
    a444:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    a448:	d1d0      	bne.n	a3ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    a44a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    a44e:	e017      	b.n	a480 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a450:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    a454:	d1ca      	bne.n	a3ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    a456:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    a45a:	e011      	b.n	a480 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a45c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    a460:	d038      	beq.n	a4d4 <uarte_nrfx_configure+0x138>
    a462:	d808      	bhi.n	a476 <uarte_nrfx_configure+0xda>
    a464:	4f20      	ldr	r7, [pc, #128]	; (a4e8 <uarte_nrfx_configure+0x14c>)
    a466:	42bb      	cmp	r3, r7
    a468:	d037      	beq.n	a4da <uarte_nrfx_configure+0x13e>
    a46a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    a46e:	d1bd      	bne.n	a3ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    a470:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    a474:	e004      	b.n	a480 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a476:	4f1d      	ldr	r7, [pc, #116]	; (a4ec <uarte_nrfx_configure+0x150>)
    a478:	42bb      	cmp	r3, r7
    a47a:	d1b7      	bne.n	a3ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    a47c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    a480:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->stop
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
    a482:	4334      	orrs	r4, r6
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    a484:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    a488:	4322      	orrs	r2, r4
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    a48a:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    a48c:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    a490:	c903      	ldmia	r1, {r0, r1}
    a492:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    a496:	2000      	movs	r0, #0
}
    a498:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    a49a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    a49e:	e7ef      	b.n	a480 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    a4a0:	4b13      	ldr	r3, [pc, #76]	; (a4f0 <uarte_nrfx_configure+0x154>)
    a4a2:	e7ed      	b.n	a480 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    a4a4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    a4a8:	e7ea      	b.n	a480 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    a4aa:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    a4ae:	e7e7      	b.n	a480 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a4b0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    a4b4:	e7e4      	b.n	a480 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    a4b6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    a4ba:	e7e1      	b.n	a480 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    a4bc:	4b0d      	ldr	r3, [pc, #52]	; (a4f4 <uarte_nrfx_configure+0x158>)
    a4be:	e7df      	b.n	a480 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    a4c0:	4b0d      	ldr	r3, [pc, #52]	; (a4f8 <uarte_nrfx_configure+0x15c>)
    a4c2:	e7dd      	b.n	a480 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    a4c4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    a4c8:	e7da      	b.n	a480 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    a4ca:	4b0c      	ldr	r3, [pc, #48]	; (a4fc <uarte_nrfx_configure+0x160>)
    a4cc:	e7d8      	b.n	a480 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    a4ce:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    a4d2:	e7d5      	b.n	a480 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    a4d4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    a4d8:	e7d2      	b.n	a480 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    a4da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    a4de:	e7cf      	b.n	a480 <uarte_nrfx_configure+0xe4>
    a4e0:	0013b000 	.word	0x0013b000
    a4e4:	004ea000 	.word	0x004ea000
    a4e8:	0003d090 	.word	0x0003d090
    a4ec:	000f4240 	.word	0x000f4240
    a4f0:	00275000 	.word	0x00275000
    a4f4:	0075c000 	.word	0x0075c000
    a4f8:	003af000 	.word	0x003af000
    a4fc:	013a9000 	.word	0x013a9000

0000a500 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    a500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a504:	4607      	mov	r7, r0
    a506:	2200      	movs	r2, #0
    a508:	2101      	movs	r1, #1
    a50a:	2008      	movs	r0, #8
    a50c:	f7fe fe86 	bl	921c <z_arm_irq_priority_set>
    a510:	2008      	movs	r0, #8
    a512:	f7fe fe51 	bl	91b8 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    a516:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    a518:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    a51c:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
    a51e:	f8d8 4000 	ldr.w	r4, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    a522:	f8d8 900c 	ldr.w	r9, [r8, #12]
    a526:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    a52a:	4648      	mov	r0, r9
	data->dev = dev;
    a52c:	6037      	str	r7, [r6, #0]
    a52e:	aa01      	add	r2, sp, #4
    a530:	f004 ff1f 	bl	f372 <pinctrl_lookup_state>
	if (ret < 0) {
    a534:	1e05      	subs	r5, r0, #0
    a536:	db4e      	blt.n	a5d6 <uarte_0_init+0xd6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    a538:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    a53a:	f8d9 2000 	ldr.w	r2, [r9]
    a53e:	7919      	ldrb	r1, [r3, #4]
    a540:	6818      	ldr	r0, [r3, #0]
    a542:	f000 fb11 	bl	ab68 <pinctrl_configure_pins>
	if (err < 0) {
    a546:	1e05      	subs	r5, r0, #0
    a548:	db45      	blt.n	a5d6 <uarte_0_init+0xd6>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    a54a:	4638      	mov	r0, r7
    a54c:	1d31      	adds	r1, r6, #4
    a54e:	f7ff ff25 	bl	a39c <uarte_nrfx_configure>
	if (err) {
    a552:	4605      	mov	r5, r0
    a554:	2800      	cmp	r0, #0
    a556:	d13e      	bne.n	a5d6 <uarte_0_init+0xd6>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    a558:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    a55c:	0799      	lsls	r1, r3, #30
    a55e:	d512      	bpl.n	a586 <uarte_0_init+0x86>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    a560:	f106 0018 	add.w	r0, r6, #24
    a564:	f000 fefa 	bl	b35c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    a568:	4b1e      	ldr	r3, [pc, #120]	; (a5e4 <uarte_0_init+0xe4>)
    a56a:	4298      	cmp	r0, r3
    a56c:	d137      	bne.n	a5de <uarte_0_init+0xde>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    a56e:	7e32      	ldrb	r2, [r6, #24]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    a570:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    a574:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    a578:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    a57c:	2301      	movs	r3, #1
    a57e:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    a580:	4a19      	ldr	r2, [pc, #100]	; (a5e8 <uarte_0_init+0xe8>)
    a582:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a586:	2308      	movs	r3, #8
    a588:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    a58c:	f898 3008 	ldrb.w	r3, [r8, #8]
    a590:	b953      	cbnz	r3, a5a8 <uarte_0_init+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a592:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    a596:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    a59a:	6973      	ldr	r3, [r6, #20]
    a59c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    a5a0:	2301      	movs	r3, #1
    a5a2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a5a6:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    a5a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    a5ac:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    a5ae:	bf5c      	itt	pl
    a5b0:	f44f 7280 	movpl.w	r2, #256	; 0x100
    a5b4:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a5b8:	06db      	lsls	r3, r3, #27
    a5ba:	bf44      	itt	mi
    a5bc:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    a5c0:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a5c4:	6933      	ldr	r3, [r6, #16]
    a5c6:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a5ca:	2300      	movs	r3, #0
    a5cc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a5d0:	2301      	movs	r3, #1
    a5d2:	60a3      	str	r3, [r4, #8]
    a5d4:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    a5d6:	4628      	mov	r0, r5
    a5d8:	b003      	add	sp, #12
    a5da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    a5de:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    a5e2:	e7f8      	b.n	a5d6 <uarte_0_init+0xd6>
    a5e4:	0bad0000 	.word	0x0bad0000
    a5e8:	40017000 	.word	0x40017000

0000a5ec <uarte_nrfx_poll_out>:
{
    a5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5ee:	4604      	mov	r4, r0
    a5f0:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    a5f2:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    a5f4:	f005 f85a 	bl	f6ac <k_is_in_isr>
    a5f8:	b910      	cbnz	r0, a600 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    a5fa:	4b2d      	ldr	r3, [pc, #180]	; (a6b0 <uarte_nrfx_poll_out+0xc4>)
	if (isr_mode) {
    a5fc:	781b      	ldrb	r3, [r3, #0]
    a5fe:	b98b      	cbnz	r3, a624 <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
    a600:	f04f 0320 	mov.w	r3, #32
    a604:	f3ef 8611 	mrs	r6, BASEPRI
    a608:	f383 8812 	msr	BASEPRI_MAX, r3
    a60c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    a610:	6860      	ldr	r0, [r4, #4]
    a612:	4631      	mov	r1, r6
    a614:	f004 fe52 	bl	f2bc <is_tx_ready.isra.0>
    a618:	bb30      	cbnz	r0, a668 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    a61a:	f386 8811 	msr	BASEPRI, r6
    a61e:	f3bf 8f6f 	isb	sy
}
    a622:	e7ed      	b.n	a600 <uarte_nrfx_poll_out+0x14>
{
    a624:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    a626:	6860      	ldr	r0, [r4, #4]
    a628:	f004 fe48 	bl	f2bc <is_tx_ready.isra.0>
    a62c:	b970      	cbnz	r0, a64c <uarte_nrfx_poll_out+0x60>
    a62e:	2001      	movs	r0, #1
    a630:	f004 ff09 	bl	f446 <nrfx_busy_wait>
    a634:	3e01      	subs	r6, #1
    a636:	d1f6      	bne.n	a626 <uarte_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
    a638:	2100      	movs	r1, #0
    a63a:	2021      	movs	r0, #33	; 0x21
    a63c:	f003 fa1c 	bl	da78 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    a640:	e7f0      	b.n	a624 <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
    a642:	f386 8811 	msr	BASEPRI, r6
    a646:	f3bf 8f6f 	isb	sy
}
    a64a:	e7f5      	b.n	a638 <uarte_nrfx_poll_out+0x4c>
	__asm__ volatile(
    a64c:	f04f 0320 	mov.w	r3, #32
    a650:	f3ef 8611 	mrs	r6, BASEPRI
    a654:	f383 8812 	msr	BASEPRI_MAX, r3
    a658:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    a65c:	6860      	ldr	r0, [r4, #4]
    a65e:	4631      	mov	r1, r6
    a660:	f004 fe2c 	bl	f2bc <is_tx_ready.isra.0>
    a664:	2800      	cmp	r0, #0
    a666:	d0ec      	beq.n	a642 <uarte_nrfx_poll_out+0x56>
	*data->char_out = c;
    a668:	693b      	ldr	r3, [r7, #16]
    a66a:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
    a66c:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a66e:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    a670:	6813      	ldr	r3, [r2, #0]
    a672:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a676:	2001      	movs	r0, #1
    a678:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a67c:	2000      	movs	r0, #0
    a67e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    a682:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    a686:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a68a:	6852      	ldr	r2, [r2, #4]
    a68c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    a690:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a692:	bf41      	itttt	mi
    a694:	2208      	movmi	r2, #8
    a696:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    a69a:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    a69e:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a6a2:	2201      	movs	r2, #1
    a6a4:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    a6a6:	f381 8811 	msr	BASEPRI, r1
    a6aa:	f3bf 8f6f 	isb	sy
}
    a6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a6b0:	2000d2c4 	.word	0x2000d2c4

0000a6b4 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    a6b4:	2301      	movs	r3, #1
    a6b6:	4083      	lsls	r3, r0
{
    a6b8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    a6ba:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a6bc:	4a0c      	ldr	r2, [pc, #48]	; (a6f0 <compare_int_lock+0x3c>)
    a6be:	e8d2 1fef 	ldaex	r1, [r2]
    a6c2:	ea01 0c04 	and.w	ip, r1, r4
    a6c6:	e8c2 cfee 	stlex	lr, ip, [r2]
    a6ca:	f1be 0f00 	cmp.w	lr, #0
    a6ce:	d1f6      	bne.n	a6be <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a6d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a6d4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    a6d8:	4a06      	ldr	r2, [pc, #24]	; (a6f4 <compare_int_lock+0x40>)
    a6da:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    a6de:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a6e2:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    a6e6:	420b      	tst	r3, r1
}
    a6e8:	bf14      	ite	ne
    a6ea:	2001      	movne	r0, #1
    a6ec:	2000      	moveq	r0, #0
    a6ee:	bd10      	pop	{r4, pc}
    a6f0:	2000c97c 	.word	0x2000c97c
    a6f4:	40015000 	.word	0x40015000

0000a6f8 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    a6f8:	4919      	ldr	r1, [pc, #100]	; (a760 <sys_clock_timeout_handler+0x68>)
{
    a6fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6fc:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    a6fe:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    a702:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    a704:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    a708:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    a70c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    a70e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    a712:	d222      	bcs.n	a75a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    a714:	4b13      	ldr	r3, [pc, #76]	; (a764 <sys_clock_timeout_handler+0x6c>)
    a716:	681b      	ldr	r3, [r3, #0]
    a718:	0a1a      	lsrs	r2, r3, #8
    a71a:	061b      	lsls	r3, r3, #24
    a71c:	195e      	adds	r6, r3, r5
    a71e:	4b12      	ldr	r3, [pc, #72]	; (a768 <sys_clock_timeout_handler+0x70>)
    a720:	f142 0700 	adc.w	r7, r2, #0
    a724:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    a728:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    a72a:	f003 fb15 	bl	dd58 <sys_clock_announce>
    return p_reg->CC[ch];
    a72e:	00a3      	lsls	r3, r4, #2
    a730:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a734:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
    a738:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    a73c:	42aa      	cmp	r2, r5
    a73e:	d10b      	bne.n	a758 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    a740:	b91e      	cbnz	r6, a74a <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    a742:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    a746:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a74a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    a74e:	4b07      	ldr	r3, [pc, #28]	; (a76c <sys_clock_timeout_handler+0x74>)
    a750:	fa00 f404 	lsl.w	r4, r0, r4
    a754:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    a758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    a75a:	2600      	movs	r6, #0
    a75c:	e7e5      	b.n	a72a <sys_clock_timeout_handler+0x32>
    a75e:	bf00      	nop
    a760:	2000c6e0 	.word	0x2000c6e0
    a764:	2000c980 	.word	0x2000c980
    a768:	2000c6c8 	.word	0x2000c6c8
    a76c:	40015000 	.word	0x40015000

0000a770 <compare_int_unlock>:
	if (key) {
    a770:	b1e1      	cbz	r1, a7ac <compare_int_unlock+0x3c>
		atomic_or(&int_mask, BIT(chan));
    a772:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a774:	4a0e      	ldr	r2, [pc, #56]	; (a7b0 <compare_int_unlock+0x40>)
    a776:	4083      	lsls	r3, r0
    a778:	e8d2 1fef 	ldaex	r1, [r2]
    a77c:	4319      	orrs	r1, r3
    a77e:	e8c2 1fec 	stlex	ip, r1, [r2]
    a782:	f1bc 0f00 	cmp.w	ip, #0
    a786:	d1f7      	bne.n	a778 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    a78c:	4a09      	ldr	r2, [pc, #36]	; (a7b4 <compare_int_unlock+0x44>)
    a78e:	4083      	lsls	r3, r0
    a790:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a794:	4b08      	ldr	r3, [pc, #32]	; (a7b8 <compare_int_unlock+0x48>)
    a796:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    a79a:	fa23 f000 	lsr.w	r0, r3, r0
    a79e:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a7a0:	bf42      	ittt	mi
    a7a2:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    a7a6:	4b05      	ldrmi	r3, [pc, #20]	; (a7bc <compare_int_unlock+0x4c>)
    a7a8:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    a7ac:	4770      	bx	lr
    a7ae:	bf00      	nop
    a7b0:	2000c97c 	.word	0x2000c97c
    a7b4:	40015000 	.word	0x40015000
    a7b8:	2000c978 	.word	0x2000c978
    a7bc:	e000e100 	.word	0xe000e100

0000a7c0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    a7c0:	4b0d      	ldr	r3, [pc, #52]	; (a7f8 <z_nrf_rtc_timer_read+0x38>)
    a7c2:	6818      	ldr	r0, [r3, #0]
    a7c4:	0a01      	lsrs	r1, r0, #8
    a7c6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    a7c8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    a7cc:	4b0b      	ldr	r3, [pc, #44]	; (a7fc <z_nrf_rtc_timer_read+0x3c>)
    a7ce:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    a7d2:	1818      	adds	r0, r3, r0
    a7d4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    a7d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    a7dc:	d20a      	bcs.n	a7f4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    a7de:	4b08      	ldr	r3, [pc, #32]	; (a800 <z_nrf_rtc_timer_read+0x40>)
    a7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    a7e4:	4290      	cmp	r0, r2
    a7e6:	eb71 0303 	sbcs.w	r3, r1, r3
    a7ea:	d203      	bcs.n	a7f4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    a7ec:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    a7f0:	f141 0100 	adc.w	r1, r1, #0
}
    a7f4:	4770      	bx	lr
    a7f6:	bf00      	nop
    a7f8:	2000c980 	.word	0x2000c980
    a7fc:	40015000 	.word	0x40015000
    a800:	2000c6c8 	.word	0x2000c6c8

0000a804 <compare_set>:
{
    a804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a808:	b085      	sub	sp, #20
    a80a:	4616      	mov	r6, r2
    a80c:	4698      	mov	r8, r3
    a80e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    a810:	f7ff ff50 	bl	a6b4 <compare_int_lock>
    a814:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    a816:	f7ff ffd3 	bl	a7c0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    a81a:	42b0      	cmp	r0, r6
    a81c:	eb71 0308 	sbcs.w	r3, r1, r8
    a820:	d276      	bcs.n	a910 <compare_set+0x10c>
		if (target_time - curr_time > COUNTER_SPAN) {
    a822:	4b43      	ldr	r3, [pc, #268]	; (a930 <compare_set+0x12c>)
    a824:	1a30      	subs	r0, r6, r0
    a826:	eb68 0101 	sbc.w	r1, r8, r1
    a82a:	4298      	cmp	r0, r3
    a82c:	f171 0300 	sbcs.w	r3, r1, #0
    a830:	d27b      	bcs.n	a92a <compare_set+0x126>
		if (target_time != cc_data[chan].target_time) {
    a832:	4b40      	ldr	r3, [pc, #256]	; (a934 <compare_set+0x130>)
    a834:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    a838:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    a83c:	45d8      	cmp	r8, fp
    a83e:	bf08      	it	eq
    a840:	4556      	cmpeq	r6, sl
    a842:	d050      	beq.n	a8e6 <compare_set+0xe2>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    a848:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    a84c:	4614      	mov	r4, r2
    a84e:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    a852:	f105 0750 	add.w	r7, r5, #80	; 0x50
    a856:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
    a85a:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a85c:	40ab      	lsls	r3, r5
    a85e:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a862:	b2bf      	uxth	r7, r7
    a864:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
    a868:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    a86a:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    a86e:	4b32      	ldr	r3, [pc, #200]	; (a938 <compare_set+0x134>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a870:	f507 37a8 	add.w	r7, r7, #86016	; 0x15000
     return p_reg->COUNTER;
    a874:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    a878:	1a40      	subs	r0, r0, r1
    a87a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    a87e:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    a882:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    a884:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    a888:	d107      	bne.n	a89a <compare_set+0x96>
    a88a:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    a88e:	2013      	movs	r0, #19
    a890:	f005 f866 	bl	f960 <z_impl_k_busy_wait>
    a894:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    a898:	4b27      	ldr	r3, [pc, #156]	; (a938 <compare_set+0x134>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    a89a:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    a89e:	eba4 000c 	sub.w	r0, r4, ip
    a8a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    a8a6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a8aa:	bf88      	it	hi
    a8ac:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a8ae:	2000      	movs	r0, #0
    a8b0:	6038      	str	r0, [r7, #0]
    a8b2:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    a8b4:	9801      	ldr	r0, [sp, #4]
    a8b6:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    a8ba:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    a8be:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    a8c2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    a8c6:	4281      	cmp	r1, r0
    a8c8:	d006      	beq.n	a8d8 <compare_set+0xd4>
	return (a - b) & COUNTER_MAX;
    a8ca:	1a20      	subs	r0, r4, r0
    a8cc:	3802      	subs	r0, #2
    a8ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    a8d2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a8d6:	d819      	bhi.n	a90c <compare_set+0x108>
	return (a - b) & COUNTER_MAX;
    a8d8:	1aa4      	subs	r4, r4, r2
    a8da:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    a8de:	eb14 0a06 	adds.w	sl, r4, r6
    a8e2:	f148 0b00 	adc.w	fp, r8, #0
	return ret;
    a8e6:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
    a8e8:	4912      	ldr	r1, [pc, #72]	; (a934 <compare_set+0x130>)
	cc_data[chan].callback = handler;
    a8ea:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    a8ec:	012b      	lsls	r3, r5, #4
    a8ee:	eb01 1205 	add.w	r2, r1, r5, lsl #4
	cc_data[chan].callback = handler;
    a8f2:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    a8f4:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].user_context = user_data;
    a8f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a8fa:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    a8fc:	4628      	mov	r0, r5
    a8fe:	9900      	ldr	r1, [sp, #0]
    a900:	f7ff ff36 	bl	a770 <compare_int_unlock>
}
    a904:	4620      	mov	r0, r4
    a906:	b005      	add	sp, #20
    a908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a90c:	4620      	mov	r0, r4
    a90e:	e7b1      	b.n	a874 <compare_set+0x70>
		atomic_or(&force_isr_mask, BIT(chan));
    a910:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a912:	4a0a      	ldr	r2, [pc, #40]	; (a93c <compare_set+0x138>)
    a914:	40ab      	lsls	r3, r5
    a916:	e8d2 1fef 	ldaex	r1, [r2]
    a91a:	4319      	orrs	r1, r3
    a91c:	e8c2 1fe0 	stlex	r0, r1, [r2]
    a920:	2800      	cmp	r0, #0
    a922:	d1f8      	bne.n	a916 <compare_set+0x112>
    a924:	46b2      	mov	sl, r6
    a926:	46c3      	mov	fp, r8
    a928:	e7dd      	b.n	a8e6 <compare_set+0xe2>
			return -EINVAL;
    a92a:	f06f 0415 	mvn.w	r4, #21
    a92e:	e7e5      	b.n	a8fc <compare_set+0xf8>
    a930:	01000001 	.word	0x01000001
    a934:	2000c6d0 	.word	0x2000c6d0
    a938:	40015000 	.word	0x40015000
    a93c:	2000c978 	.word	0x2000c978

0000a940 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    a940:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    a942:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    a944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a94c:	4d16      	ldr	r5, [pc, #88]	; (a9a8 <sys_clock_driver_init+0x68>)
    a94e:	4b17      	ldr	r3, [pc, #92]	; (a9ac <sys_clock_driver_init+0x6c>)
    a950:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    a954:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    a958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    a95c:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a95e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    a962:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    a966:	4b12      	ldr	r3, [pc, #72]	; (a9b0 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    a968:	2101      	movs	r1, #1
    a96a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    a96e:	2015      	movs	r0, #21
    a970:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    a974:	4622      	mov	r2, r4
    a976:	f7fe fc51 	bl	921c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    a97a:	2015      	movs	r0, #21
    a97c:	f7fe fc1c 	bl	91b8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    a980:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    a982:	4a0c      	ldr	r2, [pc, #48]	; (a9b4 <sys_clock_driver_init+0x74>)
    a984:	60ab      	str	r3, [r5, #8]
    a986:	602b      	str	r3, [r5, #0]
    a988:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    a98a:	4b0b      	ldr	r3, [pc, #44]	; (a9b8 <sys_clock_driver_init+0x78>)
    a98c:	4a0b      	ldr	r2, [pc, #44]	; (a9bc <sys_clock_driver_init+0x7c>)
    a98e:	9300      	str	r3, [sp, #0]
    a990:	4620      	mov	r0, r4
    a992:	2300      	movs	r3, #0
    a994:	9401      	str	r4, [sp, #4]
    a996:	f7ff ff35 	bl	a804 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    a99a:	4630      	mov	r0, r6
    a99c:	f7ff f964 	bl	9c68 <z_nrf_clock_control_lf_on>

	return 0;
}
    a9a0:	4620      	mov	r0, r4
    a9a2:	b002      	add	sp, #8
    a9a4:	bd70      	pop	{r4, r5, r6, pc}
    a9a6:	bf00      	nop
    a9a8:	40015000 	.word	0x40015000
    a9ac:	2000c6d0 	.word	0x2000c6d0
    a9b0:	e000e100 	.word	0xe000e100
    a9b4:	2000c97c 	.word	0x2000c97c
    a9b8:	0000a6f9 	.word	0x0000a6f9
    a9bc:	007fffff 	.word	0x007fffff

0000a9c0 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
    a9c0:	4b35      	ldr	r3, [pc, #212]	; (aa98 <rtc_nrf_isr+0xd8>)
{
    a9c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a9c6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    a9ca:	0791      	lsls	r1, r2, #30
    a9cc:	d50b      	bpl.n	a9e6 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a9ce:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    a9d2:	b142      	cbz	r2, a9e6 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a9d4:	2200      	movs	r2, #0
    a9d6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    a9da:	4a30      	ldr	r2, [pc, #192]	; (aa9c <rtc_nrf_isr+0xdc>)
    a9dc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    a9e0:	6813      	ldr	r3, [r2, #0]
    a9e2:	3301      	adds	r3, #1
    a9e4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    a9e6:	f04f 0320 	mov.w	r3, #32
    a9ea:	f3ef 8111 	mrs	r1, BASEPRI
    a9ee:	f383 8812 	msr	BASEPRI_MAX, r3
    a9f2:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    a9f6:	4b28      	ldr	r3, [pc, #160]	; (aa98 <rtc_nrf_isr+0xd8>)
    a9f8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    a9fc:	03d2      	lsls	r2, r2, #15
    a9fe:	d50e      	bpl.n	aa1e <rtc_nrf_isr+0x5e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    aa00:	4a27      	ldr	r2, [pc, #156]	; (aaa0 <rtc_nrf_isr+0xe0>)
    aa02:	e8d2 0fef 	ldaex	r0, [r2]
    aa06:	f020 0401 	bic.w	r4, r0, #1
    aa0a:	e8c2 4fe5 	stlex	r5, r4, [r2]
    aa0e:	2d00      	cmp	r5, #0
    aa10:	d1f7      	bne.n	aa02 <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    aa12:	2800      	cmp	r0, #0
    aa14:	d137      	bne.n	aa86 <rtc_nrf_isr+0xc6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    aa16:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
		if (result) {
    aa1a:	2a00      	cmp	r2, #0
    aa1c:	d133      	bne.n	aa86 <rtc_nrf_isr+0xc6>
{
    aa1e:	2300      	movs	r3, #0
	__asm__ volatile(
    aa20:	f381 8811 	msr	BASEPRI, r1
    aa24:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    aa28:	b353      	cbz	r3, aa80 <rtc_nrf_isr+0xc0>
		curr_time = z_nrf_rtc_timer_read();
    aa2a:	f7ff fec9 	bl	a7c0 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    aa2e:	f04f 0320 	mov.w	r3, #32
    aa32:	f3ef 8711 	mrs	r7, BASEPRI
    aa36:	f383 8812 	msr	BASEPRI_MAX, r3
    aa3a:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    aa3e:	4b19      	ldr	r3, [pc, #100]	; (aaa4 <rtc_nrf_isr+0xe4>)
    aa40:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
		if (curr_time >= expire_time) {
    aa44:	42a0      	cmp	r0, r4
    aa46:	eb71 0205 	sbcs.w	r2, r1, r5
    aa4a:	f04f 0200 	mov.w	r2, #0
    aa4e:	d321      	bcc.n	aa94 <rtc_nrf_isr+0xd4>
			user_context = cc_data[chan].user_context;
    aa50:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    aa54:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    aa58:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
    aa5c:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    aa5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    aa62:	e9c3 8902 	strd	r8, r9, [r3, #8]
    aa66:	4b0c      	ldr	r3, [pc, #48]	; (aa98 <rtc_nrf_isr+0xd8>)
    aa68:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
    aa6c:	f387 8811 	msr	BASEPRI, r7
    aa70:	f3bf 8f6f 	isb	sy
		if (handler) {
    aa74:	b121      	cbz	r1, aa80 <rtc_nrf_isr+0xc0>
			handler(chan, expire_time, user_context);
    aa76:	4622      	mov	r2, r4
    aa78:	462b      	mov	r3, r5
    aa7a:	2000      	movs	r0, #0
    aa7c:	9600      	str	r6, [sp, #0]
    aa7e:	4788      	blx	r1
}
    aa80:	b003      	add	sp, #12
    aa82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    aa86:	2200      	movs	r2, #0
    aa88:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    aa8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    aa90:	2301      	movs	r3, #1
}
    aa92:	e7c5      	b.n	aa20 <rtc_nrf_isr+0x60>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    aa94:	4611      	mov	r1, r2
    aa96:	e7e9      	b.n	aa6c <rtc_nrf_isr+0xac>
    aa98:	40015000 	.word	0x40015000
    aa9c:	2000c980 	.word	0x2000c980
    aaa0:	2000c978 	.word	0x2000c978
    aaa4:	2000c6d0 	.word	0x2000c6d0

0000aaa8 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    aaa8:	1c43      	adds	r3, r0, #1
{
    aaaa:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    aaac:	d020      	beq.n	aaf0 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    aaae:	2801      	cmp	r0, #1
    aab0:	dd20      	ble.n	aaf4 <sys_clock_set_timeout+0x4c>
    aab2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    aab6:	da1f      	bge.n	aaf8 <sys_clock_set_timeout+0x50>
    aab8:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    aaba:	f7ff fe81 	bl	a7c0 <z_nrf_rtc_timer_read>
    aabe:	4b0f      	ldr	r3, [pc, #60]	; (aafc <sys_clock_set_timeout+0x54>)
    aac0:	e9d3 1300 	ldrd	r1, r3, [r3]
    aac4:	1a40      	subs	r0, r0, r1
		ticks = 0;
    aac6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    aaca:	bf28      	it	cs
    aacc:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    aace:	3001      	adds	r0, #1
    aad0:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    aad2:	480b      	ldr	r0, [pc, #44]	; (ab00 <sys_clock_set_timeout+0x58>)
    aad4:	4282      	cmp	r2, r0
    aad6:	bf28      	it	cs
    aad8:	4602      	movcs	r2, r0
    aada:	2000      	movs	r0, #0
    aadc:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    aade:	4909      	ldr	r1, [pc, #36]	; (ab04 <sys_clock_set_timeout+0x5c>)
    aae0:	9001      	str	r0, [sp, #4]
    aae2:	9100      	str	r1, [sp, #0]
    aae4:	f143 0300 	adc.w	r3, r3, #0
    aae8:	f7ff fe8c 	bl	a804 <compare_set>
}
    aaec:	b002      	add	sp, #8
    aaee:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    aaf0:	4803      	ldr	r0, [pc, #12]	; (ab00 <sys_clock_set_timeout+0x58>)
    aaf2:	e7e1      	b.n	aab8 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    aaf4:	2400      	movs	r4, #0
    aaf6:	e7e0      	b.n	aaba <sys_clock_set_timeout+0x12>
    aaf8:	4c01      	ldr	r4, [pc, #4]	; (ab00 <sys_clock_set_timeout+0x58>)
    aafa:	e7de      	b.n	aaba <sys_clock_set_timeout+0x12>
    aafc:	2000c6e0 	.word	0x2000c6e0
    ab00:	007fffff 	.word	0x007fffff
    ab04:	0000a6f9 	.word	0x0000a6f9

0000ab08 <sys_clock_elapsed>:
{
    ab08:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    ab0a:	f7ff fe59 	bl	a7c0 <z_nrf_rtc_timer_read>
    ab0e:	4b02      	ldr	r3, [pc, #8]	; (ab18 <sys_clock_elapsed+0x10>)
    ab10:	681b      	ldr	r3, [r3, #0]
}
    ab12:	1ac0      	subs	r0, r0, r3
    ab14:	bd08      	pop	{r3, pc}
    ab16:	bf00      	nop
    ab18:	2000c6e0 	.word	0x2000c6e0

0000ab1c <nrf_gpio_pin_write>:
    *p_pin = pin_number & 0x1F;
    ab1c:	f000 031f 	and.w	r3, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    ab20:	2001      	movs	r0, #1
    ab22:	4098      	lsls	r0, r3
    ab24:	4b02      	ldr	r3, [pc, #8]	; (ab30 <nrf_gpio_pin_write+0x14>)
    if (value == 0)
    ab26:	b909      	cbnz	r1, ab2c <nrf_gpio_pin_write+0x10>
    p_reg->OUTCLR = clr_mask;
    ab28:	60d8      	str	r0, [r3, #12]
}
    ab2a:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
    ab2c:	6098      	str	r0, [r3, #8]
}
    ab2e:	4770      	bx	lr
    ab30:	40842500 	.word	0x40842500

0000ab34 <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
    ab34:	b530      	push	{r4, r5, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    ab36:	f400 5480 	and.w	r4, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    ab3a:	2c00      	cmp	r4, #0
    ab3c:	bf16      	itet	ne
    ab3e:	2100      	movne	r1, #0
    ab40:	4615      	moveq	r5, r2
    ab42:	2501      	movne	r5, #1
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    ab44:	021b      	lsls	r3, r3, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    ab46:	f3c0 1281 	ubfx	r2, r0, #6, #2
    ab4a:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
    *p_pin = pin_number & 0x1F;
    ab4e:	f000 041f 	and.w	r4, r0, #31
    reg->PIN_CNF[pin_number] = cnf;
    ab52:	4b04      	ldr	r3, [pc, #16]	; (ab64 <nrf_pin_configure+0x30>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    ab54:	430a      	orrs	r2, r1
    ab56:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    ab5a:	3480      	adds	r4, #128	; 0x80
    ab5c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
		     NRF_GPIO_PIN_NOSENSE);
}
    ab60:	bd30      	pop	{r4, r5, pc}
    ab62:	bf00      	nop
    ab64:	40842500 	.word	0x40842500

0000ab68 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    ab68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ab6c:	4616      	mov	r6, r2
    ab6e:	4605      	mov	r5, r0
			break;
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    ab70:	2701      	movs	r7, #1
    p_reg->OUTCLR = clr_mask;
    ab72:	f8df 8110 	ldr.w	r8, [pc, #272]	; ac84 <pinctrl_configure_pins+0x11c>
    ab76:	eb00 0981 	add.w	r9, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    ab7a:	454d      	cmp	r5, r9
    ab7c:	d102      	bne.n	ab84 <pinctrl_configure_pins+0x1c>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    ab7e:	2000      	movs	r0, #0
}
    ab80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    ab84:	682c      	ldr	r4, [r5, #0]
		switch (NRF_GET_FUN(pins[i])) {
    ab86:	0c23      	lsrs	r3, r4, #16
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    ab88:	f3c4 2203 	ubfx	r2, r4, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
    ab8c:	2b19      	cmp	r3, #25
    ab8e:	d876      	bhi.n	ac7e <pinctrl_configure_pins+0x116>
    ab90:	e8df f003 	tbb	[pc, r3]
    ab94:	28231b0d 	.word	0x28231b0d
    ab98:	7528402d 	.word	0x7528402d
    ab9c:	4c757575 	.word	0x4c757575
    aba0:	75757555 	.word	0x75757555
    aba4:	75757575 	.word	0x75757575
    aba8:	665a7575 	.word	0x665a7575
    abac:	706b      	.short	0x706b
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    abae:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    abb2:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    abb6:	682b      	ldr	r3, [r5, #0]
    abb8:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    abbc:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
    abc0:	f8c8 3008 	str.w	r3, [r8, #8]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    abc4:	4613      	mov	r3, r2
    abc6:	2201      	movs	r2, #1
    abc8:	e005      	b.n	abd6 <pinctrl_configure_pins+0x6e>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    abca:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    abce:	f8c6 4514 	str.w	r4, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    abd2:	4613      	mov	r3, r2
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    abd4:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    abd6:	4611      	mov	r1, r2
    abd8:	e017      	b.n	ac0a <pinctrl_configure_pins+0xa2>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    abda:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    abde:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
    abe2:	e7e8      	b.n	abb6 <pinctrl_configure_pins+0x4e>
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    abe4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    abe8:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
    abec:	e7f1      	b.n	abd2 <pinctrl_configure_pins+0x6a>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    abee:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    abf2:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    abf6:	682b      	ldr	r3, [r5, #0]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    abf8:	2101      	movs	r1, #1
    abfa:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    abfe:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    ac02:	f8c8 300c 	str.w	r3, [r8, #12]
    ac06:	4613      	mov	r3, r2
    ac08:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    ac0a:	6828      	ldr	r0, [r5, #0]
    ac0c:	f7ff ff92 	bl	ab34 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    ac10:	3504      	adds	r5, #4
    ac12:	e7b2      	b.n	ab7a <pinctrl_configure_pins+0x12>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    ac14:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    ac18:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    ac1c:	682b      	ldr	r3, [r5, #0]
    ac1e:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    ac22:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    ac26:	f8c8 300c 	str.w	r3, [r8, #12]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    ac2a:	e7cb      	b.n	abc4 <pinctrl_configure_pins+0x5c>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    ac2c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    ac30:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
				drive = NRF_DRIVE_S0D1;
    ac34:	2a00      	cmp	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    ac36:	bf14      	ite	ne
    ac38:	4613      	movne	r3, r2
    ac3a:	2306      	moveq	r3, #6
    ac3c:	e7ca      	b.n	abd4 <pinctrl_configure_pins+0x6c>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    ac3e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    ac42:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    ac46:	e7f5      	b.n	ac34 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    ac48:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    ac4c:	f8c6 4560 	str.w	r4, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    ac50:	6828      	ldr	r0, [r5, #0]
    ac52:	f3c0 3140 	ubfx	r1, r0, #13, #1
    ac56:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    ac5a:	f7ff ff5f 	bl	ab1c <nrf_gpio_pin_write>
    ac5e:	e7b1      	b.n	abc4 <pinctrl_configure_pins+0x5c>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    ac60:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    ac64:	f8c6 4564 	str.w	r4, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    ac68:	e7f2      	b.n	ac50 <pinctrl_configure_pins+0xe8>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    ac6a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    ac6e:	f8c6 4568 	str.w	r4, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    ac72:	e7ed      	b.n	ac50 <pinctrl_configure_pins+0xe8>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    ac74:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    ac78:	f8c6 456c 	str.w	r4, [r6, #1388]	; 0x56c
    ac7c:	e7e8      	b.n	ac50 <pinctrl_configure_pins+0xe8>
		switch (NRF_GET_FUN(pins[i])) {
    ac7e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    ac82:	e77d      	b.n	ab80 <pinctrl_configure_pins+0x18>
    ac84:	40842500 	.word	0x40842500

0000ac88 <_nrf_modem_lib_init>:
			nrf_modem_at_err(err), nrf_modem_at_err_type(err));
	}
}

static int _nrf_modem_lib_init(const struct device *unused)
{
    ac88:	b570      	push	{r4, r5, r6, lr}
	int err;
	(void) err;

	if (!first_time_init) {
    ac8a:	4d1b      	ldr	r5, [pc, #108]	; (acf8 <_nrf_modem_lib_init+0x70>)
    ac8c:	4c1b      	ldr	r4, [pc, #108]	; (acfc <_nrf_modem_lib_init+0x74>)
    ac8e:	782b      	ldrb	r3, [r5, #0]
    ac90:	b933      	cbnz	r3, aca0 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
    ac92:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
    ac96:	481a      	ldr	r0, [pc, #104]	; (ad00 <_nrf_modem_lib_init+0x78>)
    ac98:	f004 fd22 	bl	f6e0 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
    ac9c:	2301      	movs	r3, #1
    ac9e:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
    aca0:	2200      	movs	r2, #0
    aca2:	202a      	movs	r0, #42	; 0x2a
    aca4:	4611      	mov	r1, r2
    aca6:	f7fe fab9 	bl	921c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
    acaa:	2100      	movs	r1, #0
    acac:	4815      	ldr	r0, [pc, #84]	; (ad04 <_nrf_modem_lib_init+0x7c>)
    acae:	f002 f8bd 	bl	ce2c <nrf_modem_init>
    acb2:	4d15      	ldr	r5, [pc, #84]	; (ad08 <_nrf_modem_lib_init+0x80>)
    acb4:	6028      	str	r0, [r5, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    acb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    acba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    acbe:	4810      	ldr	r0, [pc, #64]	; (ad00 <_nrf_modem_lib_init+0x78>)
    acc0:	f002 fb00 	bl	d2c4 <z_impl_k_mutex_lock>
	return list->head;
    acc4:	6820      	ldr	r0, [r4, #0]
	if (IS_ENABLED(CONFIG_NRF_MODEM_LIB_LOG_FW_VERSION_UUID)) {
		log_fw_version_uuid();
	}

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
    acc6:	b180      	cbz	r0, acea <_nrf_modem_lib_init+0x62>
	return node->next;
    acc8:	6804      	ldr	r4, [r0, #0]
	z_impl_k_sem_give(sem);
    acca:	3004      	adds	r0, #4
    accc:	f002 fbae 	bl	d42c <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
    acd0:	b15c      	cbz	r4, acea <_nrf_modem_lib_init+0x62>
    acd2:	4620      	mov	r0, r4
    acd4:	6824      	ldr	r4, [r4, #0]
    acd6:	e7f8      	b.n	acca <_nrf_modem_lib_init+0x42>
	k_mutex_unlock(&slist_mutex);

	LOG_DBG("Modem library has initialized, ret %d", init_ret);
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
		LOG_DBG("Modem init callback: %p", e->callback);
		e->callback(init_ret, e->context);
    acd8:	e9d4 3100 	ldrd	r3, r1, [r4]
    acdc:	6828      	ldr	r0, [r5, #0]
    acde:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
    ace0:	3408      	adds	r4, #8
    ace2:	42b4      	cmp	r4, r6
    ace4:	d3f8      	bcc.n	acd8 <_nrf_modem_lib_init+0x50>
		 */
		return 0;
	}

	return init_ret;
}
    ace6:	2000      	movs	r0, #0
    ace8:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_mutex_unlock(mutex);
    acea:	4805      	ldr	r0, [pc, #20]	; (ad00 <_nrf_modem_lib_init+0x78>)
    acec:	f002 fb62 	bl	d3b4 <z_impl_k_mutex_unlock>
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
    acf0:	4c06      	ldr	r4, [pc, #24]	; (ad0c <_nrf_modem_lib_init+0x84>)
    acf2:	4e07      	ldr	r6, [pc, #28]	; (ad10 <_nrf_modem_lib_init+0x88>)
    acf4:	e7f5      	b.n	ace2 <_nrf_modem_lib_init+0x5a>
    acf6:	bf00      	nop
    acf8:	2000ceb3 	.word	0x2000ceb3
    acfc:	2000c988 	.word	0x2000c988
    ad00:	2000c990 	.word	0x2000c990
    ad04:	000102a0 	.word	0x000102a0
    ad08:	2000c984 	.word	0x2000c984
    ad0c:	000107b4 	.word	0x000107b4
    ad10:	000107bc 	.word	0x000107bc

0000ad14 <thread_monitor_entry_get>:
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
    ad14:	4b10      	ldr	r3, [pc, #64]	; (ad58 <thread_monitor_entry_get+0x44>)
{
    ad16:	b5f0      	push	{r4, r5, r6, r7, lr}
		entry_age = rpc_event_cnt - entry->cnt;
    ad18:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
    ad1a:	4b10      	ldr	r3, [pc, #64]	; (ad5c <thread_monitor_entry_get+0x48>)
{
    ad1c:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
    ad1e:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
    ad20:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
    ad22:	4618      	mov	r0, r3
    ad24:	461f      	mov	r7, r3
		if (entry->id == id) {
    ad26:	6804      	ldr	r4, [r0, #0]
    ad28:	428c      	cmp	r4, r1
    ad2a:	d011      	beq.n	ad50 <thread_monitor_entry_get+0x3c>
		} else if (entry->id == 0) {
    ad2c:	b18c      	cbz	r4, ad52 <thread_monitor_entry_get+0x3e>
		entry_age = rpc_event_cnt - entry->cnt;
    ad2e:	6844      	ldr	r4, [r0, #4]
    ad30:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
    ad32:	42b4      	cmp	r4, r6
    ad34:	bfc8      	it	gt
    ad36:	4603      	movgt	r3, r0
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    ad38:	f100 0008 	add.w	r0, r0, #8
		if (entry_age > oldest_entry_age) {
    ad3c:	bfc8      	it	gt
    ad3e:	4626      	movgt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    ad40:	42b8      	cmp	r0, r7
    ad42:	d301      	bcc.n	ad48 <thread_monitor_entry_get+0x34>
    ad44:	3d01      	subs	r5, #1
    ad46:	d1ee      	bne.n	ad26 <thread_monitor_entry_get+0x12>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
    ad48:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
    ad4a:	3a01      	subs	r2, #1
	new_entry->id = id;
    ad4c:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
    ad4e:	605a      	str	r2, [r3, #4]
}
    ad50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ad52:	4603      	mov	r3, r0
    ad54:	e7f8      	b.n	ad48 <thread_monitor_entry_get+0x34>
    ad56:	bf00      	nop
    ad58:	2000ca44 	.word	0x2000ca44
    ad5c:	2000ca50 	.word	0x2000ca50

0000ad60 <on_init>:
	list->head = NULL;
    ad60:	2000      	movs	r0, #0
    ad62:	4b05      	ldr	r3, [pc, #20]	; (ad78 <on_init+0x18>)
	list->tail = NULL;
    ad64:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ad68:	4b04      	ldr	r3, [pc, #16]	; (ad7c <on_init+0x1c>)
    ad6a:	e8d3 2fef 	ldaex	r2, [r3]
    ad6e:	e8c3 0fe1 	stlex	r1, r0, [r3]
    ad72:	2900      	cmp	r1, #0
    ad74:	d1f9      	bne.n	ad6a <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
    ad76:	4770      	bx	lr
    ad78:	2000ca48 	.word	0x2000ca48
    ad7c:	2000ca44 	.word	0x2000ca44

0000ad80 <nrf_modem_os_timedwait>:
{
    ad80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ad84:	b088      	sub	sp, #32
    ad86:	460c      	mov	r4, r1
	if (!nrf_modem_is_initialized()) {
    ad88:	f004 fbf4 	bl	f574 <nrf_modem_is_initialized>
    ad8c:	4681      	mov	r9, r0
    ad8e:	b920      	cbnz	r0, ad9a <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
    ad90:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
    ad94:	b008      	add	sp, #32
    ad96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
    ad9a:	f004 fddf 	bl	f95c <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
    ad9e:	6823      	ldr	r3, [r4, #0]
    ada0:	4605      	mov	r5, r0
    ada2:	2b00      	cmp	r3, #0
    ada4:	460f      	mov	r7, r1
    ada6:	d104      	bne.n	adb2 <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
    ada8:	f002 fdde 	bl	d968 <z_impl_k_yield>
		return -NRF_EAGAIN;
    adac:	f06f 000a 	mvn.w	r0, #10
    adb0:	e7f0      	b.n	ad94 <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
    adb2:	bfbc      	itt	lt
    adb4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    adb8:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    adba:	2201      	movs	r2, #1
    adbc:	2100      	movs	r1, #0
    adbe:	a802      	add	r0, sp, #8
    adc0:	f004 fc95 	bl	f6ee <z_impl_k_sem_init>
    adc4:	ae01      	add	r6, sp, #4
	__asm__ volatile(
    adc6:	f04f 0320 	mov.w	r3, #32
    adca:	f3ef 8a11 	mrs	sl, BASEPRI
    adce:	f383 8812 	msr	BASEPRI_MAX, r3
    add2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    add6:	f002 fe69 	bl	daac <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    adda:	f7ff ff9b 	bl	ad14 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
    adde:	f8df 811c 	ldr.w	r8, [pc, #284]	; aefc <nrf_modem_os_timedwait+0x17c>
    ade2:	6843      	ldr	r3, [r0, #4]
    ade4:	f8d8 2000 	ldr.w	r2, [r8]
    ade8:	4293      	cmp	r3, r2
    adea:	f04f 0300 	mov.w	r3, #0
    adee:	d107      	bne.n	ae00 <nrf_modem_os_timedwait+0x80>
	parent->next = child;
    adf0:	9301      	str	r3, [sp, #4]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    adf2:	4b43      	ldr	r3, [pc, #268]	; (af00 <nrf_modem_os_timedwait+0x180>)
    adf4:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    adf6:	2a00      	cmp	r2, #0
    adf8:	d170      	bne.n	aedc <nrf_modem_os_timedwait+0x15c>
	list->head = node;
    adfa:	e9c3 6600 	strd	r6, r6, [r3]
}
    adfe:	e001      	b.n	ae04 <nrf_modem_os_timedwait+0x84>
	bool allow_to_sleep = false;
    ae00:	4699      	mov	r9, r3
	entry->cnt = rpc_event_cnt;
    ae02:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
    ae04:	f38a 8811 	msr	BASEPRI, sl
    ae08:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
    ae0c:	f1b9 0f00 	cmp.w	r9, #0
    ae10:	d062      	beq.n	aed8 <nrf_modem_os_timedwait+0x158>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
    ae12:	6823      	ldr	r3, [r4, #0]
    ae14:	1c5a      	adds	r2, r3, #1
    ae16:	d064      	beq.n	aee2 <nrf_modem_os_timedwait+0x162>
    ae18:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    ae1c:	f240 30e7 	movw	r0, #999	; 0x3e7
    ae20:	2100      	movs	r1, #0
    ae22:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
    ae26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ae2a:	2300      	movs	r3, #0
    ae2c:	fbcc 010e 	smlal	r0, r1, ip, lr
    ae30:	f7fd f988 	bl	8144 <__aeabi_uldivmod>
    ae34:	4602      	mov	r2, r0
    ae36:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    ae38:	a802      	add	r0, sp, #8
    ae3a:	f002 fb1d 	bl	d478 <z_impl_k_sem_take>
	__asm__ volatile(
    ae3e:	f04f 0320 	mov.w	r3, #32
    ae42:	f3ef 8911 	mrs	r9, BASEPRI
    ae46:	f383 8812 	msr	BASEPRI_MAX, r3
    ae4a:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ae4e:	2100      	movs	r1, #0
	return list->head;
    ae50:	4a2b      	ldr	r2, [pc, #172]	; (af00 <nrf_modem_os_timedwait+0x180>)
    ae52:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ae54:	b15b      	cbz	r3, ae6e <nrf_modem_os_timedwait+0xee>
    ae56:	42b3      	cmp	r3, r6
    ae58:	d14c      	bne.n	aef4 <nrf_modem_os_timedwait+0x174>
	return node->next;
    ae5a:	9801      	ldr	r0, [sp, #4]
	return list->tail;
    ae5c:	6856      	ldr	r6, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
    ae5e:	2900      	cmp	r1, #0
    ae60:	d143      	bne.n	aeea <nrf_modem_os_timedwait+0x16a>
    ae62:	429e      	cmp	r6, r3
	list->head = node;
    ae64:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    ae66:	d100      	bne.n	ae6a <nrf_modem_os_timedwait+0xea>
	list->tail = node;
    ae68:	6050      	str	r0, [r2, #4]
	parent->next = child;
    ae6a:	2300      	movs	r3, #0
    ae6c:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
    ae6e:	f002 fe1d 	bl	daac <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    ae72:	f7ff ff4f 	bl	ad14 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
    ae76:	f8d8 3000 	ldr.w	r3, [r8]
    ae7a:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
    ae7c:	f389 8811 	msr	BASEPRI, r9
    ae80:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
    ae84:	f004 fb76 	bl	f574 <nrf_modem_is_initialized>
    ae88:	2800      	cmp	r0, #0
    ae8a:	d081      	beq.n	ad90 <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
    ae8c:	6826      	ldr	r6, [r4, #0]
    ae8e:	1c73      	adds	r3, r6, #1
    ae90:	d022      	beq.n	aed8 <nrf_modem_os_timedwait+0x158>
	return z_impl_k_uptime_ticks();
    ae92:	f004 fd63 	bl	f95c <z_impl_k_uptime_ticks>
    ae96:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
    ae9a:	fba0 300e 	umull	r3, r0, r0, lr
    ae9e:	fba5 250e 	umull	r2, r5, r5, lr
    aea2:	fb0e 0101 	mla	r1, lr, r1, r0
    aea6:	fb0e 5707 	mla	r7, lr, r7, r5
    aeaa:	0bdb      	lsrs	r3, r3, #15
    aeac:	0bd2      	lsrs	r2, r2, #15
    aeae:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    aeb2:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
	delta = uptime - *reftime;
    aeb6:	1a9b      	subs	r3, r3, r2
    aeb8:	ea4f 31d1 	mov.w	r1, r1, lsr #15
    aebc:	eb61 31d7 	sbc.w	r1, r1, r7, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
    aec0:	ea4f 7ce6 	mov.w	ip, r6, asr #31
    aec4:	1af3      	subs	r3, r6, r3
    aec6:	eb6c 0101 	sbc.w	r1, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
    aeca:	2900      	cmp	r1, #0
    aecc:	bfb8      	it	lt
    aece:	2300      	movlt	r3, #0
    aed0:	6023      	str	r3, [r4, #0]
	if (*timeout == 0) {
    aed2:	2b00      	cmp	r3, #0
    aed4:	f43f af6a 	beq.w	adac <nrf_modem_os_timedwait+0x2c>
	return 0;
    aed8:	2000      	movs	r0, #0
    aeda:	e75b      	b.n	ad94 <nrf_modem_os_timedwait+0x14>
    aedc:	6016      	str	r6, [r2, #0]
	list->tail = node;
    aede:	605e      	str	r6, [r3, #4]
}
    aee0:	e790      	b.n	ae04 <nrf_modem_os_timedwait+0x84>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
    aee2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    aee6:	4613      	mov	r3, r2
    aee8:	e7a6      	b.n	ae38 <nrf_modem_os_timedwait+0xb8>
Z_GENLIST_REMOVE(slist, snode)
    aeea:	429e      	cmp	r6, r3
	parent->next = child;
    aeec:	6008      	str	r0, [r1, #0]
	list->tail = node;
    aeee:	bf08      	it	eq
    aef0:	6051      	streq	r1, [r2, #4]
}
    aef2:	e7ba      	b.n	ae6a <nrf_modem_os_timedwait+0xea>
	return node->next;
    aef4:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    aef6:	681b      	ldr	r3, [r3, #0]
    aef8:	e7ac      	b.n	ae54 <nrf_modem_os_timedwait+0xd4>
    aefa:	bf00      	nop
    aefc:	2000ca44 	.word	0x2000ca44
    af00:	2000ca48 	.word	0x2000ca48

0000af04 <nrf_modem_os_sem_init>:
{
    af04:	b470      	push	{r4, r5, r6}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
    af06:	6804      	ldr	r4, [r0, #0]
    af08:	4b0a      	ldr	r3, [pc, #40]	; (af34 <nrf_modem_os_sem_init+0x30>)
    af0a:	b12c      	cbz	r4, af18 <nrf_modem_os_sem_init+0x14>
    af0c:	429c      	cmp	r4, r3
    af0e:	d303      	bcc.n	af18 <nrf_modem_os_sem_init+0x14>
    af10:	f103 0578 	add.w	r5, r3, #120	; 0x78
    af14:	42ac      	cmp	r4, r5
    af16:	d308      	bcc.n	af2a <nrf_modem_os_sem_init+0x26>
	*sem = &nrf_modem_os_sems[used++];
    af18:	4d07      	ldr	r5, [pc, #28]	; (af38 <nrf_modem_os_sem_init+0x34>)
    af1a:	782c      	ldrb	r4, [r5, #0]
    af1c:	1c66      	adds	r6, r4, #1
    af1e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    af22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    af26:	702e      	strb	r6, [r5, #0]
    af28:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
    af2a:	6800      	ldr	r0, [r0, #0]
}
    af2c:	bc70      	pop	{r4, r5, r6}
	return z_impl_k_sem_init(sem, initial_count, limit);
    af2e:	f004 bbde 	b.w	f6ee <z_impl_k_sem_init>
    af32:	bf00      	nop
    af34:	2000c9cc 	.word	0x2000c9cc
    af38:	2000d2b4 	.word	0x2000d2b4

0000af3c <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    af3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    af40:	4b01      	ldr	r3, [pc, #4]	; (af48 <nrf_modem_os_application_irq_set+0xc>)
    af42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    af46:	4770      	bx	lr
    af48:	e000e100 	.word	0xe000e100

0000af4c <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    af4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    af50:	4b01      	ldr	r3, [pc, #4]	; (af58 <nrf_modem_os_application_irq_clear+0xc>)
    af52:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    af56:	4770      	bx	lr
    af58:	e000e100 	.word	0xe000e100

0000af5c <nrf_modem_os_event_notify>:
{
    af5c:	b510      	push	{r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    af5e:	4b08      	ldr	r3, [pc, #32]	; (af80 <nrf_modem_os_event_notify+0x24>)
    af60:	e8d3 2fef 	ldaex	r2, [r3]
    af64:	3201      	adds	r2, #1
    af66:	e8c3 2fe1 	stlex	r1, r2, [r3]
    af6a:	2900      	cmp	r1, #0
    af6c:	d1f8      	bne.n	af60 <nrf_modem_os_event_notify+0x4>
	return list->head;
    af6e:	4b05      	ldr	r3, [pc, #20]	; (af84 <nrf_modem_os_event_notify+0x28>)
    af70:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    af72:	b124      	cbz	r4, af7e <nrf_modem_os_event_notify+0x22>
	z_impl_k_sem_give(sem);
    af74:	1d20      	adds	r0, r4, #4
    af76:	f002 fa59 	bl	d42c <z_impl_k_sem_give>
	return node->next;
    af7a:	6824      	ldr	r4, [r4, #0]
    af7c:	e7f9      	b.n	af72 <nrf_modem_os_event_notify+0x16>
}
    af7e:	bd10      	pop	{r4, pc}
    af80:	2000ca44 	.word	0x2000ca44
    af84:	2000ca48 	.word	0x2000ca48

0000af88 <nrf_modem_os_alloc>:
{
    af88:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
    af8a:	2200      	movs	r2, #0
    af8c:	2300      	movs	r3, #0
    af8e:	4801      	ldr	r0, [pc, #4]	; (af94 <nrf_modem_os_alloc+0xc>)
    af90:	f004 bb65 	b.w	f65e <k_heap_alloc>
    af94:	2000c9a4 	.word	0x2000c9a4

0000af98 <nrf_modem_os_free>:
{
    af98:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
    af9a:	4801      	ldr	r0, [pc, #4]	; (afa0 <nrf_modem_os_free+0x8>)
    af9c:	f004 bb69 	b.w	f672 <k_heap_free>
    afa0:	2000c9a4 	.word	0x2000c9a4

0000afa4 <nrf_modem_os_shm_tx_alloc>:
{
    afa4:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
    afa6:	2200      	movs	r2, #0
    afa8:	2300      	movs	r3, #0
    afaa:	4801      	ldr	r0, [pc, #4]	; (afb0 <nrf_modem_os_shm_tx_alloc+0xc>)
    afac:	f004 bb57 	b.w	f65e <k_heap_alloc>
    afb0:	2000c9b8 	.word	0x2000c9b8

0000afb4 <nrf_modem_os_shm_tx_free>:
{
    afb4:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
    afb6:	4801      	ldr	r0, [pc, #4]	; (afbc <nrf_modem_os_shm_tx_free+0x8>)
    afb8:	f004 bb5b 	b.w	f672 <k_heap_free>
    afbc:	2000c9b8 	.word	0x2000c9b8

0000afc0 <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
    afc0:	b508      	push	{r3, lr}
	read_task_create();
    afc2:	f004 fa2b 	bl	f41c <read_task_create>

	/* Initialize heaps */
	k_heap_init(&nrf_modem_lib_heap, library_heap_buf, sizeof(library_heap_buf));
    afc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    afca:	4906      	ldr	r1, [pc, #24]	; (afe4 <nrf_modem_os_init+0x24>)
    afcc:	4806      	ldr	r0, [pc, #24]	; (afe8 <nrf_modem_os_init+0x28>)
    afce:	f004 fafd 	bl	f5cc <k_heap_init>
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
		    CONFIG_NRF_MODEM_LIB_SHMEM_TX_SIZE);
}
    afd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
    afd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    afda:	4904      	ldr	r1, [pc, #16]	; (afec <nrf_modem_os_init+0x2c>)
    afdc:	4804      	ldr	r0, [pc, #16]	; (aff0 <nrf_modem_os_init+0x30>)
    afde:	f004 baf5 	b.w	f5cc <k_heap_init>
    afe2:	bf00      	nop
    afe4:	2000ceb4 	.word	0x2000ceb4
    afe8:	2000c9a4 	.word	0x2000c9a4
    afec:	200084e8 	.word	0x200084e8
    aff0:	2000c9b8 	.word	0x2000c9b8

0000aff4 <on_modem_lib_init>:
LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
{
    aff4:	b508      	push	{r3, lr}
	int err;

	if (ret != 0) {
    aff6:	b988      	cbnz	r0, b01c <on_modem_lib_init+0x28>
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
    aff8:	4809      	ldr	r0, [pc, #36]	; (b020 <on_modem_lib_init+0x2c>)
    affa:	f7fd fa0e 	bl	841a <strlen>
    affe:	b118      	cbz	r0, b008 <on_modem_lib_init+0x14>
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
    b000:	4907      	ldr	r1, [pc, #28]	; (b020 <on_modem_lib_init+0x2c>)
    b002:	4808      	ldr	r0, [pc, #32]	; (b024 <on_modem_lib_init+0x30>)
    b004:	f001 fcf4 	bl	c9f0 <nrf_modem_at_printf>
		if (err) {
			LOG_ERR("Failed to set MAGPIO configuration (err: %d)", err);
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
    b008:	4807      	ldr	r0, [pc, #28]	; (b028 <on_modem_lib_init+0x34>)
    b00a:	f7fd fa06 	bl	841a <strlen>
    b00e:	b128      	cbz	r0, b01c <on_modem_lib_init+0x28>
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		if (err) {
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
		}
	}
}
    b010:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
    b014:	4904      	ldr	r1, [pc, #16]	; (b028 <on_modem_lib_init+0x34>)
    b016:	4803      	ldr	r0, [pc, #12]	; (b024 <on_modem_lib_init+0x30>)
    b018:	f001 bcea 	b.w	c9f0 <nrf_modem_at_printf>
}
    b01c:	bd08      	pop	{r3, pc}
    b01e:	bf00      	nop
    b020:	000105dd 	.word	0x000105dd
    b024:	000105fc 	.word	0x000105fc
    b028:	000105ff 	.word	0x000105ff

0000b02c <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
    b02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b030:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
    b032:	4b15      	ldr	r3, [pc, #84]	; (b088 <tfm_ns_interface_dispatch+0x5c>)
    b034:	4604      	mov	r4, r0
    b036:	f893 8000 	ldrb.w	r8, [r3]
    b03a:	460d      	mov	r5, r1
    b03c:	4616      	mov	r6, r2
    b03e:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
    b040:	f1b8 0f00 	cmp.w	r8, #0
    b044:	d115      	bne.n	b072 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
    b046:	4668      	mov	r0, sp
    b048:	f003 fedd 	bl	ee06 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
    b04c:	463a      	mov	r2, r7
    b04e:	4631      	mov	r1, r6
    b050:	4628      	mov	r0, r5
    b052:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    b054:	47a0      	blx	r4
    b056:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
    b058:	4668      	mov	r0, sp
    b05a:	f003 fed5 	bl	ee08 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
    b05e:	f1b8 0f00 	cmp.w	r8, #0
    b062:	d002      	beq.n	b06a <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
    b064:	4809      	ldr	r0, [pc, #36]	; (b08c <tfm_ns_interface_dispatch+0x60>)
    b066:	f002 f9a5 	bl	d3b4 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
    b06a:	4620      	mov	r0, r4
    b06c:	b022      	add	sp, #136	; 0x88
    b06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
    b072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b07a:	4804      	ldr	r0, [pc, #16]	; (b08c <tfm_ns_interface_dispatch+0x60>)
    b07c:	f002 f922 	bl	d2c4 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
    b080:	2800      	cmp	r0, #0
    b082:	d0e0      	beq.n	b046 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
    b084:	241f      	movs	r4, #31
    b086:	e7f0      	b.n	b06a <tfm_ns_interface_dispatch+0x3e>
    b088:	2000d2c4 	.word	0x2000d2c4
    b08c:	2000c6b4 	.word	0x2000c6b4

0000b090 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
    b090:	b530      	push	{r4, r5, lr}
    b092:	b095      	sub	sp, #84	; 0x54
    b094:	4605      	mov	r5, r0
    b096:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
    b098:	2230      	movs	r2, #48	; 0x30
    b09a:	2100      	movs	r1, #0
    b09c:	a808      	add	r0, sp, #32
    b09e:	f004 fd2e 	bl	fafe <memset>
    b0a2:	233f      	movs	r3, #63	; 0x3f
    b0a4:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
    b0a6:	ab07      	add	r3, sp, #28
    b0a8:	9303      	str	r3, [sp, #12]
    b0aa:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
    b0ac:	9406      	str	r4, [sp, #24]
    b0ae:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
    b0b2:	b154      	cbz	r4, b0ca <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
    b0b4:	2301      	movs	r3, #1
    b0b6:	aa05      	add	r2, sp, #20
    b0b8:	9200      	str	r2, [sp, #0]
    b0ba:	2100      	movs	r1, #0
    b0bc:	4804      	ldr	r0, [pc, #16]	; (b0d0 <psa_generate_random+0x40>)
    b0be:	9301      	str	r3, [sp, #4]
    b0c0:	aa03      	add	r2, sp, #12
    b0c2:	f000 f807 	bl	b0d4 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
    b0c6:	b015      	add	sp, #84	; 0x54
    b0c8:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
    b0ca:	4620      	mov	r0, r4
    b0cc:	e7fb      	b.n	b0c6 <psa_generate_random+0x36>
    b0ce:	bf00      	nop
    b0d0:	40000100 	.word	0x40000100

0000b0d4 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
    b0d4:	b470      	push	{r4, r5, r6}
    b0d6:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
    if ((type > INT16_MAX) ||
    b0da:	f501 4600 	add.w	r6, r1, #32768	; 0x8000
    b0de:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
    b0e2:	d20d      	bcs.n	b100 <psa_call+0x2c>
        (type < INT16_MIN) ||
    b0e4:	2bff      	cmp	r3, #255	; 0xff
    b0e6:	d80b      	bhi.n	b100 <psa_call+0x2c>
        (in_len > UINT8_MAX) ||
    b0e8:	2cff      	cmp	r4, #255	; 0xff
    b0ea:	d809      	bhi.n	b100 <psa_call+0x2c>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
    b0ec:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
    b0f0:	4613      	mov	r3, r2
    b0f2:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
    b0f6:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
    b0f8:	bc70      	pop	{r4, r5, r6}
    return tfm_ns_interface_dispatch(
    b0fa:	4803      	ldr	r0, [pc, #12]	; (b108 <psa_call+0x34>)
    b0fc:	f7ff bf96 	b.w	b02c <tfm_ns_interface_dispatch>
}
    b100:	f06f 0080 	mvn.w	r0, #128	; 0x80
    b104:	bc70      	pop	{r4, r5, r6}
    b106:	4770      	bx	lr
    b108:	00007c21 	.word	0x00007c21

0000b10c <SystemInit>:
    static bool is_empty_word(uint32_t const volatile * word);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
    b10c:	4b01      	ldr	r3, [pc, #4]	; (b114 <SystemInit+0x8>)
    b10e:	4a02      	ldr	r2, [pc, #8]	; (b118 <SystemInit+0xc>)
    b110:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
    b112:	4770      	bx	lr
    b114:	2000c5a8 	.word	0x2000c5a8
    b118:	03d09000 	.word	0x03d09000

0000b11c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    b11c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    b11e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    b120:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    b122:	fab2 f382 	clz	r3, r2
    b126:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    b12a:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    b12c:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    b12e:	d010      	beq.n	b152 <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
    b130:	fa05 f303 	lsl.w	r3, r5, r3
    b134:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b138:	e8d0 6fef 	ldaex	r6, [r0]
    b13c:	4296      	cmp	r6, r2
    b13e:	d104      	bne.n	b14a <nrfx_flag32_alloc+0x2e>
    b140:	e8c0 3fec 	stlex	ip, r3, [r0]
    b144:	f1bc 0f00 	cmp.w	ip, #0
    b148:	d1f6      	bne.n	b138 <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    b14a:	d1e9      	bne.n	b120 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    b14c:	4802      	ldr	r0, [pc, #8]	; (b158 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    b14e:	700c      	strb	r4, [r1, #0]
}
    b150:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    b152:	4802      	ldr	r0, [pc, #8]	; (b15c <nrfx_flag32_alloc+0x40>)
    b154:	e7fc      	b.n	b150 <nrfx_flag32_alloc+0x34>
    b156:	bf00      	nop
    b158:	0bad0000 	.word	0x0bad0000
    b15c:	0bad0002 	.word	0x0bad0002

0000b160 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    b160:	6803      	ldr	r3, [r0, #0]
{
    b162:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    b164:	40cb      	lsrs	r3, r1
    b166:	07db      	lsls	r3, r3, #31
    b168:	d411      	bmi.n	b18e <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    b16a:	2301      	movs	r3, #1
    b16c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    b170:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    b172:	ea41 0203 	orr.w	r2, r1, r3
    b176:	e8d0 4fef 	ldaex	r4, [r0]
    b17a:	429c      	cmp	r4, r3
    b17c:	d104      	bne.n	b188 <nrfx_flag32_free+0x28>
    b17e:	e8c0 2fec 	stlex	ip, r2, [r0]
    b182:	f1bc 0f00 	cmp.w	ip, #0
    b186:	d1f6      	bne.n	b176 <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    b188:	d1f2      	bne.n	b170 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    b18a:	4802      	ldr	r0, [pc, #8]	; (b194 <nrfx_flag32_free+0x34>)
}
    b18c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    b18e:	4802      	ldr	r0, [pc, #8]	; (b198 <nrfx_flag32_free+0x38>)
    b190:	e7fc      	b.n	b18c <nrfx_flag32_free+0x2c>
    b192:	bf00      	nop
    b194:	0bad0000 	.word	0x0bad0000
    b198:	0bad0004 	.word	0x0bad0004

0000b19c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    b19c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    b19e:	4604      	mov	r4, r0
    b1a0:	b118      	cbz	r0, b1aa <clock_stop+0xe>
    b1a2:	2801      	cmp	r0, #1
    b1a4:	d023      	beq.n	b1ee <clock_stop+0x52>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    b1a6:	b003      	add	sp, #12
    b1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    b1aa:	2202      	movs	r2, #2
    b1ac:	4b20      	ldr	r3, [pc, #128]	; (b230 <clock_stop+0x94>)
    b1ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b1b2:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    b1b6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b1ba:	2201      	movs	r2, #1
    b1bc:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    b1be:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    b1c0:	429c      	cmp	r4, r3
    b1c2:	bf18      	it	ne
    b1c4:	2500      	movne	r5, #0
    b1c6:	f242 7710 	movw	r7, #10000	; 0x2710
    b1ca:	4e19      	ldr	r6, [pc, #100]	; (b230 <clock_stop+0x94>)
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    b1cc:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    b1d0:	bf08      	it	eq
    b1d2:	f10d 0507 	addeq.w	r5, sp, #7
    switch (domain)
    b1d6:	b1a4      	cbz	r4, b202 <clock_stop+0x66>
    b1d8:	2c01      	cmp	r4, #1
    b1da:	d1e4      	bne.n	b1a6 <clock_stop+0xa>
            if (p_clk_src != NULL)
    b1dc:	b125      	cbz	r5, b1e8 <clock_stop+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    b1de:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    b1e2:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    b1e6:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    b1e8:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    b1ec:	e011      	b.n	b212 <clock_stop+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b1ee:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    b1f0:	4b0f      	ldr	r3, [pc, #60]	; (b230 <clock_stop+0x94>)
    b1f2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b1f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    b1fa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b1fe:	6058      	str	r0, [r3, #4]
}
    b200:	e7dd      	b.n	b1be <clock_stop+0x22>
            if (p_clk_src != NULL)
    b202:	b125      	cbz	r5, b20e <clock_stop+0x72>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b204:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    b208:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    b20c:	702b      	strb	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b20e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    b212:	03db      	lsls	r3, r3, #15
    b214:	d5c7      	bpl.n	b1a6 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    b216:	b92d      	cbnz	r5, b224 <clock_stop+0x88>
    b218:	2001      	movs	r0, #1
    b21a:	f004 f914 	bl	f446 <nrfx_busy_wait>
    b21e:	3f01      	subs	r7, #1
    b220:	d1d9      	bne.n	b1d6 <clock_stop+0x3a>
    b222:	e7c0      	b.n	b1a6 <clock_stop+0xa>
    b224:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b228:	2b01      	cmp	r3, #1
    b22a:	d0f5      	beq.n	b218 <clock_stop+0x7c>
    b22c:	e7bb      	b.n	b1a6 <clock_stop+0xa>
    b22e:	bf00      	nop
    b230:	40005000 	.word	0x40005000

0000b234 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    b234:	4b04      	ldr	r3, [pc, #16]	; (b248 <nrfx_clock_init+0x14>)
    b236:	791a      	ldrb	r2, [r3, #4]
    b238:	b922      	cbnz	r2, b244 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    b23a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    b23c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    b23e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    b240:	4802      	ldr	r0, [pc, #8]	; (b24c <nrfx_clock_init+0x18>)
    b242:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    b244:	4802      	ldr	r0, [pc, #8]	; (b250 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    b246:	4770      	bx	lr
    b248:	2000caa0 	.word	0x2000caa0
    b24c:	0bad0000 	.word	0x0bad0000
    b250:	0bad000c 	.word	0x0bad000c

0000b254 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    b254:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    b256:	2005      	movs	r0, #5
    b258:	f7fd ffd2 	bl	9200 <arch_irq_is_enabled>
    b25c:	b910      	cbnz	r0, b264 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    b25e:	2005      	movs	r0, #5
    b260:	f7fd ffaa 	bl	91b8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    b264:	2201      	movs	r2, #1
    b266:	4b02      	ldr	r3, [pc, #8]	; (b270 <nrfx_clock_enable+0x1c>)
    b268:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    b26c:	bd08      	pop	{r3, pc}
    b26e:	bf00      	nop
    b270:	40005000 	.word	0x40005000

0000b274 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    b274:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    b276:	b110      	cbz	r0, b27e <nrfx_clock_start+0xa>
    b278:	2801      	cmp	r0, #1
    b27a:	d02f      	beq.n	b2dc <nrfx_clock_start+0x68>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    b27c:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b27e:	4a1c      	ldr	r2, [pc, #112]	; (b2f0 <nrfx_clock_start+0x7c>)
    b280:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b284:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    b288:	03c9      	lsls	r1, r1, #15
    b28a:	d412      	bmi.n	b2b2 <nrfx_clock_start+0x3e>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    b28c:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    b290:	07db      	lsls	r3, r3, #31
    b292:	d418      	bmi.n	b2c6 <nrfx_clock_start+0x52>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    b294:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    b296:	4a16      	ldr	r2, [pc, #88]	; (b2f0 <nrfx_clock_start+0x7c>)
    b298:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b29c:	2300      	movs	r3, #0
    b29e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    b2a2:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    b2a6:	2302      	movs	r3, #2
    b2a8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b2ac:	2301      	movs	r3, #1
    b2ae:	6093      	str	r3, [r2, #8]
}
    b2b0:	e7e4      	b.n	b27c <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b2b2:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    b2b6:	2b02      	cmp	r3, #2
    b2b8:	d0ed      	beq.n	b296 <nrfx_clock_start+0x22>
    if (!is_correct_clk)
    b2ba:	2b01      	cmp	r3, #1
    b2bc:	d0eb      	beq.n	b296 <nrfx_clock_start+0x22>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    b2be:	2000      	movs	r0, #0
    b2c0:	f7ff ff6c 	bl	b19c <clock_stop>
    b2c4:	e7e6      	b.n	b294 <nrfx_clock_start+0x20>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    b2c6:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    b2ca:	f003 0303 	and.w	r3, r3, #3
    if (!is_correct_clk)
    b2ce:	3b01      	subs	r3, #1
    b2d0:	2b01      	cmp	r3, #1
    b2d2:	d8f4      	bhi.n	b2be <nrfx_clock_start+0x4a>
    p_reg->INTENSET = mask;
    b2d4:	2302      	movs	r3, #2
    b2d6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    b2da:	e7cf      	b.n	b27c <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b2dc:	2200      	movs	r2, #0
    b2de:	4b04      	ldr	r3, [pc, #16]	; (b2f0 <nrfx_clock_start+0x7c>)
    b2e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    b2e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    b2e8:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b2ec:	6018      	str	r0, [r3, #0]
}
    b2ee:	e7c5      	b.n	b27c <nrfx_clock_start+0x8>
    b2f0:	40005000 	.word	0x40005000

0000b2f4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    b2f4:	4b17      	ldr	r3, [pc, #92]	; (b354 <nrfx_power_clock_irq_handler+0x60>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    b2f6:	b510      	push	{r4, lr}
    b2f8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    b2fc:	b152      	cbz	r2, b314 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b2fe:	2000      	movs	r0, #0
    b300:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    b304:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    b308:	2201      	movs	r2, #1
    b30a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    b30e:	4b12      	ldr	r3, [pc, #72]	; (b358 <nrfx_power_clock_irq_handler+0x64>)
    b310:	681b      	ldr	r3, [r3, #0]
    b312:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    b314:	4b0f      	ldr	r3, [pc, #60]	; (b354 <nrfx_power_clock_irq_handler+0x60>)
    b316:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    b31a:	b18a      	cbz	r2, b340 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b31c:	2200      	movs	r2, #0
    b31e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    b322:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b326:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b32a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    b32e:	f002 0203 	and.w	r2, r2, #3
    b332:	2a01      	cmp	r2, #1
    b334:	f04f 0102 	mov.w	r1, #2
    b338:	d103      	bne.n	b342 <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    b33a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b33e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    b340:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    b342:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    b346:	4b04      	ldr	r3, [pc, #16]	; (b358 <nrfx_power_clock_irq_handler+0x64>)
    b348:	2001      	movs	r0, #1
}
    b34a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    b34e:	681b      	ldr	r3, [r3, #0]
    b350:	4718      	bx	r3
    b352:	bf00      	nop
    b354:	40005000 	.word	0x40005000
    b358:	2000caa0 	.word	0x2000caa0

0000b35c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    b35c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    b35e:	4801      	ldr	r0, [pc, #4]	; (b364 <nrfx_dppi_channel_alloc+0x8>)
    b360:	f7ff bedc 	b.w	b11c <nrfx_flag32_alloc>
    b364:	2000c5ac 	.word	0x2000c5ac

0000b368 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    b368:	f000 021f 	and.w	r2, r0, #31
    b36c:	4805      	ldr	r0, [pc, #20]	; (b384 <nrf_gpio_cfg_sense_set+0x1c>)
    b36e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b372:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    cnf &= ~to_update;
    b376:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b37a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    b37e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    b382:	4770      	bx	lr
    b384:	40842500 	.word	0x40842500

0000b388 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    b388:	4b03      	ldr	r3, [pc, #12]	; (b398 <pin_in_use_by_te+0x10>)
    b38a:	3008      	adds	r0, #8
    b38c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    b390:	f3c0 1040 	ubfx	r0, r0, #5, #1
    b394:	4770      	bx	lr
    b396:	bf00      	nop
    b398:	2000c5b0 	.word	0x2000c5b0

0000b39c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    b39c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    b39e:	4c0d      	ldr	r4, [pc, #52]	; (b3d4 <call_handler+0x38>)
    b3a0:	f100 0308 	add.w	r3, r0, #8
    b3a4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    b3a8:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    b3aa:	05da      	lsls	r2, r3, #23
{
    b3ac:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    b3ae:	d507      	bpl.n	b3c0 <call_handler+0x24>
    b3b0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    b3b4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    b3b8:	6852      	ldr	r2, [r2, #4]
    b3ba:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    b3be:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    b3c0:	68a3      	ldr	r3, [r4, #8]
    b3c2:	b12b      	cbz	r3, b3d0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    b3c4:	4631      	mov	r1, r6
    b3c6:	4628      	mov	r0, r5
    b3c8:	68e2      	ldr	r2, [r4, #12]
    }
}
    b3ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    b3ce:	4718      	bx	r3
}
    b3d0:	bd70      	pop	{r4, r5, r6, pc}
    b3d2:	bf00      	nop
    b3d4:	2000c5b0 	.word	0x2000c5b0

0000b3d8 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    b3d8:	4a12      	ldr	r2, [pc, #72]	; (b424 <release_handler+0x4c>)
    b3da:	3008      	adds	r0, #8
    b3dc:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
    b3e0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    b3e2:	05d9      	lsls	r1, r3, #23
    b3e4:	d51b      	bpl.n	b41e <release_handler+0x46>
    b3e6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    b3ea:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    b3ee:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    b3f2:	2000      	movs	r0, #0
    b3f4:	f102 0410 	add.w	r4, r2, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    b3f8:	f834 3b02 	ldrh.w	r3, [r4], #2
    b3fc:	f413 7f80 	tst.w	r3, #256	; 0x100
    b400:	d003      	beq.n	b40a <release_handler+0x32>
    b402:	f3c3 2343 	ubfx	r3, r3, #9, #4
    b406:	4299      	cmp	r1, r3
    b408:	d009      	beq.n	b41e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    b40a:	3001      	adds	r0, #1
    b40c:	2820      	cmp	r0, #32
    b40e:	d1f3      	bne.n	b3f8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    b410:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    b412:	4805      	ldr	r0, [pc, #20]	; (b428 <release_handler+0x50>)
}
    b414:	bc10      	pop	{r4}
        m_cb.handlers[handler_id].handler = NULL;
    b416:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    b41a:	f7ff bea1 	b.w	b160 <nrfx_flag32_free>
}
    b41e:	bc10      	pop	{r4}
    b420:	4770      	bx	lr
    b422:	bf00      	nop
    b424:	2000c5b0 	.word	0x2000c5b0
    b428:	2000c604 	.word	0x2000c604

0000b42c <pin_handler_trigger_uninit>:
{
    b42c:	b538      	push	{r3, r4, r5, lr}
    b42e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    b430:	f7ff ffaa 	bl	b388 <pin_in_use_by_te>
    b434:	4c0b      	ldr	r4, [pc, #44]	; (b464 <pin_handler_trigger_uninit+0x38>)
    b436:	f102 0508 	add.w	r5, r2, #8
    b43a:	b160      	cbz	r0, b456 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    b43c:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b43e:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    b442:	0b5b      	lsrs	r3, r3, #13
    b444:	009b      	lsls	r3, r3, #2
    b446:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b44a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    b44e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    b452:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    b456:	4610      	mov	r0, r2
    b458:	f7ff ffbe 	bl	b3d8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    b45c:	2300      	movs	r3, #0
    b45e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    b462:	bd38      	pop	{r3, r4, r5, pc}
    b464:	2000c5b0 	.word	0x2000c5b0

0000b468 <nrfx_gpiote_input_configure>:
{
    b468:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b46c:	4604      	mov	r4, r0
    b46e:	461d      	mov	r5, r3
    if (p_input_config)
    b470:	b309      	cbz	r1, b4b6 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b472:	4f4d      	ldr	r7, [pc, #308]	; (b5a8 <nrfx_gpiote_input_configure+0x140>)
    b474:	f100 0808 	add.w	r8, r0, #8
    b478:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    b47c:	07b3      	lsls	r3, r6, #30
    b47e:	d506      	bpl.n	b48e <nrfx_gpiote_input_configure+0x26>
    b480:	f7ff ff82 	bl	b388 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    b484:	b118      	cbz	r0, b48e <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    b486:	4849      	ldr	r0, [pc, #292]	; (b5ac <nrfx_gpiote_input_configure+0x144>)
}
    b488:	b002      	add	sp, #8
    b48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b48e:	4b48      	ldr	r3, [pc, #288]	; (b5b0 <nrfx_gpiote_input_configure+0x148>)
    *p_pin = pin_number & 0x1F;
    b490:	f004 001f 	and.w	r0, r4, #31
    b494:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b498:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    b49c:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    b49e:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    b4a2:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b4a6:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    b4aa:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
    b4ae:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    b4b2:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
    b4b6:	b192      	cbz	r2, b4de <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b4b8:	4b3b      	ldr	r3, [pc, #236]	; (b5a8 <nrfx_gpiote_input_configure+0x140>)
    b4ba:	f104 0608 	add.w	r6, r4, #8
    b4be:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    b4c2:	7810      	ldrb	r0, [r2, #0]
        if (pin_is_output(pin))
    b4c4:	078f      	lsls	r7, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    b4c6:	6852      	ldr	r2, [r2, #4]
        if (pin_is_output(pin))
    b4c8:	d50c      	bpl.n	b4e4 <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
    b4ca:	2a00      	cmp	r2, #0
    b4cc:	d1db      	bne.n	b486 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    b4ce:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    b4d2:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    b4d6:	ea42 0080 	orr.w	r0, r2, r0, lsl #2
    b4da:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
    if (p_handler_config)
    b4de:	bbcd      	cbnz	r5, b554 <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
    b4e0:	4834      	ldr	r0, [pc, #208]	; (b5b4 <nrfx_gpiote_input_configure+0x14c>)
    b4e2:	e7d1      	b.n	b488 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    b4e4:	f021 0120 	bic.w	r1, r1, #32
    b4e8:	04c9      	lsls	r1, r1, #19
    b4ea:	0cc9      	lsrs	r1, r1, #19
    b4ec:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    b4f0:	2a00      	cmp	r2, #0
    b4f2:	d0ec      	beq.n	b4ce <nrfx_gpiote_input_configure+0x66>
                if (!edge)
    b4f4:	2803      	cmp	r0, #3
    b4f6:	d8c6      	bhi.n	b486 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    b4f8:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    b4fc:	4662      	mov	r2, ip
    b4fe:	0092      	lsls	r2, r2, #2
    b500:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    b504:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    b508:	b920      	cbnz	r0, b514 <nrfx_gpiote_input_configure+0xac>
    p_reg->CONFIG[idx] = 0;
    b50a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    b50e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
#endif
}
    b512:	e7dc      	b.n	b4ce <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    b514:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    b518:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    b51c:	f027 0703 	bic.w	r7, r7, #3
    b520:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    b524:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
    b528:	f041 0120 	orr.w	r1, r1, #32
    b52c:	f427 3747 	bic.w	r7, r7, #203776	; 0x31c00
    b530:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    b534:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b538:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    b53c:	0227      	lsls	r7, r4, #8
    b53e:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    b542:	ea4e 4e00 	orr.w	lr, lr, r0, lsl #16
    b546:	ea47 070e 	orr.w	r7, r7, lr
    b54a:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    b54e:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    b552:	e7bc      	b.n	b4ce <nrfx_gpiote_input_configure+0x66>
    release_handler(pin);
    b554:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    b556:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    b55a:	f7ff ff3d 	bl	b3d8 <release_handler>
    if (!handler)
    b55e:	2e00      	cmp	r6, #0
    b560:	d0be      	beq.n	b4e0 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    b562:	4d11      	ldr	r5, [pc, #68]	; (b5a8 <nrfx_gpiote_input_configure+0x140>)
    b564:	682b      	ldr	r3, [r5, #0]
    b566:	429e      	cmp	r6, r3
    b568:	d104      	bne.n	b574 <nrfx_gpiote_input_configure+0x10c>
    b56a:	686b      	ldr	r3, [r5, #4]
    b56c:	429f      	cmp	r7, r3
    b56e:	d101      	bne.n	b574 <nrfx_gpiote_input_configure+0x10c>
    b570:	2200      	movs	r2, #0
    b572:	e009      	b.n	b588 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    b574:	4810      	ldr	r0, [pc, #64]	; (b5b8 <nrfx_gpiote_input_configure+0x150>)
    b576:	f10d 0107 	add.w	r1, sp, #7
    b57a:	f7ff fdcf 	bl	b11c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    b57e:	4b0d      	ldr	r3, [pc, #52]	; (b5b4 <nrfx_gpiote_input_configure+0x14c>)
    b580:	4298      	cmp	r0, r3
    b582:	d181      	bne.n	b488 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    b584:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
    b588:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    b58c:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    b58e:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    b590:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    b594:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    b598:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    b59c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b5a0:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    b5a4:	e79c      	b.n	b4e0 <nrfx_gpiote_input_configure+0x78>
    b5a6:	bf00      	nop
    b5a8:	2000c5b0 	.word	0x2000c5b0
    b5ac:	0bad0004 	.word	0x0bad0004
    b5b0:	40842500 	.word	0x40842500
    b5b4:	0bad0000 	.word	0x0bad0000
    b5b8:	2000c604 	.word	0x2000c604

0000b5bc <nrfx_gpiote_output_configure>:
{
    b5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b5be:	4604      	mov	r4, r0
    if (p_config)
    b5c0:	b369      	cbz	r1, b61e <nrfx_gpiote_output_configure+0x62>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b5c2:	4e37      	ldr	r6, [pc, #220]	; (b6a0 <nrfx_gpiote_output_configure+0xe4>)
    b5c4:	f100 0708 	add.w	r7, r0, #8
    b5c8:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    b5cc:	07ab      	lsls	r3, r5, #30
    b5ce:	d404      	bmi.n	b5da <nrfx_gpiote_output_configure+0x1e>
    b5d0:	f7ff feda 	bl	b388 <pin_in_use_by_te>
    b5d4:	b108      	cbz	r0, b5da <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
    b5d6:	4833      	ldr	r0, [pc, #204]	; (b6a4 <nrfx_gpiote_output_configure+0xe8>)
}
    b5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    b5da:	f015 0f1c 	tst.w	r5, #28
    b5de:	784b      	ldrb	r3, [r1, #1]
    b5e0:	d001      	beq.n	b5e6 <nrfx_gpiote_output_configure+0x2a>
    b5e2:	2b01      	cmp	r3, #1
    b5e4:	d0f7      	beq.n	b5d6 <nrfx_gpiote_output_configure+0x1a>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b5e6:	4830      	ldr	r0, [pc, #192]	; (b6a8 <nrfx_gpiote_output_configure+0xec>)
    *p_pin = pin_number & 0x1F;
    b5e8:	f004 0c1f 	and.w	ip, r4, #31
    b5ec:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b5f0:	f8dc 0200 	ldr.w	r0, [ip, #512]	; 0x200
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    b5f4:	f891 e000 	ldrb.w	lr, [r1]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    b5f8:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    b5fa:	f420 60e1 	bic.w	r0, r0, #1800	; 0x708
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    b5fe:	7889      	ldrb	r1, [r1, #2]
    b600:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    cnf &= ~to_update;
    b604:	f020 0007 	bic.w	r0, r0, #7
    b608:	4303      	orrs	r3, r0
    b60a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b60e:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    b612:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    b616:	f8cc 3200 	str.w	r3, [ip, #512]	; 0x200
    b61a:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    b61e:	b90a      	cbnz	r2, b624 <nrfx_gpiote_output_configure+0x68>
    return NRFX_SUCCESS;
    b620:	4822      	ldr	r0, [pc, #136]	; (b6ac <nrfx_gpiote_output_configure+0xf0>)
    b622:	e7d9      	b.n	b5d8 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b624:	4e1e      	ldr	r6, [pc, #120]	; (b6a0 <nrfx_gpiote_output_configure+0xe4>)
    b626:	f104 0708 	add.w	r7, r4, #8
    b62a:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    b62e:	0783      	lsls	r3, r0, #30
    b630:	d5d1      	bpl.n	b5d6 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    b632:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    b636:	2300      	movs	r3, #0
    b638:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    b63a:	f020 0020 	bic.w	r0, r0, #32
    b63e:	0089      	lsls	r1, r1, #2
    b640:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b644:	04c0      	lsls	r0, r0, #19
    b646:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
    b64a:	0cc0      	lsrs	r0, r0, #19
    b64c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    b650:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    b654:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    b658:	7855      	ldrb	r5, [r2, #1]
    b65a:	2d00      	cmp	r5, #0
    b65c:	d0e0      	beq.n	b620 <nrfx_gpiote_output_configure+0x64>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    b65e:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    b662:	7892      	ldrb	r2, [r2, #2]
    b664:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    b668:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    b66c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b670:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    b674:	0223      	lsls	r3, r4, #8
    b676:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    b67a:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b67c:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    b680:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    b684:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b686:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    b688:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    b68c:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b690:	4313      	orrs	r3, r2
    b692:	f040 0020 	orr.w	r0, r0, #32
    b696:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    b69a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    b69e:	e7bf      	b.n	b620 <nrfx_gpiote_output_configure+0x64>
    b6a0:	2000c5b0 	.word	0x2000c5b0
    b6a4:	0bad0004 	.word	0x0bad0004
    b6a8:	40842500 	.word	0x40842500
    b6ac:	0bad0000 	.word	0x0bad0000

0000b6b0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    b6b0:	4b01      	ldr	r3, [pc, #4]	; (b6b8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    b6b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    b6b6:	4770      	bx	lr
    b6b8:	2000c5b0 	.word	0x2000c5b0

0000b6bc <nrfx_gpiote_channel_get>:
{
    b6bc:	b508      	push	{r3, lr}
    b6be:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    b6c0:	f7ff fe62 	bl	b388 <pin_in_use_by_te>
    b6c4:	b138      	cbz	r0, b6d6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b6c6:	4b05      	ldr	r3, [pc, #20]	; (b6dc <nrfx_gpiote_channel_get+0x20>)
    b6c8:	3208      	adds	r2, #8
    b6ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    b6ce:	4804      	ldr	r0, [pc, #16]	; (b6e0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b6d0:	0b5b      	lsrs	r3, r3, #13
    b6d2:	700b      	strb	r3, [r1, #0]
}
    b6d4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    b6d6:	4803      	ldr	r0, [pc, #12]	; (b6e4 <nrfx_gpiote_channel_get+0x28>)
    b6d8:	e7fc      	b.n	b6d4 <nrfx_gpiote_channel_get+0x18>
    b6da:	bf00      	nop
    b6dc:	2000c5b0 	.word	0x2000c5b0
    b6e0:	0bad0000 	.word	0x0bad0000
    b6e4:	0bad0004 	.word	0x0bad0004

0000b6e8 <nrfx_gpiote_init>:
{
    b6e8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    b6ea:	4c0f      	ldr	r4, [pc, #60]	; (b728 <nrfx_gpiote_init+0x40>)
    b6ec:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    b6f0:	b9bd      	cbnz	r5, b722 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    b6f2:	2240      	movs	r2, #64	; 0x40
    b6f4:	4629      	mov	r1, r5
    b6f6:	f104 0010 	add.w	r0, r4, #16
    b6fa:	f004 fa00 	bl	fafe <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    b6fe:	2031      	movs	r0, #49	; 0x31
    b700:	f7fd fd5a 	bl	91b8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b704:	4b09      	ldr	r3, [pc, #36]	; (b72c <nrfx_gpiote_init+0x44>)
    return err_code;
    b706:	480a      	ldr	r0, [pc, #40]	; (b730 <nrfx_gpiote_init+0x48>)
    b708:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    b70c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    b710:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    b714:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    b718:	2301      	movs	r3, #1
    b71a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    b71e:	6563      	str	r3, [r4, #84]	; 0x54
}
    b720:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    b722:	4804      	ldr	r0, [pc, #16]	; (b734 <nrfx_gpiote_init+0x4c>)
    b724:	e7fc      	b.n	b720 <nrfx_gpiote_init+0x38>
    b726:	bf00      	nop
    b728:	2000c5b0 	.word	0x2000c5b0
    b72c:	40031000 	.word	0x40031000
    b730:	0bad0000 	.word	0x0bad0000
    b734:	0bad0005 	.word	0x0bad0005

0000b738 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    b738:	4b03      	ldr	r3, [pc, #12]	; (b748 <nrfx_gpiote_is_init+0x10>)
    b73a:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    b73e:	3800      	subs	r0, #0
    b740:	bf18      	it	ne
    b742:	2001      	movne	r0, #1
    b744:	4770      	bx	lr
    b746:	bf00      	nop
    b748:	2000c5b0 	.word	0x2000c5b0

0000b74c <nrfx_gpiote_channel_free>:
{
    b74c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    b74e:	4801      	ldr	r0, [pc, #4]	; (b754 <nrfx_gpiote_channel_free+0x8>)
    b750:	f7ff bd06 	b.w	b160 <nrfx_flag32_free>
    b754:	2000c600 	.word	0x2000c600

0000b758 <nrfx_gpiote_channel_alloc>:
{
    b758:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    b75a:	4801      	ldr	r0, [pc, #4]	; (b760 <nrfx_gpiote_channel_alloc+0x8>)
    b75c:	f7ff bcde 	b.w	b11c <nrfx_flag32_alloc>
    b760:	2000c600 	.word	0x2000c600

0000b764 <nrfx_gpiote_trigger_enable>:
{
    b764:	4602      	mov	r2, r0
    b766:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b768:	f7ff fe0e 	bl	b388 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b76c:	4b1b      	ldr	r3, [pc, #108]	; (b7dc <nrfx_gpiote_trigger_enable+0x78>)
    b76e:	f102 0408 	add.w	r4, r2, #8
    b772:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b776:	b1c8      	cbz	r0, b7ac <nrfx_gpiote_trigger_enable+0x48>
    b778:	f013 0402 	ands.w	r4, r3, #2
    b77c:	d116      	bne.n	b7ac <nrfx_gpiote_trigger_enable+0x48>
    return ((uint32_t)p_reg + event);
    b77e:	4818      	ldr	r0, [pc, #96]	; (b7e0 <nrfx_gpiote_trigger_enable+0x7c>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b780:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    b782:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b784:	5084      	str	r4, [r0, r2]
    b786:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    b788:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    b78c:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    b790:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    b794:	f040 0001 	orr.w	r0, r0, #1
    b798:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    b79c:	b129      	cbz	r1, b7aa <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    b79e:	2201      	movs	r2, #1
    b7a0:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    b7a4:	4a0f      	ldr	r2, [pc, #60]	; (b7e4 <nrfx_gpiote_trigger_enable+0x80>)
    b7a6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    b7aa:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b7ac:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    b7b0:	2b04      	cmp	r3, #4
    b7b2:	d00e      	beq.n	b7d2 <nrfx_gpiote_trigger_enable+0x6e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    b7b4:	2b05      	cmp	r3, #5
    b7b6:	d00e      	beq.n	b7d6 <nrfx_gpiote_trigger_enable+0x72>
    return p_reg->IN;
    b7b8:	4b0b      	ldr	r3, [pc, #44]	; (b7e8 <nrfx_gpiote_trigger_enable+0x84>)
    b7ba:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
    b7bc:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    b7c0:	40d9      	lsrs	r1, r3
    b7c2:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    b7c6:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    b7c8:	4610      	mov	r0, r2
}
    b7ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    b7ce:	f7ff bdcb 	b.w	b368 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    b7d2:	2103      	movs	r1, #3
    b7d4:	e7f8      	b.n	b7c8 <nrfx_gpiote_trigger_enable+0x64>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    b7d6:	2102      	movs	r1, #2
    b7d8:	e7f6      	b.n	b7c8 <nrfx_gpiote_trigger_enable+0x64>
    b7da:	bf00      	nop
    b7dc:	2000c5b0 	.word	0x2000c5b0
    b7e0:	40031100 	.word	0x40031100
    b7e4:	40031000 	.word	0x40031000
    b7e8:	40842500 	.word	0x40842500

0000b7ec <nrfx_gpiote_trigger_disable>:
{
    b7ec:	b508      	push	{r3, lr}
    b7ee:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b7f0:	f7ff fdca 	bl	b388 <pin_in_use_by_te>
    b7f4:	b1c0      	cbz	r0, b828 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b7f6:	4b0f      	ldr	r3, [pc, #60]	; (b834 <nrfx_gpiote_trigger_disable+0x48>)
    b7f8:	f102 0108 	add.w	r1, r2, #8
    b7fc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b800:	0799      	lsls	r1, r3, #30
    b802:	d411      	bmi.n	b828 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    b804:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b806:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    b808:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    b80a:	490b      	ldr	r1, [pc, #44]	; (b838 <nrfx_gpiote_trigger_disable+0x4c>)
    b80c:	009b      	lsls	r3, r3, #2
    b80e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b812:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    b816:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    b81a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    b81e:	f022 0203 	bic.w	r2, r2, #3
    b822:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    b826:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    b828:	2100      	movs	r1, #0
}
    b82a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    b82e:	4610      	mov	r0, r2
    b830:	f7ff bd9a 	b.w	b368 <nrf_gpio_cfg_sense_set>
    b834:	2000c5b0 	.word	0x2000c5b0
    b838:	40031000 	.word	0x40031000

0000b83c <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    b83c:	4b0c      	ldr	r3, [pc, #48]	; (b870 <nrfx_gpiote_pin_uninit+0x34>)
    b83e:	f100 0208 	add.w	r2, r0, #8
    b842:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    b846:	b510      	push	{r4, lr}
    if (!pin_in_use(pin))
    b848:	07db      	lsls	r3, r3, #31
{
    b84a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    b84c:	d50d      	bpl.n	b86a <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
    b84e:	f7ff ffcd 	bl	b7ec <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    b852:	4620      	mov	r0, r4
    b854:	f7ff fdea 	bl	b42c <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    b858:	2202      	movs	r2, #2
    b85a:	4b06      	ldr	r3, [pc, #24]	; (b874 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
    b85c:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    b860:	3480      	adds	r4, #128	; 0x80
    b862:	4805      	ldr	r0, [pc, #20]	; (b878 <nrfx_gpiote_pin_uninit+0x3c>)
    b864:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
    b868:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    b86a:	4804      	ldr	r0, [pc, #16]	; (b87c <nrfx_gpiote_pin_uninit+0x40>)
    b86c:	e7fc      	b.n	b868 <nrfx_gpiote_pin_uninit+0x2c>
    b86e:	bf00      	nop
    b870:	2000c5b0 	.word	0x2000c5b0
    b874:	40842500 	.word	0x40842500
    b878:	0bad0000 	.word	0x0bad0000
    b87c:	0bad0004 	.word	0x0bad0004

0000b880 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    b880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    b884:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    b886:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b888:	462c      	mov	r4, r5
{
    b88a:	4b4d      	ldr	r3, [pc, #308]	; (b9c0 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    b88c:	484d      	ldr	r0, [pc, #308]	; (b9c4 <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    b88e:	494e      	ldr	r1, [pc, #312]	; (b9c8 <nrfx_gpiote_irq_handler+0x148>)
{
    b890:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b892:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    b894:	b136      	cbz	r6, b8a4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    b896:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    b89a:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b89c:	bf1e      	ittt	ne
    b89e:	601c      	strne	r4, [r3, #0]
    b8a0:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    b8a2:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    b8a4:	3304      	adds	r3, #4
    b8a6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    b8a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    b8ac:	d1f1      	bne.n	b892 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b8ae:	4f45      	ldr	r7, [pc, #276]	; (b9c4 <nrfx_gpiote_irq_handler+0x144>)
    b8b0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    b8b4:	b193      	cbz	r3, b8dc <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
    b8b6:	4e45      	ldr	r6, [pc, #276]	; (b9cc <nrfx_gpiote_irq_handler+0x14c>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    b8b8:	f10d 080c 	add.w	r8, sp, #12
    b8bc:	6a33      	ldr	r3, [r6, #32]
    b8be:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    b8c0:	6233      	str	r3, [r6, #32]
    b8c2:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
    b8c6:	9803      	ldr	r0, [sp, #12]
    b8c8:	b950      	cbnz	r0, b8e0 <nrfx_gpiote_irq_handler+0x60>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b8ca:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
    b8ce:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    b8d2:	6a33      	ldr	r3, [r6, #32]
    b8d4:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    b8d6:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
    b8d8:	2b00      	cmp	r3, #0
    b8da:	d1f2      	bne.n	b8c2 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    b8dc:	2401      	movs	r4, #1
    b8de:	e069      	b.n	b9b4 <nrfx_gpiote_irq_handler+0x134>
                uint32_t pin = NRF_CTZ(latch[i]);
    b8e0:	fa90 faa0 	rbit	sl, r0
    b8e4:	faba fa8a 	clz	sl, sl
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b8e8:	4a39      	ldr	r2, [pc, #228]	; (b9d0 <nrfx_gpiote_irq_handler+0x150>)
    b8ea:	f10a 0308 	add.w	r3, sl, #8
    b8ee:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    b8f2:	ea4f 0cda 	mov.w	ip, sl, lsr #3
    bit = BITMASK_RELBIT_GET(bit);
    b8f6:	f00a 0307 	and.w	r3, sl, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    b8fa:	fa09 f403 	lsl.w	r4, r9, r3
    b8fe:	f818 300c 	ldrb.w	r3, [r8, ip]
    b902:	f3c1 0282 	ubfx	r2, r1, #2, #3
    b906:	ea23 0304 	bic.w	r3, r3, r4
    b90a:	f808 300c 	strb.w	r3, [r8, ip]
    b90e:	eb06 038a 	add.w	r3, r6, sl, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    b912:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    if (is_level(trigger))
    b916:	06c8      	lsls	r0, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b918:	4693      	mov	fp, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    b91a:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
    b91e:	d518      	bpl.n	b952 <nrfx_gpiote_irq_handler+0xd2>
        call_handler(pin, trigger);
    b920:	4611      	mov	r1, r2
    b922:	4650      	mov	r0, sl
    b924:	9301      	str	r3, [sp, #4]
    b926:	f7ff fd39 	bl	b39c <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    b92a:	9b01      	ldr	r3, [sp, #4]
    b92c:	b2e4      	uxtb	r4, r4
    b92e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
    b932:	f3c3 4301 	ubfx	r3, r3, #16, #2
    b936:	429c      	cmp	r4, r3
    b938:	d107      	bne.n	b94a <nrfx_gpiote_irq_handler+0xca>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    b93a:	2100      	movs	r1, #0
    b93c:	4650      	mov	r0, sl
    b93e:	f7ff fd13 	bl	b368 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    b942:	4621      	mov	r1, r4
    b944:	4650      	mov	r0, sl
    b946:	f7ff fd0f 	bl	b368 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    b94a:	fa09 f00a 	lsl.w	r0, r9, sl
    b94e:	6230      	str	r0, [r6, #32]
}
    b950:	e7b9      	b.n	b8c6 <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    b952:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    b954:	bf0c      	ite	eq
    b956:	2103      	moveq	r1, #3
    b958:	2102      	movne	r1, #2
    b95a:	4650      	mov	r0, sl
    b95c:	9201      	str	r2, [sp, #4]
    b95e:	f7ff fd03 	bl	b368 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    b962:	9a01      	ldr	r2, [sp, #4]
    b964:	2a03      	cmp	r2, #3
    b966:	d004      	beq.n	b972 <nrfx_gpiote_irq_handler+0xf2>
    b968:	2c02      	cmp	r4, #2
    b96a:	d107      	bne.n	b97c <nrfx_gpiote_irq_handler+0xfc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    b96c:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    b970:	d1eb      	bne.n	b94a <nrfx_gpiote_irq_handler+0xca>
            call_handler(pin, trigger);
    b972:	4659      	mov	r1, fp
    b974:	4650      	mov	r0, sl
    b976:	f7ff fd11 	bl	b39c <call_handler>
    b97a:	e7e6      	b.n	b94a <nrfx_gpiote_irq_handler+0xca>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    b97c:	2c03      	cmp	r4, #3
    b97e:	d1e4      	bne.n	b94a <nrfx_gpiote_irq_handler+0xca>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    b980:	f1bb 0f02 	cmp.w	fp, #2
    b984:	e7f4      	b.n	b970 <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    b986:	fa95 f3a5 	rbit	r3, r5
    b98a:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    b98e:	fa04 f203 	lsl.w	r2, r4, r3
    b992:	009b      	lsls	r3, r3, #2
    b994:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b998:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    b99c:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    b9a0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    b9a4:	f3c0 2004 	ubfx	r0, r0, #8, #5
    b9a8:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    b9ac:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    b9b0:	f7ff fcf4 	bl	b39c <call_handler>
    while (mask)
    b9b4:	2d00      	cmp	r5, #0
    b9b6:	d1e6      	bne.n	b986 <nrfx_gpiote_irq_handler+0x106>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    b9b8:	b005      	add	sp, #20
    b9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b9be:	bf00      	nop
    b9c0:	40031100 	.word	0x40031100
    b9c4:	40031000 	.word	0x40031000
    b9c8:	40031120 	.word	0x40031120
    b9cc:	40842500 	.word	0x40842500
    b9d0:	2000c5b0 	.word	0x2000c5b0

0000b9d4 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    b9d4:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    b9d6:	4c08      	ldr	r4, [pc, #32]	; (b9f8 <nrfx_ipc_init+0x24>)
{
    b9d8:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    b9da:	7923      	ldrb	r3, [r4, #4]
{
    b9dc:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    b9de:	b943      	cbnz	r3, b9f2 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
    b9e0:	202a      	movs	r0, #42	; 0x2a
    b9e2:	f7fd fbe9 	bl	91b8 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    b9e6:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
    b9e8:	4804      	ldr	r0, [pc, #16]	; (b9fc <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    b9ea:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
    b9ec:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
    b9ee:	60a5      	str	r5, [r4, #8]
}
    b9f0:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    b9f2:	4803      	ldr	r0, [pc, #12]	; (ba00 <nrfx_ipc_init+0x2c>)
    b9f4:	e7fc      	b.n	b9f0 <nrfx_ipc_init+0x1c>
    b9f6:	bf00      	nop
    b9f8:	2000caa8 	.word	0x2000caa8
    b9fc:	0bad0000 	.word	0x0bad0000
    ba00:	0bad000c 	.word	0x0bad000c

0000ba04 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    ba04:	2300      	movs	r3, #0
{
    ba06:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
    ba08:	4a0d      	ldr	r2, [pc, #52]	; (ba40 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    ba0a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    ba0e:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
    ba12:	3301      	adds	r3, #1
    ba14:	2b08      	cmp	r3, #8
    ba16:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
    ba1a:	d1f6      	bne.n	ba0a <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    ba1c:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
    ba1e:	4a08      	ldr	r2, [pc, #32]	; (ba40 <nrfx_ipc_config_load+0x3c>)
    ba20:	f100 0120 	add.w	r1, r0, #32
    ba24:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    ba28:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
    ba2c:	3301      	adds	r3, #1
    ba2e:	2b08      	cmp	r3, #8
    ba30:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    ba34:	d1f6      	bne.n	ba24 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    ba36:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
    ba38:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    ba3c:	bd30      	pop	{r4, r5, pc}
    ba3e:	bf00      	nop
    ba40:	4002a000 	.word	0x4002a000

0000ba44 <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
    ba44:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    ba46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    p_reg->SEND_CNF[index] = channels_mask;
    ba4a:	4a13      	ldr	r2, [pc, #76]	; (ba98 <nrfx_ipc_uninit+0x54>)
    ba4c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    ba50:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
    ba54:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    ba58:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    ba5c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    ba60:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    ba64:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    ba68:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
    ba6c:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
    ba70:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
    ba74:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
    ba78:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
    ba7c:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
    ba80:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
    ba84:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
    ba88:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
    ba8c:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
    ba90:	4a02      	ldr	r2, [pc, #8]	; (ba9c <nrfx_ipc_uninit+0x58>)
    ba92:	7113      	strb	r3, [r2, #4]
}
    ba94:	4770      	bx	lr
    ba96:	bf00      	nop
    ba98:	4002a000 	.word	0x4002a000
    ba9c:	2000caa8 	.word	0x2000caa8

0000baa0 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
    baa0:	4b0c      	ldr	r3, [pc, #48]	; (bad4 <nrfx_ipc_irq_handler+0x34>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    baa2:	b430      	push	{r4, r5}
    baa4:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
    baa8:	2401      	movs	r4, #1
    uint32_t bitmask = events_map;
    baaa:	4603      	mov	r3, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    baac:	2500      	movs	r5, #0
    while (bitmask)
    baae:	b923      	cbnz	r3, baba <nrfx_ipc_irq_handler+0x1a>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
}
    bab0:	bc30      	pop	{r4, r5}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
    bab2:	4b09      	ldr	r3, [pc, #36]	; (bad8 <nrfx_ipc_irq_handler+0x38>)
    bab4:	681a      	ldr	r2, [r3, #0]
    bab6:	6899      	ldr	r1, [r3, #8]
    bab8:	4710      	bx	r2
        uint8_t event_idx = NRF_CTZ(bitmask);
    baba:	fa93 f2a3 	rbit	r2, r3
    babe:	fab2 f282 	clz	r2, r2
        bitmask &= ~(1UL << event_idx);
    bac2:	fa04 f102 	lsl.w	r1, r4, r2
    bac6:	ea23 0301 	bic.w	r3, r3, r1
    baca:	4904      	ldr	r1, [pc, #16]	; (badc <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    bacc:	0092      	lsls	r2, r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bace:	508d      	str	r5, [r1, r2]
}
    bad0:	e7ed      	b.n	baae <nrfx_ipc_irq_handler+0xe>
    bad2:	bf00      	nop
    bad4:	4002a000 	.word	0x4002a000
    bad8:	2000caa8 	.word	0x2000caa8
    badc:	4002a100 	.word	0x4002a100

0000bae0 <spim_pin_uninit>:
    return err_code;
}

static void spim_pin_uninit(uint32_t pin)
{
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    bae0:	1c43      	adds	r3, r0, #1
    bae2:	d006      	beq.n	baf2 <spim_pin_uninit+0x12>
    reg->PIN_CNF[pin_number] = cnf;
    bae4:	2202      	movs	r2, #2
    bae6:	4b03      	ldr	r3, [pc, #12]	; (baf4 <spim_pin_uninit+0x14>)
    *p_pin = pin_number & 0x1F;
    bae8:	f000 001f 	and.w	r0, r0, #31
    reg->PIN_CNF[pin_number] = cnf;
    baec:	3080      	adds	r0, #128	; 0x80
    baee:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    {
        return;
    }

    nrf_gpio_cfg_default(pin);
}
    baf2:	4770      	bx	lr
    baf4:	40842500 	.word	0x40842500

0000baf8 <nrf_gpio_pin_write>:
    *p_pin = pin_number & 0x1F;
    baf8:	f000 031f 	and.w	r3, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    bafc:	2001      	movs	r0, #1
    bafe:	4098      	lsls	r0, r3
    bb00:	4b02      	ldr	r3, [pc, #8]	; (bb0c <nrf_gpio_pin_write+0x14>)
    if (value == 0)
    bb02:	b909      	cbnz	r1, bb08 <nrf_gpio_pin_write+0x10>
    p_reg->OUTCLR = clr_mask;
    bb04:	60d8      	str	r0, [r3, #12]
}
    bb06:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
    bb08:	6098      	str	r0, [r3, #8]
}
    bb0a:	4770      	bx	lr
    bb0c:	40842500 	.word	0x40842500

0000bb10 <nrfx_spim_init>:
{
    bb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bb14:	4606      	mov	r6, r0
    bb16:	460c      	mov	r4, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    bb18:	4d4a      	ldr	r5, [pc, #296]	; (bc44 <nrfx_spim_init+0x134>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    bb1a:	7931      	ldrb	r1, [r6, #4]
{
    bb1c:	4610      	mov	r0, r2
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    bb1e:	014f      	lsls	r7, r1, #5
    bb20:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    bb24:	7f0a      	ldrb	r2, [r1, #28]
    bb26:	2a00      	cmp	r2, #0
    bb28:	f040 808a 	bne.w	bc40 <nrfx_spim_init+0x130>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    bb2c:	6832      	ldr	r2, [r6, #0]
    p_cb->handler = handler;
    bb2e:	51e8      	str	r0, [r5, r7]
    p_cb->p_context = p_context;
    bb30:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    bb32:	7be0      	ldrb	r0, [r4, #15]
    bb34:	7f8b      	ldrb	r3, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    bb36:	f894 c004 	ldrb.w	ip, [r4, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    bb3a:	f360 0300 	bfi	r3, r0, #0, #1
    p_cb->ss_active_high = p_config->ss_active_high;
    bb3e:	f36c 0341 	bfi	r3, ip, #1, #1
    bb42:	778b      	strb	r3, [r1, #30]
    p_cb->ss_pin = p_config->ss_pin;
    bb44:	78e3      	ldrb	r3, [r4, #3]
    bb46:	77cb      	strb	r3, [r1, #31]
    configure_pins(p_instance, p_config);
    bb48:	f8d6 9000 	ldr.w	r9, [r6]
    if (!p_config->skip_gpio_cfg)
    bb4c:	2800      	cmp	r0, #0
    bb4e:	d135      	bne.n	bbbc <nrfx_spim_init+0xac>
        nrf_gpio_pin_write(p_config->sck_pin,
    bb50:	7b21      	ldrb	r1, [r4, #12]
    bb52:	7820      	ldrb	r0, [r4, #0]
    bb54:	2901      	cmp	r1, #1
    bb56:	bf94      	ite	ls
    bb58:	2100      	movls	r1, #0
    bb5a:	2101      	movhi	r1, #1
    bb5c:	f7ff ffcc 	bl	baf8 <nrf_gpio_pin_write>
    reg->PIN_CNF[pin_number] = cnf;
    bb60:	2101      	movs	r1, #1
    *p_pin = pin_number & 0x1F;
    bb62:	7823      	ldrb	r3, [r4, #0]
    reg->PIN_CNF[pin_number] = cnf;
    bb64:	f8df 80e0 	ldr.w	r8, [pc, #224]	; bc48 <nrfx_spim_init+0x138>
    *p_pin = pin_number & 0x1F;
    bb68:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    bb6c:	3380      	adds	r3, #128	; 0x80
    bb6e:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    bb72:	7863      	ldrb	r3, [r4, #1]
    bb74:	2bff      	cmp	r3, #255	; 0xff
    bb76:	d008      	beq.n	bb8a <nrfx_spim_init+0x7a>
    *p_pin = pin_number & 0x1F;
    bb78:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    bb7c:	4099      	lsls	r1, r3
    p_reg->OUTCLR = clr_mask;
    bb7e:	f8c8 100c 	str.w	r1, [r8, #12]
    reg->PIN_CNF[pin_number] = cnf;
    bb82:	2103      	movs	r1, #3
    bb84:	3380      	adds	r3, #128	; 0x80
    bb86:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    bb8a:	78a3      	ldrb	r3, [r4, #2]
    bb8c:	2bff      	cmp	r3, #255	; 0xff
    bb8e:	d006      	beq.n	bb9e <nrfx_spim_init+0x8e>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    bb90:	7ba1      	ldrb	r1, [r4, #14]
    *p_pin = pin_number & 0x1F;
    bb92:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    bb96:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    bb98:	3380      	adds	r3, #128	; 0x80
    bb9a:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    bb9e:	78e0      	ldrb	r0, [r4, #3]
    bba0:	28ff      	cmp	r0, #255	; 0xff
    bba2:	d00b      	beq.n	bbbc <nrfx_spim_init+0xac>
                               p_config->ss_active_high ? 0 : 1);
    bba4:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
    bba6:	f081 0101 	eor.w	r1, r1, #1
    bbaa:	f7ff ffa5 	bl	baf8 <nrf_gpio_pin_write>
    bbae:	2103      	movs	r1, #3
    *p_pin = pin_number & 0x1F;
    bbb0:	78e3      	ldrb	r3, [r4, #3]
    bbb2:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    bbb6:	3380      	adds	r3, #128	; 0x80
    bbb8:	f848 1023 	str.w	r1, [r8, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    bbbc:	7c23      	ldrb	r3, [r4, #16]
    bbbe:	b993      	cbnz	r3, bbe6 <nrfx_spim_init+0xd6>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    bbc0:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    bbc2:	7820      	ldrb	r0, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    bbc4:	2bff      	cmp	r3, #255	; 0xff
    bbc6:	bf18      	it	ne
    bbc8:	4619      	movne	r1, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    bbca:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    bbcc:	bf08      	it	eq
    bbce:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    bbd2:	2bff      	cmp	r3, #255	; 0xff
    bbd4:	bf08      	it	eq
    bbd6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    bbda:	f8c9 0508 	str.w	r0, [r9, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
    bbde:	f8c9 150c 	str.w	r1, [r9, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    bbe2:	f8c9 3510 	str.w	r3, [r9, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    bbe6:	68a3      	ldr	r3, [r4, #8]
    bbe8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    bbec:	7b63      	ldrb	r3, [r4, #13]
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    bbee:	7b21      	ldrb	r1, [r4, #12]
    bbf0:	3b00      	subs	r3, #0
    bbf2:	bf18      	it	ne
    bbf4:	2301      	movne	r3, #1
    switch (spi_mode)
    bbf6:	2902      	cmp	r1, #2
    bbf8:	d01c      	beq.n	bc34 <nrfx_spim_init+0x124>
    bbfa:	2903      	cmp	r1, #3
    bbfc:	d01d      	beq.n	bc3a <nrfx_spim_init+0x12a>
    bbfe:	2901      	cmp	r1, #1
    bc00:	d101      	bne.n	bc06 <nrfx_spim_init+0xf6>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    bc02:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    bc06:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    bc0a:	79a3      	ldrb	r3, [r4, #6]
    bc0c:	f8c2 35c0 	str.w	r3, [r2, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    bc10:	2307      	movs	r3, #7
    bc12:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    if (p_cb->handler)
    bc16:	59eb      	ldr	r3, [r5, r7]
    bc18:	b123      	cbz	r3, bc24 <nrfx_spim_init+0x114>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    bc1a:	6830      	ldr	r0, [r6, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    bc1c:	f340 3007 	sbfx	r0, r0, #12, #8
    bc20:	f7fd faca 	bl	91b8 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
    bc24:	2300      	movs	r3, #0
    bc26:	443d      	add	r5, r7
    bc28:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    bc2a:	2301      	movs	r3, #1
    return err_code;
    bc2c:	4807      	ldr	r0, [pc, #28]	; (bc4c <nrfx_spim_init+0x13c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    bc2e:	772b      	strb	r3, [r5, #28]
}
    bc30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    bc34:	f043 0304 	orr.w	r3, r3, #4
        break;
    bc38:	e7e5      	b.n	bc06 <nrfx_spim_init+0xf6>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    bc3a:	f043 0306 	orr.w	r3, r3, #6
        break;
    bc3e:	e7e2      	b.n	bc06 <nrfx_spim_init+0xf6>
        return err_code;
    bc40:	4803      	ldr	r0, [pc, #12]	; (bc50 <nrfx_spim_init+0x140>)
    bc42:	e7f5      	b.n	bc30 <nrfx_spim_init+0x120>
    bc44:	2000cab4 	.word	0x2000cab4
    bc48:	40842500 	.word	0x40842500
    bc4c:	0bad0000 	.word	0x0bad0000
    bc50:	0bad0005 	.word	0x0bad0005

0000bc54 <nrfx_spim_uninit>:

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    bc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    bc56:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    bc58:	4d1f      	ldr	r5, [pc, #124]	; (bcd8 <nrfx_spim_uninit+0x84>)
    bc5a:	015e      	lsls	r6, r3, #5
    bc5c:	eb05 1743 	add.w	r7, r5, r3, lsl #5
    bc60:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    bc62:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    bc64:	b1b3      	cbz	r3, bc94 <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    bc66:	f344 3007 	sbfx	r0, r4, #12, #8
    bc6a:	f7fd fab5 	bl	91d8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    bc6e:	4b1b      	ldr	r3, [pc, #108]	; (bcdc <nrfx_spim_uninit+0x88>)
    bc70:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    bc74:	7f7b      	ldrb	r3, [r7, #29]
    bc76:	b16b      	cbz	r3, bc94 <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bc78:	2301      	movs	r3, #1
    bc7a:	2764      	movs	r7, #100	; 0x64
    bc7c:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bc7e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    bc82:	b923      	cbnz	r3, bc8e <nrfx_spim_uninit+0x3a>
    bc84:	2001      	movs	r0, #1
    bc86:	f003 fbde 	bl	f446 <nrfx_busy_wait>
    bc8a:	3f01      	subs	r7, #1
    bc8c:	d1f7      	bne.n	bc7e <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
    bc8e:	2200      	movs	r2, #0
    bc90:	19ab      	adds	r3, r5, r6
    bc92:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    bc94:	2300      	movs	r3, #0
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
    bc96:	19a9      	adds	r1, r5, r6
    bc98:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    bc9c:	7f8b      	ldrb	r3, [r1, #30]
    bc9e:	07db      	lsls	r3, r3, #31
    bca0:	d415      	bmi.n	bcce <nrfx_spim_uninit+0x7a>
    return p_reg->PSEL.SCK;
    bca2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
    bca6:	f7ff ff1b 	bl	bae0 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
    bcaa:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
    bcae:	f7ff ff17 	bl	bae0 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
    bcb2:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
    bcb6:	f7ff ff13 	bl	bae0 <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    bcba:	7fcb      	ldrb	r3, [r1, #31]
    bcbc:	2bff      	cmp	r3, #255	; 0xff
    bcbe:	d006      	beq.n	bcce <nrfx_spim_uninit+0x7a>
    bcc0:	2102      	movs	r1, #2
    bcc2:	4a07      	ldr	r2, [pc, #28]	; (bce0 <nrfx_spim_uninit+0x8c>)
    *p_pin = pin_number & 0x1F;
    bcc4:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    bcc8:	3380      	adds	r3, #128	; 0x80
    bcca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    bcce:	2300      	movs	r3, #0
    bcd0:	4435      	add	r5, r6
    bcd2:	772b      	strb	r3, [r5, #28]
}
    bcd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bcd6:	bf00      	nop
    bcd8:	2000cab4 	.word	0x2000cab4
    bcdc:	00080152 	.word	0x00080152
    bce0:	40842500 	.word	0x40842500

0000bce4 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    bce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    bce8:	4f36      	ldr	r7, [pc, #216]	; (bdc4 <nrfx_spim_xfer+0xe0>)
    bcea:	7903      	ldrb	r3, [r0, #4]
{
    bcec:	4614      	mov	r4, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    bcee:	eb07 1843 	add.w	r8, r7, r3, lsl #5
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    bcf2:	f898 201d 	ldrb.w	r2, [r8, #29]
{
    bcf6:	4681      	mov	r9, r0
    bcf8:	460d      	mov	r5, r1
    if (p_cb->transfer_in_progress)
    bcfa:	015e      	lsls	r6, r3, #5
    bcfc:	2a00      	cmp	r2, #0
    bcfe:	d15e      	bne.n	bdbe <nrfx_spim_xfer+0xda>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    bd00:	59ba      	ldr	r2, [r7, r6]
    bd02:	b12a      	cbz	r2, bd10 <nrfx_spim_xfer+0x2c>
    bd04:	f014 0f14 	tst.w	r4, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    bd08:	bf04      	itt	eq
    bd0a:	2201      	moveq	r2, #1
    bd0c:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    bd10:	eb07 0c06 	add.w	ip, r7, r6
    bd14:	f10c 0c0c 	add.w	ip, ip, #12
    bd18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    bd1c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    bd20:	2101      	movs	r1, #1
    bd22:	4640      	mov	r0, r8
    bd24:	f003 fb93 	bl	f44e <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    bd28:	6829      	ldr	r1, [r5, #0]
    bd2a:	b121      	cbz	r1, bd36 <nrfx_spim_xfer+0x52>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    bd2c:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    bd30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    bd34:	d106      	bne.n	bd44 <nrfx_spim_xfer+0x60>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    bd36:	68aa      	ldr	r2, [r5, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    bd38:	b152      	cbz	r2, bd50 <nrfx_spim_xfer+0x6c>
    bd3a:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    bd3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    bd42:	d005      	beq.n	bd50 <nrfx_spim_xfer+0x6c>
        p_cb->transfer_in_progress = false;
    bd44:	2300      	movs	r3, #0
    bd46:	443e      	add	r6, r7
        return err_code;
    bd48:	481f      	ldr	r0, [pc, #124]	; (bdc8 <nrfx_spim_xfer+0xe4>)
        p_cb->transfer_in_progress = false;
    bd4a:	7773      	strb	r3, [r6, #29]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
    bd4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    bd50:	f8d9 3000 	ldr.w	r3, [r9]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    bd54:	6868      	ldr	r0, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    bd56:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    bd5a:	68e9      	ldr	r1, [r5, #12]
    p_reg->TXD.MAXCNT = length;
    bd5c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    bd60:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bd64:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
    bd66:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bd6a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    bd6e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    bd72:	f014 0201 	ands.w	r2, r4, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    bd76:	bf18      	it	ne
    bd78:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    bd7a:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    bd7e:	f014 0202 	ands.w	r2, r4, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    bd82:	bf18      	it	ne
    bd84:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    bd86:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    bd8a:	f014 0208 	ands.w	r2, r4, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bd8e:	bf04      	itt	eq
    bd90:	2101      	moveq	r1, #1
    bd92:	6119      	streq	r1, [r3, #16]
    if (!p_cb->handler)
    bd94:	59b9      	ldr	r1, [r7, r6]
    bd96:	b949      	cbnz	r1, bdac <nrfx_spim_xfer+0xc8>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    bd98:	b912      	cbnz	r2, bda0 <nrfx_spim_xfer+0xbc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bd9a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    bd9e:	e7fb      	b.n	bd98 <nrfx_spim_xfer+0xb4>
        set_ss_pin_state(p_cb, false);
    bda0:	2100      	movs	r1, #0
    bda2:	4640      	mov	r0, r8
    bda4:	f003 fb53 	bl	f44e <set_ss_pin_state>
    return err_code;
    bda8:	4808      	ldr	r0, [pc, #32]	; (bdcc <nrfx_spim_xfer+0xe8>)
}
    bdaa:	e7cf      	b.n	bd4c <nrfx_spim_xfer+0x68>
    if (!enable)
    bdac:	2240      	movs	r2, #64	; 0x40
    bdae:	f014 0f04 	tst.w	r4, #4
    p_reg->INTENCLR = mask;
    bdb2:	bf14      	ite	ne
    bdb4:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
    bdb8:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
    bdbc:	e7f4      	b.n	bda8 <nrfx_spim_xfer+0xc4>
        return err_code;
    bdbe:	4804      	ldr	r0, [pc, #16]	; (bdd0 <nrfx_spim_xfer+0xec>)
    bdc0:	e7c4      	b.n	bd4c <nrfx_spim_xfer+0x68>
    bdc2:	bf00      	nop
    bdc4:	2000cab4 	.word	0x2000cab4
    bdc8:	0bad000a 	.word	0x0bad000a
    bdcc:	0bad0000 	.word	0x0bad0000
    bdd0:	0bad000b 	.word	0x0bad000b

0000bdd4 <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bdd4:	4b0c      	ldr	r3, [pc, #48]	; (be08 <nrfx_spim_3_irq_handler+0x34>)
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
    bdd6:	b510      	push	{r4, lr}
    bdd8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    bddc:	b192      	cbz	r2, be04 <nrfx_spim_3_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bdde:	2400      	movs	r4, #0
    set_ss_pin_state(p_cb, false);
    bde0:	4a0a      	ldr	r2, [pc, #40]	; (be0c <nrfx_spim_3_irq_handler+0x38>)
    bde2:	4621      	mov	r1, r4
    bde4:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
    bde8:	4610      	mov	r0, r2
    bdea:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    bdee:	f003 fb2e 	bl	f44e <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    bdf2:	e9d2 3100 	ldrd	r3, r1, [r2]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    bdf6:	7214      	strb	r4, [r2, #8]
    p_cb->transfer_in_progress = false;
    bdf8:	7754      	strb	r4, [r2, #29]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    bdfa:	f102 0008 	add.w	r0, r2, #8
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
    bdfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    be02:	4718      	bx	r3
}
    be04:	bd10      	pop	{r4, pc}
    be06:	bf00      	nop
    be08:	4000b000 	.word	0x4000b000
    be0c:	2000cab4 	.word	0x2000cab4

0000be10 <rpc_handle_data_message>:
    be10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be14:	4680      	mov	r8, r0
    be16:	4605      	mov	r5, r0
    be18:	2404      	movs	r4, #4
    be1a:	f858 7b08 	ldr.w	r7, [r8], #8
    be1e:	4e0c      	ldr	r6, [pc, #48]	; (be50 <rpc_handle_data_message+0x40>)
    be20:	b2ff      	uxtb	r7, r7
    be22:	7833      	ldrb	r3, [r6, #0]
    be24:	42bb      	cmp	r3, r7
    be26:	d009      	beq.n	be3c <rpc_handle_data_message+0x2c>
    be28:	3c01      	subs	r4, #1
    be2a:	f106 060c 	add.w	r6, r6, #12
    be2e:	d1f8      	bne.n	be22 <rpc_handle_data_message+0x12>
    be30:	68a8      	ldr	r0, [r5, #8]
    be32:	b108      	cbz	r0, be38 <rpc_handle_data_message+0x28>
    be34:	f003 fb5b 	bl	f4ee <rpc_transport_peer_data_free>
    be38:	4620      	mov	r0, r4
    be3a:	e006      	b.n	be4a <rpc_handle_data_message+0x3a>
    be3c:	6829      	ldr	r1, [r5, #0]
    be3e:	4640      	mov	r0, r8
    be40:	6873      	ldr	r3, [r6, #4]
    be42:	0c09      	lsrs	r1, r1, #16
    be44:	4798      	blx	r3
    be46:	2802      	cmp	r0, #2
    be48:	d0ee      	beq.n	be28 <rpc_handle_data_message+0x18>
    be4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be4e:	bf00      	nop
    be50:	000102c8 	.word	0x000102c8

0000be54 <ipc_trace_init>:
    be54:	2100      	movs	r1, #0
    be56:	4b07      	ldr	r3, [pc, #28]	; (be74 <ipc_trace_init+0x20>)
    be58:	2201      	movs	r2, #1
    be5a:	7019      	strb	r1, [r3, #0]
    be5c:	4b06      	ldr	r3, [pc, #24]	; (be78 <ipc_trace_init+0x24>)
    be5e:	7019      	strb	r1, [r3, #0]
    be60:	4b06      	ldr	r3, [pc, #24]	; (be7c <ipc_trace_init+0x28>)
    be62:	6019      	str	r1, [r3, #0]
    be64:	4b06      	ldr	r3, [pc, #24]	; (be80 <ipc_trace_init+0x2c>)
    be66:	6019      	str	r1, [r3, #0]
    be68:	4b06      	ldr	r3, [pc, #24]	; (be84 <ipc_trace_init+0x30>)
    be6a:	6018      	str	r0, [r3, #0]
    be6c:	4806      	ldr	r0, [pc, #24]	; (be88 <ipc_trace_init+0x34>)
    be6e:	f7ff b849 	b.w	af04 <nrf_modem_os_sem_init>
    be72:	bf00      	nop
    be74:	2000d2b6 	.word	0x2000d2b6
    be78:	2000d2b5 	.word	0x2000d2b5
    be7c:	2000cad4 	.word	0x2000cad4
    be80:	2000cae4 	.word	0x2000cae4
    be84:	2000cae8 	.word	0x2000cae8
    be88:	2000caec 	.word	0x2000caec

0000be8c <ipc_trace_handle>:
    be8c:	b470      	push	{r4, r5, r6}
    be8e:	4b2d      	ldr	r3, [pc, #180]	; (bf44 <ipc_trace_handle+0xb8>)
    be90:	681b      	ldr	r3, [r3, #0]
    be92:	6919      	ldr	r1, [r3, #16]
    be94:	6958      	ldr	r0, [r3, #20]
    be96:	7c1a      	ldrb	r2, [r3, #16]
    be98:	2200      	movs	r2, #0
    be9a:	741a      	strb	r2, [r3, #16]
    be9c:	7c5c      	ldrb	r4, [r3, #17]
    be9e:	745a      	strb	r2, [r3, #17]
    bea0:	7c9c      	ldrb	r4, [r3, #18]
    bea2:	749a      	strb	r2, [r3, #18]
    bea4:	7cdc      	ldrb	r4, [r3, #19]
    bea6:	74da      	strb	r2, [r3, #19]
    bea8:	7d1c      	ldrb	r4, [r3, #20]
    beaa:	751a      	strb	r2, [r3, #20]
    beac:	7d5c      	ldrb	r4, [r3, #21]
    beae:	755a      	strb	r2, [r3, #21]
    beb0:	7d9c      	ldrb	r4, [r3, #22]
    beb2:	2903      	cmp	r1, #3
    beb4:	759a      	strb	r2, [r3, #22]
    beb6:	7ddc      	ldrb	r4, [r3, #23]
    beb8:	75da      	strb	r2, [r3, #23]
    beba:	d029      	beq.n	bf10 <ipc_trace_handle+0x84>
    bebc:	2904      	cmp	r1, #4
    bebe:	d033      	beq.n	bf28 <ipc_trace_handle+0x9c>
    bec0:	2901      	cmp	r1, #1
    bec2:	d12f      	bne.n	bf24 <ipc_trace_handle+0x98>
    bec4:	6885      	ldr	r5, [r0, #8]
    bec6:	4e20      	ldr	r6, [pc, #128]	; (bf48 <ipc_trace_handle+0xbc>)
    bec8:	4295      	cmp	r5, r2
    beca:	d110      	bne.n	beee <ipc_trace_handle+0x62>
    becc:	bc70      	pop	{r4, r5, r6}
    bece:	2101      	movs	r1, #1
    bed0:	7a1a      	ldrb	r2, [r3, #8]
    bed2:	2200      	movs	r2, #0
    bed4:	7219      	strb	r1, [r3, #8]
    bed6:	7a59      	ldrb	r1, [r3, #9]
    bed8:	725a      	strb	r2, [r3, #9]
    beda:	7a99      	ldrb	r1, [r3, #10]
    bedc:	729a      	strb	r2, [r3, #10]
    bede:	7ada      	ldrb	r2, [r3, #11]
    bee0:	f06f 025f 	mvn.w	r2, #95	; 0x5f
    bee4:	72da      	strb	r2, [r3, #11]
    bee6:	4b19      	ldr	r3, [pc, #100]	; (bf4c <ipc_trace_handle+0xc0>)
    bee8:	6818      	ldr	r0, [r3, #0]
    beea:	f003 ba64 	b.w	f3b6 <nrf_modem_os_sem_give>
    beee:	1c91      	adds	r1, r2, #2
    bef0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    bef4:	684c      	ldr	r4, [r1, #4]
    bef6:	7821      	ldrb	r1, [r4, #0]
    bef8:	2962      	cmp	r1, #98	; 0x62
    befa:	d007      	beq.n	bf0c <ipc_trace_handle+0x80>
    befc:	2963      	cmp	r1, #99	; 0x63
    befe:	bf14      	ite	ne
    bf00:	2102      	movne	r1, #2
    bf02:	2100      	moveq	r1, #0
    bf04:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
    bf08:	3201      	adds	r2, #1
    bf0a:	e7dd      	b.n	bec8 <ipc_trace_handle+0x3c>
    bf0c:	2101      	movs	r1, #1
    bf0e:	e7f9      	b.n	bf04 <ipc_trace_handle+0x78>
    bf10:	7a18      	ldrb	r0, [r3, #8]
    bf12:	7219      	strb	r1, [r3, #8]
    bf14:	7a59      	ldrb	r1, [r3, #9]
    bf16:	725a      	strb	r2, [r3, #9]
    bf18:	7a99      	ldrb	r1, [r3, #10]
    bf1a:	729a      	strb	r2, [r3, #10]
    bf1c:	7ada      	ldrb	r2, [r3, #11]
    bf1e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
    bf22:	72da      	strb	r2, [r3, #11]
    bf24:	bc70      	pop	{r4, r5, r6}
    bf26:	4770      	bx	lr
    bf28:	7a18      	ldrb	r0, [r3, #8]
    bf2a:	7219      	strb	r1, [r3, #8]
    bf2c:	7a59      	ldrb	r1, [r3, #9]
    bf2e:	725a      	strb	r2, [r3, #9]
    bf30:	7a99      	ldrb	r1, [r3, #10]
    bf32:	729a      	strb	r2, [r3, #10]
    bf34:	7ada      	ldrb	r2, [r3, #11]
    bf36:	f06f 025f 	mvn.w	r2, #95	; 0x5f
    bf3a:	72da      	strb	r2, [r3, #11]
    bf3c:	2201      	movs	r2, #1
    bf3e:	4b04      	ldr	r3, [pc, #16]	; (bf50 <ipc_trace_handle+0xc4>)
    bf40:	701a      	strb	r2, [r3, #0]
    bf42:	e7ef      	b.n	bf24 <ipc_trace_handle+0x98>
    bf44:	2000cae8 	.word	0x2000cae8
    bf48:	2000cad8 	.word	0x2000cad8
    bf4c:	2000caec 	.word	0x2000caec
    bf50:	2000d2b5 	.word	0x2000d2b5

0000bf54 <rpc_transport_ipc_msg_alloc>:
    bf54:	b570      	push	{r4, r5, r6, lr}
    bf56:	4616      	mov	r6, r2
    bf58:	2400      	movs	r4, #0
    bf5a:	6803      	ldr	r3, [r0, #0]
    bf5c:	42a3      	cmp	r3, r4
    bf5e:	d101      	bne.n	bf64 <rpc_transport_ipc_msg_alloc+0x10>
    bf60:	2300      	movs	r3, #0
    bf62:	e01c      	b.n	bf9e <rpc_transport_ipc_msg_alloc+0x4a>
    bf64:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
    bf68:	6855      	ldr	r5, [r2, #4]
    bf6a:	b2ed      	uxtb	r5, r5
    bf6c:	2d03      	cmp	r5, #3
    bf6e:	d118      	bne.n	bfa2 <rpc_transport_ipc_msg_alloc+0x4e>
    bf70:	eb01 1384 	add.w	r3, r1, r4, lsl #6
    bf74:	6093      	str	r3, [r2, #8]
    bf76:	6851      	ldr	r1, [r2, #4]
    bf78:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    bf7c:	6051      	str	r1, [r2, #4]
    bf7e:	490c      	ldr	r1, [pc, #48]	; (bfb0 <rpc_transport_ipc_msg_alloc+0x5c>)
    bf80:	8808      	ldrh	r0, [r1, #0]
    bf82:	1c44      	adds	r4, r0, #1
    bf84:	800c      	strh	r4, [r1, #0]
    bf86:	6851      	ldr	r1, [r2, #4]
    bf88:	b289      	uxth	r1, r1
    bf8a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    bf8e:	6051      	str	r1, [r2, #4]
    bf90:	4618      	mov	r0, r3
    bf92:	2240      	movs	r2, #64	; 0x40
    bf94:	2100      	movs	r1, #0
    bf96:	f003 fdb2 	bl	fafe <memset>
    bf9a:	4603      	mov	r3, r0
    bf9c:	6046      	str	r6, [r0, #4]
    bf9e:	4618      	mov	r0, r3
    bfa0:	bd70      	pop	{r4, r5, r6, pc}
    bfa2:	b915      	cbnz	r5, bfaa <rpc_transport_ipc_msg_alloc+0x56>
    bfa4:	6895      	ldr	r5, [r2, #8]
    bfa6:	2d00      	cmp	r5, #0
    bfa8:	d0e2      	beq.n	bf70 <rpc_transport_ipc_msg_alloc+0x1c>
    bfaa:	3401      	adds	r4, #1
    bfac:	e7d6      	b.n	bf5c <rpc_transport_ipc_msg_alloc+0x8>
    bfae:	bf00      	nop
    bfb0:	2000cea2 	.word	0x2000cea2

0000bfb4 <handle_modem_rpc_msg.part.0>:
    bfb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfb8:	4606      	mov	r6, r0
    bfba:	460f      	mov	r7, r1
    bfbc:	2500      	movs	r5, #0
    bfbe:	f8df 8074 	ldr.w	r8, [pc, #116]	; c034 <handle_modem_rpc_msg.part.0+0x80>
    bfc2:	6833      	ldr	r3, [r6, #0]
    bfc4:	429d      	cmp	r5, r3
    bfc6:	d301      	bcc.n	bfcc <handle_modem_rpc_msg.part.0+0x18>
    bfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bfcc:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
    bfd0:	68a3      	ldr	r3, [r4, #8]
    bfd2:	b1fb      	cbz	r3, c014 <handle_modem_rpc_msg.part.0+0x60>
    bfd4:	6863      	ldr	r3, [r4, #4]
    bfd6:	b2db      	uxtb	r3, r3
    bfd8:	2b01      	cmp	r3, #1
    bfda:	d11b      	bne.n	c014 <handle_modem_rpc_msg.part.0+0x60>
    bfdc:	6862      	ldr	r2, [r4, #4]
    bfde:	f8b8 3000 	ldrh.w	r3, [r8]
    bfe2:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
    bfe6:	d115      	bne.n	c014 <handle_modem_rpc_msg.part.0+0x60>
    bfe8:	2f02      	cmp	r7, #2
    bfea:	68a0      	ldr	r0, [r4, #8]
    bfec:	d114      	bne.n	c018 <handle_modem_rpc_msg.part.0+0x64>
    bfee:	f7ff ff0f 	bl	be10 <rpc_handle_data_message>
    bff2:	2802      	cmp	r0, #2
    bff4:	d00e      	beq.n	c014 <handle_modem_rpc_msg.part.0+0x60>
    bff6:	2801      	cmp	r0, #1
    bff8:	d113      	bne.n	c022 <handle_modem_rpc_msg.part.0+0x6e>
    bffa:	6863      	ldr	r3, [r4, #4]
    bffc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c000:	f043 0302 	orr.w	r3, r3, #2
    c004:	6063      	str	r3, [r4, #4]
    c006:	f8b8 3000 	ldrh.w	r3, [r8]
    c00a:	3301      	adds	r3, #1
    c00c:	f8a8 3000 	strh.w	r3, [r8]
    c010:	f7fe ff94 	bl	af3c <nrf_modem_os_application_irq_set>
    c014:	3501      	adds	r5, #1
    c016:	e7d4      	b.n	bfc2 <handle_modem_rpc_msg.part.0+0xe>
    c018:	6801      	ldr	r1, [r0, #0]
    c01a:	0c09      	lsrs	r1, r1, #16
    c01c:	f003 fa23 	bl	f466 <rpc_handle_ctrl_message>
    c020:	e7e7      	b.n	bff2 <handle_modem_rpc_msg.part.0+0x3e>
    c022:	2800      	cmp	r0, #0
    c024:	d1ef      	bne.n	c006 <handle_modem_rpc_msg.part.0+0x52>
    c026:	6863      	ldr	r3, [r4, #4]
    c028:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c02c:	f043 0303 	orr.w	r3, r3, #3
    c030:	e7e8      	b.n	c004 <handle_modem_rpc_msg.part.0+0x50>
    c032:	bf00      	nop
    c034:	2000cea0 	.word	0x2000cea0

0000c038 <ipc_irq_handler>:
    c038:	0601      	lsls	r1, r0, #24
    c03a:	b570      	push	{r4, r5, r6, lr}
    c03c:	4604      	mov	r4, r0
    c03e:	d503      	bpl.n	c048 <ipc_irq_handler+0x10>
    c040:	f7ff ff24 	bl	be8c <ipc_trace_handle>
    c044:	f7fe ff8a 	bl	af5c <nrf_modem_os_event_notify>
    c048:	f014 0001 	ands.w	r0, r4, #1
    c04c:	d039      	beq.n	c0c2 <ipc_irq_handler+0x8a>
    c04e:	2203      	movs	r2, #3
    c050:	4b35      	ldr	r3, [pc, #212]	; (c128 <ipc_irq_handler+0xf0>)
    c052:	701a      	strb	r2, [r3, #0]
    c054:	4b35      	ldr	r3, [pc, #212]	; (c12c <ipc_irq_handler+0xf4>)
    c056:	4a36      	ldr	r2, [pc, #216]	; (c130 <ipc_irq_handler+0xf8>)
    c058:	f8d3 0614 	ldr.w	r0, [r3, #1556]	; 0x614
    c05c:	4290      	cmp	r0, r2
    c05e:	d02c      	beq.n	c0ba <ipc_irq_handler+0x82>
    c060:	d80c      	bhi.n	c07c <ipc_irq_handler+0x44>
    c062:	3a02      	subs	r2, #2
    c064:	4290      	cmp	r0, r2
    c066:	d020      	beq.n	c0aa <ipc_irq_handler+0x72>
    c068:	3201      	adds	r2, #1
    c06a:	4290      	cmp	r0, r2
    c06c:	d021      	beq.n	c0b2 <ipc_irq_handler+0x7a>
    c06e:	f8d3 1618 	ldr.w	r1, [r3, #1560]	; 0x618
    c072:	f3c0 000b 	ubfx	r0, r0, #0, #12
    c076:	f000 ff2d 	bl	ced4 <nrf_modem_fault_handler_internal>
    c07a:	e012      	b.n	c0a2 <ipc_irq_handler+0x6a>
    c07c:	4a2d      	ldr	r2, [pc, #180]	; (c134 <ipc_irq_handler+0xfc>)
    c07e:	4290      	cmp	r0, r2
    c080:	d80a      	bhi.n	c098 <ipc_irq_handler+0x60>
    c082:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
    c086:	d80a      	bhi.n	c09e <ipc_irq_handler+0x66>
    c088:	4a2b      	ldr	r2, [pc, #172]	; (c138 <ipc_irq_handler+0x100>)
    c08a:	4290      	cmp	r0, r2
    c08c:	d1ef      	bne.n	c06e <ipc_irq_handler+0x36>
    c08e:	f06f 0204 	mvn.w	r2, #4
    c092:	4b2a      	ldr	r3, [pc, #168]	; (c13c <ipc_irq_handler+0x104>)
    c094:	601a      	str	r2, [r3, #0]
    c096:	e004      	b.n	c0a2 <ipc_irq_handler+0x6a>
    c098:	4a29      	ldr	r2, [pc, #164]	; (c140 <ipc_irq_handler+0x108>)
    c09a:	4290      	cmp	r0, r2
    c09c:	d1e7      	bne.n	c06e <ipc_irq_handler+0x36>
    c09e:	4b27      	ldr	r3, [pc, #156]	; (c13c <ipc_irq_handler+0x104>)
    c0a0:	6018      	str	r0, [r3, #0]
    c0a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c0a6:	f7fe bf59 	b.w	af5c <nrf_modem_os_event_notify>
    c0aa:	f06f 0215 	mvn.w	r2, #21
    c0ae:	4b23      	ldr	r3, [pc, #140]	; (c13c <ipc_irq_handler+0x104>)
    c0b0:	e7f0      	b.n	c094 <ipc_irq_handler+0x5c>
    c0b2:	f06f 025e 	mvn.w	r2, #94	; 0x5e
    c0b6:	4b21      	ldr	r3, [pc, #132]	; (c13c <ipc_irq_handler+0x104>)
    c0b8:	e7ec      	b.n	c094 <ipc_irq_handler+0x5c>
    c0ba:	f06f 020b 	mvn.w	r2, #11
    c0be:	4b1f      	ldr	r3, [pc, #124]	; (c13c <ipc_irq_handler+0x104>)
    c0c0:	e7e8      	b.n	c094 <ipc_irq_handler+0x5c>
    c0c2:	f014 0640 	ands.w	r6, r4, #64	; 0x40
    c0c6:	d005      	beq.n	c0d4 <ipc_irq_handler+0x9c>
    c0c8:	2202      	movs	r2, #2
    c0ca:	4b17      	ldr	r3, [pc, #92]	; (c128 <ipc_irq_handler+0xf0>)
    c0cc:	701a      	strb	r2, [r3, #0]
    c0ce:	f000 ff11 	bl	cef4 <nrf_modem_state_set>
    c0d2:	e7e6      	b.n	c0a2 <ipc_irq_handler+0x6a>
    c0d4:	0762      	lsls	r2, r4, #29
    c0d6:	d504      	bpl.n	c0e2 <ipc_irq_handler+0xaa>
    c0d8:	4b13      	ldr	r3, [pc, #76]	; (c128 <ipc_irq_handler+0xf0>)
    c0da:	781a      	ldrb	r2, [r3, #0]
    c0dc:	b93a      	cbnz	r2, c0ee <ipc_irq_handler+0xb6>
    c0de:	f7fe ff2d 	bl	af3c <nrf_modem_os_application_irq_set>
    c0e2:	06e3      	lsls	r3, r4, #27
    c0e4:	d51f      	bpl.n	c126 <ipc_irq_handler+0xee>
    c0e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c0ea:	f7fe bf27 	b.w	af3c <nrf_modem_os_application_irq_set>
    c0ee:	781a      	ldrb	r2, [r3, #0]
    c0f0:	2a01      	cmp	r2, #1
    c0f2:	b2d0      	uxtb	r0, r2
    c0f4:	d1f5      	bne.n	c0e2 <ipc_irq_handler+0xaa>
    c0f6:	4a13      	ldr	r2, [pc, #76]	; (c144 <ipc_irq_handler+0x10c>)
    c0f8:	4d13      	ldr	r5, [pc, #76]	; (c148 <ipc_irq_handler+0x110>)
    c0fa:	6812      	ldr	r2, [r2, #0]
    c0fc:	6891      	ldr	r1, [r2, #8]
    c0fe:	6069      	str	r1, [r5, #4]
    c100:	6852      	ldr	r2, [r2, #4]
    c102:	602a      	str	r2, [r5, #0]
    c104:	b121      	cbz	r1, c110 <ipc_irq_handler+0xd8>
    c106:	b11a      	cbz	r2, c110 <ipc_irq_handler+0xd8>
    c108:	6809      	ldr	r1, [r1, #0]
    c10a:	b109      	cbz	r1, c110 <ipc_irq_handler+0xd8>
    c10c:	6812      	ldr	r2, [r2, #0]
    c10e:	b932      	cbnz	r2, c11e <ipc_irq_handler+0xe6>
    c110:	f06f 0104 	mvn.w	r1, #4
    c114:	4a09      	ldr	r2, [pc, #36]	; (c13c <ipc_irq_handler+0x104>)
    c116:	6011      	str	r1, [r2, #0]
    c118:	2203      	movs	r2, #3
    c11a:	701a      	strb	r2, [r3, #0]
    c11c:	e7e1      	b.n	c0e2 <ipc_irq_handler+0xaa>
    c11e:	701e      	strb	r6, [r3, #0]
    c120:	f000 fee8 	bl	cef4 <nrf_modem_state_set>
    c124:	e7dd      	b.n	c0e2 <ipc_irq_handler+0xaa>
    c126:	bd70      	pop	{r4, r5, r6, pc}
    c128:	2000d2b7 	.word	0x2000d2b7
    c12c:	4002a000 	.word	0x4002a000
    c130:	00010022 	.word	0x00010022
    c134:	04400004 	.word	0x04400004
    c138:	00013032 	.word	0x00013032
    c13c:	2000caf0 	.word	0x2000caf0
    c140:	05500001 	.word	0x05500001
    c144:	2000caf4 	.word	0x2000caf4
    c148:	2000caf8 	.word	0x2000caf8

0000c14c <rpc_transport_ipc_data_msg_send>:
    c14c:	b508      	push	{r3, lr}
    c14e:	4b0b      	ldr	r3, [pc, #44]	; (c17c <rpc_transport_ipc_data_msg_send+0x30>)
    c150:	681b      	ldr	r3, [r3, #0]
    c152:	1ac0      	subs	r0, r0, r3
    c154:	4b0a      	ldr	r3, [pc, #40]	; (c180 <rpc_transport_ipc_data_msg_send+0x34>)
    c156:	f3c0 1089 	ubfx	r0, r0, #6, #10
    c15a:	681b      	ldr	r3, [r3, #0]
    c15c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    c160:	6843      	ldr	r3, [r0, #4]
    c162:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c166:	f043 0301 	orr.w	r3, r3, #1
    c16a:	6043      	str	r3, [r0, #4]
    c16c:	2003      	movs	r0, #3
    c16e:	f003 f918 	bl	f3a2 <nrf_modem_os_busywait>
    c172:	2201      	movs	r2, #1
    c174:	4b03      	ldr	r3, [pc, #12]	; (c184 <rpc_transport_ipc_data_msg_send+0x38>)
    c176:	60da      	str	r2, [r3, #12]
    c178:	bd08      	pop	{r3, pc}
    c17a:	bf00      	nop
    c17c:	2000cb08 	.word	0x2000cb08
    c180:	2000cb0c 	.word	0x2000cb0c
    c184:	4002a000 	.word	0x4002a000

0000c188 <rpc_transport_ipc_ctrl_msg_send>:
    c188:	b508      	push	{r3, lr}
    c18a:	4b0b      	ldr	r3, [pc, #44]	; (c1b8 <rpc_transport_ipc_ctrl_msg_send+0x30>)
    c18c:	681b      	ldr	r3, [r3, #0]
    c18e:	1ac0      	subs	r0, r0, r3
    c190:	4b0a      	ldr	r3, [pc, #40]	; (c1bc <rpc_transport_ipc_ctrl_msg_send+0x34>)
    c192:	f3c0 1089 	ubfx	r0, r0, #6, #10
    c196:	681b      	ldr	r3, [r3, #0]
    c198:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    c19c:	6843      	ldr	r3, [r0, #4]
    c19e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c1a2:	f043 0301 	orr.w	r3, r3, #1
    c1a6:	6043      	str	r3, [r0, #4]
    c1a8:	2003      	movs	r0, #3
    c1aa:	f003 f8fa 	bl	f3a2 <nrf_modem_os_busywait>
    c1ae:	2201      	movs	r2, #1
    c1b0:	4b03      	ldr	r3, [pc, #12]	; (c1c0 <rpc_transport_ipc_ctrl_msg_send+0x38>)
    c1b2:	605a      	str	r2, [r3, #4]
    c1b4:	bd08      	pop	{r3, pc}
    c1b6:	bf00      	nop
    c1b8:	2000cb00 	.word	0x2000cb00
    c1bc:	2000cb04 	.word	0x2000cb04
    c1c0:	4002a000 	.word	0x4002a000

0000c1c4 <rpc_transport_ipc_data_msg_alloc>:
    c1c4:	4b05      	ldr	r3, [pc, #20]	; (c1dc <rpc_transport_ipc_data_msg_alloc+0x18>)
    c1c6:	781b      	ldrb	r3, [r3, #0]
    c1c8:	b933      	cbnz	r3, c1d8 <rpc_transport_ipc_data_msg_alloc+0x14>
    c1ca:	4b05      	ldr	r3, [pc, #20]	; (c1e0 <rpc_transport_ipc_data_msg_alloc+0x1c>)
    c1cc:	2202      	movs	r2, #2
    c1ce:	6819      	ldr	r1, [r3, #0]
    c1d0:	4b04      	ldr	r3, [pc, #16]	; (c1e4 <rpc_transport_ipc_data_msg_alloc+0x20>)
    c1d2:	6818      	ldr	r0, [r3, #0]
    c1d4:	f7ff bebe 	b.w	bf54 <rpc_transport_ipc_msg_alloc>
    c1d8:	2000      	movs	r0, #0
    c1da:	4770      	bx	lr
    c1dc:	2000d2b8 	.word	0x2000d2b8
    c1e0:	2000cb08 	.word	0x2000cb08
    c1e4:	2000cb0c 	.word	0x2000cb0c

0000c1e8 <rpc_transport_ipc_ctrl_msg_alloc>:
    c1e8:	230a      	movs	r3, #10
    c1ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c1ec:	4d0d      	ldr	r5, [pc, #52]	; (c224 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
    c1ee:	4e0e      	ldr	r6, [pc, #56]	; (c228 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
    c1f0:	9301      	str	r3, [sp, #4]
    c1f2:	2201      	movs	r2, #1
    c1f4:	6829      	ldr	r1, [r5, #0]
    c1f6:	6830      	ldr	r0, [r6, #0]
    c1f8:	f7ff feac 	bl	bf54 <rpc_transport_ipc_msg_alloc>
    c1fc:	4604      	mov	r4, r0
    c1fe:	b938      	cbnz	r0, c210 <rpc_transport_ipc_ctrl_msg_alloc+0x28>
    c200:	f003 f8d7 	bl	f3b2 <nrf_modem_os_is_in_isr>
    c204:	b938      	cbnz	r0, c216 <rpc_transport_ipc_ctrl_msg_alloc+0x2e>
    c206:	a901      	add	r1, sp, #4
    c208:	f7fe fdba 	bl	ad80 <nrf_modem_os_timedwait>
    c20c:	306e      	adds	r0, #110	; 0x6e
    c20e:	d1f0      	bne.n	c1f2 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
    c210:	4620      	mov	r0, r4
    c212:	b002      	add	sp, #8
    c214:	bd70      	pop	{r4, r5, r6, pc}
    c216:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c21a:	9b01      	ldr	r3, [sp, #4]
    c21c:	4358      	muls	r0, r3
    c21e:	f003 f8c0 	bl	f3a2 <nrf_modem_os_busywait>
    c222:	e7e6      	b.n	c1f2 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
    c224:	2000cb00 	.word	0x2000cb00
    c228:	2000cb04 	.word	0x2000cb04

0000c22c <rpc_transport_ipc_data_alloc>:
    c22c:	4b03      	ldr	r3, [pc, #12]	; (c23c <rpc_transport_ipc_data_alloc+0x10>)
    c22e:	781b      	ldrb	r3, [r3, #0]
    c230:	b90b      	cbnz	r3, c236 <rpc_transport_ipc_data_alloc+0xa>
    c232:	f7fe beb7 	b.w	afa4 <nrf_modem_os_shm_tx_alloc>
    c236:	2000      	movs	r0, #0
    c238:	4770      	bx	lr
    c23a:	bf00      	nop
    c23c:	2000d2b8 	.word	0x2000d2b8

0000c240 <nrf_modem_application_irq_handler>:
    c240:	b510      	push	{r4, lr}
    c242:	4c08      	ldr	r4, [pc, #32]	; (c264 <nrf_modem_application_irq_handler+0x24>)
    c244:	f7fe fe82 	bl	af4c <nrf_modem_os_application_irq_clear>
    c248:	6820      	ldr	r0, [r4, #0]
    c24a:	b110      	cbz	r0, c252 <nrf_modem_application_irq_handler+0x12>
    c24c:	2101      	movs	r1, #1
    c24e:	f7ff feb1 	bl	bfb4 <handle_modem_rpc_msg.part.0>
    c252:	6860      	ldr	r0, [r4, #4]
    c254:	b120      	cbz	r0, c260 <nrf_modem_application_irq_handler+0x20>
    c256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c25a:	2102      	movs	r1, #2
    c25c:	f7ff beaa 	b.w	bfb4 <handle_modem_rpc_msg.part.0>
    c260:	bd10      	pop	{r4, pc}
    c262:	bf00      	nop
    c264:	2000caf8 	.word	0x2000caf8

0000c268 <rpc_transport_ipc_msg_free>:
    c268:	2300      	movs	r3, #0
    c26a:	4911      	ldr	r1, [pc, #68]	; (c2b0 <rpc_transport_ipc_msg_free+0x48>)
    c26c:	b530      	push	{r4, r5, lr}
    c26e:	680a      	ldr	r2, [r1, #0]
    c270:	6814      	ldr	r4, [r2, #0]
    c272:	42a3      	cmp	r3, r4
    c274:	d10b      	bne.n	c28e <rpc_transport_ipc_msg_free+0x26>
    c276:	2300      	movs	r3, #0
    c278:	684a      	ldr	r2, [r1, #4]
    c27a:	6811      	ldr	r1, [r2, #0]
    c27c:	428b      	cmp	r3, r1
    c27e:	d015      	beq.n	c2ac <rpc_transport_ipc_msg_free+0x44>
    c280:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
    c284:	68a4      	ldr	r4, [r4, #8]
    c286:	42a0      	cmp	r0, r4
    c288:	d008      	beq.n	c29c <rpc_transport_ipc_msg_free+0x34>
    c28a:	3301      	adds	r3, #1
    c28c:	e7f6      	b.n	c27c <rpc_transport_ipc_msg_free+0x14>
    c28e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
    c292:	68ad      	ldr	r5, [r5, #8]
    c294:	42a8      	cmp	r0, r5
    c296:	d001      	beq.n	c29c <rpc_transport_ipc_msg_free+0x34>
    c298:	3301      	adds	r3, #1
    c29a:	e7ea      	b.n	c272 <rpc_transport_ipc_msg_free+0xa>
    c29c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c2a0:	685a      	ldr	r2, [r3, #4]
    c2a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    c2a6:	f042 0203 	orr.w	r2, r2, #3
    c2aa:	605a      	str	r2, [r3, #4]
    c2ac:	bd30      	pop	{r4, r5, pc}
    c2ae:	bf00      	nop
    c2b0:	2000caf8 	.word	0x2000caf8

0000c2b4 <rpc_transport_ipc_peer_data_free>:
    c2b4:	b510      	push	{r4, lr}
    c2b6:	4b0b      	ldr	r3, [pc, #44]	; (c2e4 <rpc_transport_ipc_peer_data_free+0x30>)
    c2b8:	4604      	mov	r4, r0
    c2ba:	781b      	ldrb	r3, [r3, #0]
    c2bc:	2b03      	cmp	r3, #3
    c2be:	d010      	beq.n	c2e2 <rpc_transport_ipc_peer_data_free+0x2e>
    c2c0:	f7ff ff92 	bl	c1e8 <rpc_transport_ipc_ctrl_msg_alloc>
    c2c4:	b168      	cbz	r0, c2e2 <rpc_transport_ipc_peer_data_free+0x2e>
    c2c6:	2101      	movs	r1, #1
    c2c8:	2200      	movs	r2, #0
    c2ca:	7001      	strb	r1, [r0, #0]
    c2cc:	2102      	movs	r1, #2
    c2ce:	6084      	str	r4, [r0, #8]
    c2d0:	7042      	strb	r2, [r0, #1]
    c2d2:	7081      	strb	r1, [r0, #2]
    c2d4:	70c2      	strb	r2, [r0, #3]
    c2d6:	f7ff ff57 	bl	c188 <rpc_transport_ipc_ctrl_msg_send>
    c2da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c2de:	f7fe be2d 	b.w	af3c <nrf_modem_os_application_irq_set>
    c2e2:	bd10      	pop	{r4, pc}
    c2e4:	2000d2b7 	.word	0x2000d2b7

0000c2e8 <rpc_transport_ipc_init>:
    c2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c2ec:	2200      	movs	r2, #0
    c2ee:	b095      	sub	sp, #84	; 0x54
    c2f0:	4605      	mov	r5, r0
    c2f2:	4957      	ldr	r1, [pc, #348]	; (c450 <rpc_transport_ipc_init+0x168>)
    c2f4:	7900      	ldrb	r0, [r0, #4]
    c2f6:	f7ff fb6d 	bl	b9d4 <nrfx_ipc_init>
    c2fa:	2238      	movs	r2, #56	; 0x38
    c2fc:	2100      	movs	r1, #0
    c2fe:	a803      	add	r0, sp, #12
    c300:	f003 fbfd 	bl	fafe <memset>
    c304:	2302      	movs	r3, #2
    c306:	9304      	str	r3, [sp, #16]
    c308:	2308      	movs	r3, #8
    c30a:	9306      	str	r3, [sp, #24]
    c30c:	2320      	movs	r3, #32
    c30e:	9308      	str	r3, [sp, #32]
    c310:	2301      	movs	r3, #1
    c312:	930b      	str	r3, [sp, #44]	; 0x2c
    c314:	2304      	movs	r3, #4
    c316:	930d      	str	r3, [sp, #52]	; 0x34
    c318:	2310      	movs	r3, #16
    c31a:	f04f 0c40 	mov.w	ip, #64	; 0x40
    c31e:	930f      	str	r3, [sp, #60]	; 0x3c
    c320:	2380      	movs	r3, #128	; 0x80
    c322:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
    c326:	23d5      	movs	r3, #213	; 0xd5
    c328:	a803      	add	r0, sp, #12
    c32a:	9313      	str	r3, [sp, #76]	; 0x4c
    c32c:	f7ff fb6a 	bl	ba04 <nrfx_ipc_config_load>
    c330:	6828      	ldr	r0, [r5, #0]
    c332:	6842      	ldr	r2, [r0, #4]
    c334:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
    c338:	f040 8085 	bne.w	c446 <rpc_transport_ipc_init+0x15e>
    c33c:	6941      	ldr	r1, [r0, #20]
    c33e:	68c3      	ldr	r3, [r0, #12]
    c340:	440b      	add	r3, r1
    c342:	69c1      	ldr	r1, [r0, #28]
    c344:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
    c348:	440b      	add	r3, r1
    c34a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    c34e:	d87a      	bhi.n	c446 <rpc_transport_ipc_init+0x15e>
    c350:	2100      	movs	r1, #0
    c352:	6800      	ldr	r0, [r0, #0]
    c354:	f003 fbd3 	bl	fafe <memset>
    c358:	682a      	ldr	r2, [r5, #0]
    c35a:	6814      	ldr	r4, [r2, #0]
    c35c:	69d3      	ldr	r3, [r2, #28]
    c35e:	f104 0660 	add.w	r6, r4, #96	; 0x60
    c362:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
    c366:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
    c36a:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
    c36e:	f104 0920 	add.w	r9, r4, #32
    c372:	2b00      	cmp	r3, #0
    c374:	d05c      	beq.n	c430 <rpc_transport_ipc_init+0x148>
    c376:	f104 0840 	add.w	r8, r4, #64	; 0x40
    c37a:	4936      	ldr	r1, [pc, #216]	; (c454 <rpc_transport_ipc_init+0x16c>)
    c37c:	f8c1 9000 	str.w	r9, [r1]
    c380:	b13b      	cbz	r3, c392 <rpc_transport_ipc_init+0xaa>
    c382:	6992      	ldr	r2, [r2, #24]
    c384:	4640      	mov	r0, r8
    c386:	f8c8 2004 	str.w	r2, [r8, #4]
    c38a:	f8c8 3000 	str.w	r3, [r8]
    c38e:	f7ff fd61 	bl	be54 <ipc_trace_init>
    c392:	6828      	ldr	r0, [r5, #0]
    c394:	2300      	movs	r3, #0
    c396:	6902      	ldr	r2, [r0, #16]
    c398:	2101      	movs	r1, #1
    c39a:	6062      	str	r2, [r4, #4]
    c39c:	6942      	ldr	r2, [r0, #20]
    c39e:	7023      	strb	r3, [r4, #0]
    c3a0:	60a2      	str	r2, [r4, #8]
    c3a2:	4a2d      	ldr	r2, [pc, #180]	; (c458 <rpc_transport_ipc_init+0x170>)
    c3a4:	60e6      	str	r6, [r4, #12]
    c3a6:	6017      	str	r7, [r2, #0]
    c3a8:	4a2c      	ldr	r2, [pc, #176]	; (c45c <rpc_transport_ipc_init+0x174>)
    c3aa:	6127      	str	r7, [r4, #16]
    c3ac:	6016      	str	r6, [r2, #0]
    c3ae:	2208      	movs	r2, #8
    c3b0:	7063      	strb	r3, [r4, #1]
    c3b2:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
    c3b6:	70a1      	strb	r1, [r4, #2]
    c3b8:	70e3      	strb	r3, [r4, #3]
    c3ba:	f8c4 9014 	str.w	r9, [r4, #20]
    c3be:	f8c4 8018 	str.w	r8, [r4, #24]
    c3c2:	707b      	strb	r3, [r7, #1]
    c3c4:	70bb      	strb	r3, [r7, #2]
    c3c6:	70fb      	strb	r3, [r7, #3]
    c3c8:	270a      	movs	r7, #10
    c3ca:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
    c3ce:	4a24      	ldr	r2, [pc, #144]	; (c460 <rpc_transport_ipc_init+0x178>)
    c3d0:	7073      	strb	r3, [r6, #1]
    c3d2:	f8c2 b000 	str.w	fp, [r2]
    c3d6:	4a23      	ldr	r2, [pc, #140]	; (c464 <rpc_transport_ipc_init+0x17c>)
    c3d8:	70b3      	strb	r3, [r6, #2]
    c3da:	f8c2 a000 	str.w	sl, [r2]
    c3de:	4a22      	ldr	r2, [pc, #136]	; (c468 <rpc_transport_ipc_init+0x180>)
    c3e0:	70f3      	strb	r3, [r6, #3]
    c3e2:	4d22      	ldr	r5, [pc, #136]	; (c46c <rpc_transport_ipc_init+0x184>)
    c3e4:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
    c3e8:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
    c3ec:	4c20      	ldr	r4, [pc, #128]	; (c470 <rpc_transport_ipc_init+0x188>)
    c3ee:	4a21      	ldr	r2, [pc, #132]	; (c474 <rpc_transport_ipc_init+0x18c>)
    c3f0:	7021      	strb	r1, [r4, #0]
    c3f2:	602b      	str	r3, [r5, #0]
    c3f4:	9302      	str	r3, [sp, #8]
    c3f6:	6113      	str	r3, [r2, #16]
    c3f8:	6913      	ldr	r3, [r2, #16]
    c3fa:	4e1f      	ldr	r6, [pc, #124]	; (c478 <rpc_transport_ipc_init+0x190>)
    c3fc:	9302      	str	r3, [sp, #8]
    c3fe:	9b02      	ldr	r3, [sp, #8]
    c400:	7823      	ldrb	r3, [r4, #0]
    c402:	2b01      	cmp	r3, #1
    c404:	d100      	bne.n	c408 <rpc_transport_ipc_init+0x120>
    c406:	b9ae      	cbnz	r6, c434 <rpc_transport_ipc_init+0x14c>
    c408:	7823      	ldrb	r3, [r4, #0]
    c40a:	2b01      	cmp	r3, #1
    c40c:	bf01      	itttt	eq
    c40e:	f06f 0373 	mvneq.w	r3, #115	; 0x73
    c412:	602b      	streq	r3, [r5, #0]
    c414:	2303      	moveq	r3, #3
    c416:	7023      	strbeq	r3, [r4, #0]
    c418:	682c      	ldr	r4, [r5, #0]
    c41a:	b9b4      	cbnz	r4, c44a <rpc_transport_ipc_init+0x162>
    c41c:	4b17      	ldr	r3, [pc, #92]	; (c47c <rpc_transport_ipc_init+0x194>)
    c41e:	701c      	strb	r4, [r3, #0]
    c420:	4b17      	ldr	r3, [pc, #92]	; (c480 <rpc_transport_ipc_init+0x198>)
    c422:	801c      	strh	r4, [r3, #0]
    c424:	4b17      	ldr	r3, [pc, #92]	; (c484 <rpc_transport_ipc_init+0x19c>)
    c426:	801c      	strh	r4, [r3, #0]
    c428:	4620      	mov	r0, r4
    c42a:	b015      	add	sp, #84	; 0x54
    c42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c430:	4698      	mov	r8, r3
    c432:	e7a2      	b.n	c37a <rpc_transport_ipc_init+0x92>
    c434:	2000      	movs	r0, #0
    c436:	a901      	add	r1, sp, #4
    c438:	9701      	str	r7, [sp, #4]
    c43a:	f7fe fca1 	bl	ad80 <nrf_modem_os_timedwait>
    c43e:	9b01      	ldr	r3, [sp, #4]
    c440:	3b0a      	subs	r3, #10
    c442:	441e      	add	r6, r3
    c444:	e7dc      	b.n	c400 <rpc_transport_ipc_init+0x118>
    c446:	f06f 0415 	mvn.w	r4, #21
    c44a:	f7ff fafb 	bl	ba44 <nrfx_ipc_uninit>
    c44e:	e7eb      	b.n	c428 <rpc_transport_ipc_init+0x140>
    c450:	0000c039 	.word	0x0000c039
    c454:	2000caf4 	.word	0x2000caf4
    c458:	2000cb0c 	.word	0x2000cb0c
    c45c:	2000cb04 	.word	0x2000cb04
    c460:	2000cb08 	.word	0x2000cb08
    c464:	2000cb00 	.word	0x2000cb00
    c468:	4002a000 	.word	0x4002a000
    c46c:	2000caf0 	.word	0x2000caf0
    c470:	2000d2b7 	.word	0x2000d2b7
    c474:	40005600 	.word	0x40005600
    c478:	000249f0 	.word	0x000249f0
    c47c:	2000d2b8 	.word	0x2000d2b8
    c480:	2000cea2 	.word	0x2000cea2
    c484:	2000cea0 	.word	0x2000cea0

0000c488 <sock_init>:
    c488:	f44f 7240 	mov.w	r2, #768	; 0x300
    c48c:	2100      	movs	r1, #0
    c48e:	b508      	push	{r3, lr}
    c490:	4808      	ldr	r0, [pc, #32]	; (c4b4 <sock_init+0x2c>)
    c492:	f003 fb34 	bl	fafe <memset>
    c496:	2100      	movs	r1, #0
    c498:	2208      	movs	r2, #8
    c49a:	4b07      	ldr	r3, [pc, #28]	; (c4b8 <sock_init+0x30>)
    c49c:	4807      	ldr	r0, [pc, #28]	; (c4bc <sock_init+0x34>)
    c49e:	7019      	strb	r1, [r3, #0]
    c4a0:	4b04      	ldr	r3, [pc, #16]	; (c4b4 <sock_init+0x2c>)
    c4a2:	3a01      	subs	r2, #1
    c4a4:	e9c3 0100 	strd	r0, r1, [r3]
    c4a8:	6099      	str	r1, [r3, #8]
    c4aa:	f103 0360 	add.w	r3, r3, #96	; 0x60
    c4ae:	d1f8      	bne.n	c4a2 <sock_init+0x1a>
    c4b0:	bd08      	pop	{r3, pc}
    c4b2:	bf00      	nop
    c4b4:	2000cb10 	.word	0x2000cb10
    c4b8:	2000d2b9 	.word	0x2000d2b9
    c4bc:	1badf11e 	.word	0x1badf11e

0000c4c0 <sock_find>:
    c4c0:	b530      	push	{r4, r5, lr}
    c4c2:	2200      	movs	r2, #0
    c4c4:	2460      	movs	r4, #96	; 0x60
    c4c6:	4b06      	ldr	r3, [pc, #24]	; (c4e0 <sock_find+0x20>)
    c4c8:	fb04 f102 	mul.w	r1, r4, r2
    c4cc:	58cd      	ldr	r5, [r1, r3]
    c4ce:	4285      	cmp	r5, r0
    c4d0:	d101      	bne.n	c4d6 <sock_find+0x16>
    c4d2:	1858      	adds	r0, r3, r1
    c4d4:	bd30      	pop	{r4, r5, pc}
    c4d6:	3201      	adds	r2, #1
    c4d8:	2a08      	cmp	r2, #8
    c4da:	d1f5      	bne.n	c4c8 <sock_find+0x8>
    c4dc:	2000      	movs	r0, #0
    c4de:	e7f9      	b.n	c4d4 <sock_find+0x14>
    c4e0:	2000cb10 	.word	0x2000cb10

0000c4e4 <sock_flow_control_set>:
    c4e4:	1e02      	subs	r2, r0, #0
    c4e6:	bf18      	it	ne
    c4e8:	2201      	movne	r2, #1
    c4ea:	4b0a      	ldr	r3, [pc, #40]	; (c514 <sock_flow_control_set+0x30>)
    c4ec:	b570      	push	{r4, r5, r6, lr}
    c4ee:	701a      	strb	r2, [r3, #0]
    c4f0:	2560      	movs	r5, #96	; 0x60
    c4f2:	2200      	movs	r2, #0
    c4f4:	4908      	ldr	r1, [pc, #32]	; (c518 <sock_flow_control_set+0x34>)
    c4f6:	4e09      	ldr	r6, [pc, #36]	; (c51c <sock_flow_control_set+0x38>)
    c4f8:	fb05 f302 	mul.w	r3, r5, r2
    c4fc:	585c      	ldr	r4, [r3, r1]
    c4fe:	3201      	adds	r2, #1
    c500:	42b4      	cmp	r4, r6
    c502:	bf1f      	itttt	ne
    c504:	185b      	addne	r3, r3, r1
    c506:	7f1c      	ldrbne	r4, [r3, #28]
    c508:	f360 14c7 	bfine	r4, r0, #7, #1
    c50c:	771c      	strbne	r4, [r3, #28]
    c50e:	2a08      	cmp	r2, #8
    c510:	d1f2      	bne.n	c4f8 <sock_flow_control_set+0x14>
    c512:	bd70      	pop	{r4, r5, r6, pc}
    c514:	2000d2b9 	.word	0x2000d2b9
    c518:	2000cb10 	.word	0x2000cb10
    c51c:	1badf11e 	.word	0x1badf11e

0000c520 <on_getaddrinfo_res>:
    c520:	2301      	movs	r3, #1
    c522:	4a03      	ldr	r2, [pc, #12]	; (c530 <on_getaddrinfo_res+0x10>)
    c524:	7013      	strb	r3, [r2, #0]
    c526:	4a03      	ldr	r2, [pc, #12]	; (c534 <on_getaddrinfo_res+0x14>)
    c528:	6010      	str	r0, [r2, #0]
    c52a:	4618      	mov	r0, r3
    c52c:	4770      	bx	lr
    c52e:	bf00      	nop
    c530:	2000d2ba 	.word	0x2000d2ba
    c534:	2000ce14 	.word	0x2000ce14

0000c538 <addrinfo_init>:
    c538:	2201      	movs	r2, #1
    c53a:	4802      	ldr	r0, [pc, #8]	; (c544 <addrinfo_init+0xc>)
    c53c:	4611      	mov	r1, r2
    c53e:	f7fe bce1 	b.w	af04 <nrf_modem_os_sem_init>
    c542:	bf00      	nop
    c544:	2000ce10 	.word	0x2000ce10

0000c548 <rpc_ip_event_handler>:
    c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c54a:	f248 030f 	movw	r3, #32783	; 0x800f
    c54e:	4299      	cmp	r1, r3
    c550:	4605      	mov	r5, r0
    c552:	460e      	mov	r6, r1
    c554:	d00b      	beq.n	c56e <rpc_ip_event_handler+0x26>
    c556:	f249 0304 	movw	r3, #36868	; 0x9004
    c55a:	4299      	cmp	r1, r3
    c55c:	d00a      	beq.n	c574 <rpc_ip_event_handler+0x2c>
    c55e:	f248 030d 	movw	r3, #32781	; 0x800d
    c562:	4299      	cmp	r1, r3
    c564:	d117      	bne.n	c596 <rpc_ip_event_handler+0x4e>
    c566:	f7ff ffdb 	bl	c520 <on_getaddrinfo_res>
    c56a:	b2c0      	uxtb	r0, r0
    c56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c56e:	f002 fff9 	bl	f564 <on_conf_dnssrv_res>
    c572:	e7fa      	b.n	c56a <rpc_ip_event_handler+0x22>
    c574:	6903      	ldr	r3, [r0, #16]
    c576:	2b03      	cmp	r3, #3
    c578:	d806      	bhi.n	c588 <rpc_ip_event_handler+0x40>
    c57a:	e8df f003 	tbb	[pc, r3]
    c57e:	0a02      	.short	0x0a02
    c580:	0702      	.short	0x0702
    c582:	2000      	movs	r0, #0
    c584:	f7ff ffae 	bl	c4e4 <sock_flow_control_set>
    c588:	2000      	movs	r0, #0
    c58a:	e7ef      	b.n	c56c <rpc_ip_event_handler+0x24>
    c58c:	2201      	movs	r2, #1
    c58e:	4b71      	ldr	r3, [pc, #452]	; (c754 <rpc_ip_event_handler+0x20c>)
    c590:	701a      	strb	r2, [r3, #0]
    c592:	2001      	movs	r0, #1
    c594:	e7f6      	b.n	c584 <rpc_ip_event_handler+0x3c>
    c596:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
    c59a:	bf8c      	ite	hi
    c59c:	68c0      	ldrhi	r0, [r0, #12]
    c59e:	6928      	ldrls	r0, [r5, #16]
    c5a0:	f7ff ff8e 	bl	c4c0 <sock_find>
    c5a4:	4604      	mov	r4, r0
    c5a6:	b928      	cbnz	r0, c5b4 <rpc_ip_event_handler+0x6c>
    c5a8:	6828      	ldr	r0, [r5, #0]
    c5aa:	2800      	cmp	r0, #0
    c5ac:	d0ec      	beq.n	c588 <rpc_ip_event_handler+0x40>
    c5ae:	f002 ffb9 	bl	f524 <rpc_client_data_free>
    c5b2:	e7e9      	b.n	c588 <rpc_ip_event_handler+0x40>
    c5b4:	f248 030c 	movw	r3, #32780	; 0x800c
    c5b8:	429e      	cmp	r6, r3
    c5ba:	d823      	bhi.n	c604 <rpc_ip_event_handler+0xbc>
    c5bc:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    c5c0:	d9f2      	bls.n	c5a8 <rpc_ip_event_handler+0x60>
    c5c2:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
    c5c6:	3e01      	subs	r6, #1
    c5c8:	2e0b      	cmp	r6, #11
    c5ca:	d8ed      	bhi.n	c5a8 <rpc_ip_event_handler+0x60>
    c5cc:	a301      	add	r3, pc, #4	; (adr r3, c5d4 <rpc_ip_event_handler+0x8c>)
    c5ce:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    c5d2:	bf00      	nop
    c5d4:	0000c67b 	.word	0x0000c67b
    c5d8:	0000c697 	.word	0x0000c697
    c5dc:	0000c67b 	.word	0x0000c67b
    c5e0:	0000c67b 	.word	0x0000c67b
    c5e4:	0000c67b 	.word	0x0000c67b
    c5e8:	0000c67b 	.word	0x0000c67b
    c5ec:	0000c67b 	.word	0x0000c67b
    c5f0:	0000c67b 	.word	0x0000c67b
    c5f4:	0000c66f 	.word	0x0000c66f
    c5f8:	0000c5a9 	.word	0x0000c5a9
    c5fc:	0000c5a9 	.word	0x0000c5a9
    c600:	0000c6d9 	.word	0x0000c6d9
    c604:	f249 0302 	movw	r3, #36866	; 0x9002
    c608:	429e      	cmp	r6, r3
    c60a:	d069      	beq.n	c6e0 <rpc_ip_event_handler+0x198>
    c60c:	d822      	bhi.n	c654 <rpc_ip_event_handler+0x10c>
    c60e:	f248 0381 	movw	r3, #32897	; 0x8081
    c612:	429e      	cmp	r6, r3
    c614:	f000 8099 	beq.w	c74a <rpc_ip_event_handler+0x202>
    c618:	f249 0301 	movw	r3, #36865	; 0x9001
    c61c:	429e      	cmp	r6, r3
    c61e:	d1c3      	bne.n	c5a8 <rpc_ip_event_handler+0x60>
    c620:	2010      	movs	r0, #16
    c622:	f7fe fcb1 	bl	af88 <nrf_modem_os_alloc>
    c626:	4606      	mov	r6, r0
    c628:	2800      	cmp	r0, #0
    c62a:	d066      	beq.n	c6fa <rpc_ip_event_handler+0x1b2>
    c62c:	2710      	movs	r7, #16
    c62e:	2100      	movs	r1, #0
    c630:	463a      	mov	r2, r7
    c632:	f003 fa64 	bl	fafe <memset>
    c636:	682b      	ldr	r3, [r5, #0]
    c638:	6073      	str	r3, [r6, #4]
    c63a:	686b      	ldr	r3, [r5, #4]
    c63c:	8133      	strh	r3, [r6, #8]
    c63e:	8a6b      	ldrh	r3, [r5, #18]
    c640:	2b04      	cmp	r3, #4
    c642:	d052      	beq.n	c6ea <rpc_ip_event_handler+0x1a2>
    c644:	42bb      	cmp	r3, r7
    c646:	d065      	beq.n	c714 <rpc_ip_event_handler+0x1cc>
    c648:	4620      	mov	r0, r4
    c64a:	4631      	mov	r1, r6
    c64c:	f002 ff6c 	bl	f528 <sock_pkt_append>
    c650:	2000      	movs	r0, #0
    c652:	e78a      	b.n	c56a <rpc_ip_event_handler+0x22>
    c654:	f249 0303 	movw	r3, #36867	; 0x9003
    c658:	429e      	cmp	r6, r3
    c65a:	d012      	beq.n	c682 <rpc_ip_event_handler+0x13a>
    c65c:	f249 0382 	movw	r3, #36994	; 0x9082
    c660:	429e      	cmp	r6, r3
    c662:	d1a1      	bne.n	c5a8 <rpc_ip_event_handler+0x60>
    c664:	4601      	mov	r1, r0
    c666:	4628      	mov	r0, r5
    c668:	f000 f89e 	bl	c7a8 <on_tls_handshake_ntf>
    c66c:	e77d      	b.n	c56a <rpc_ip_event_handler+0x22>
    c66e:	7f03      	ldrb	r3, [r0, #28]
    c670:	f023 0303 	bic.w	r3, r3, #3
    c674:	f043 0303 	orr.w	r3, r3, #3
    c678:	7723      	strb	r3, [r4, #28]
    c67a:	4628      	mov	r0, r5
    c67c:	f002 ff74 	bl	f568 <res_forward>
    c680:	e773      	b.n	c56a <rpc_ip_event_handler+0x22>
    c682:	7f03      	ldrb	r3, [r0, #28]
    c684:	f043 0302 	orr.w	r3, r3, #2
    c688:	7703      	strb	r3, [r0, #28]
    c68a:	6928      	ldr	r0, [r5, #16]
    c68c:	2869      	cmp	r0, #105	; 0x69
    c68e:	d109      	bne.n	c6a4 <rpc_ip_event_handler+0x15c>
    c690:	2368      	movs	r3, #104	; 0x68
    c692:	61a3      	str	r3, [r4, #24]
    c694:	e778      	b.n	c588 <rpc_ip_event_handler+0x40>
    c696:	7f03      	ldrb	r3, [r0, #28]
    c698:	68ee      	ldr	r6, [r5, #12]
    c69a:	f36f 0382 	bfc	r3, #2, #1
    c69e:	7703      	strb	r3, [r0, #28]
    c6a0:	6968      	ldr	r0, [r5, #20]
    c6a2:	b118      	cbz	r0, c6ac <rpc_ip_event_handler+0x164>
    c6a4:	f000 f90a 	bl	c8bc <rpc_error_to_nrf_errno>
    c6a8:	61a0      	str	r0, [r4, #24]
    c6aa:	e76d      	b.n	c588 <rpc_ip_event_handler+0x40>
    c6ac:	4620      	mov	r0, r4
    c6ae:	f002 ff45 	bl	f53c <sock_proto_is_secure>
    c6b2:	b918      	cbnz	r0, c6bc <rpc_ip_event_handler+0x174>
    c6b4:	7f23      	ldrb	r3, [r4, #28]
    c6b6:	f043 0308 	orr.w	r3, r3, #8
    c6ba:	7723      	strb	r3, [r4, #28]
    c6bc:	4620      	mov	r0, r4
    c6be:	f002 ff3d 	bl	f53c <sock_proto_is_secure>
    c6c2:	2800      	cmp	r0, #0
    c6c4:	f43f af60 	beq.w	c588 <rpc_ip_event_handler+0x40>
    c6c8:	2e00      	cmp	r6, #0
    c6ca:	f43f af5d 	beq.w	c588 <rpc_ip_event_handler+0x40>
    c6ce:	2100      	movs	r1, #0
    c6d0:	4620      	mov	r0, r4
    c6d2:	f000 f883 	bl	c7dc <tls_attach>
    c6d6:	e757      	b.n	c588 <rpc_ip_event_handler+0x40>
    c6d8:	7f03      	ldrb	r3, [r0, #28]
    c6da:	f36f 1386 	bfc	r3, #6, #1
    c6de:	e7cb      	b.n	c678 <rpc_ip_event_handler+0x130>
    c6e0:	7f03      	ldrb	r3, [r0, #28]
    c6e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c6e6:	7703      	strb	r3, [r0, #28]
    c6e8:	e74e      	b.n	c588 <rpc_ip_event_handler+0x40>
    c6ea:	4638      	mov	r0, r7
    c6ec:	f7fe fc4c 	bl	af88 <nrf_modem_os_alloc>
    c6f0:	60f0      	str	r0, [r6, #12]
    c6f2:	b920      	cbnz	r0, c6fe <rpc_ip_event_handler+0x1b6>
    c6f4:	4630      	mov	r0, r6
    c6f6:	f7fe fc4f 	bl	af98 <nrf_modem_os_free>
    c6fa:	2002      	movs	r0, #2
    c6fc:	e735      	b.n	c56a <rpc_ip_event_handler+0x22>
    c6fe:	2301      	movs	r3, #1
    c700:	7007      	strb	r7, [r0, #0]
    c702:	7c6a      	ldrb	r2, [r5, #17]
    c704:	6043      	str	r3, [r0, #4]
    c706:	7c2b      	ldrb	r3, [r5, #16]
    c708:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c70c:	8103      	strh	r3, [r0, #8]
    c70e:	696b      	ldr	r3, [r5, #20]
    c710:	60c3      	str	r3, [r0, #12]
    c712:	e799      	b.n	c648 <rpc_ip_event_handler+0x100>
    c714:	2024      	movs	r0, #36	; 0x24
    c716:	f7fe fc37 	bl	af88 <nrf_modem_os_alloc>
    c71a:	60f0      	str	r0, [r6, #12]
    c71c:	2800      	cmp	r0, #0
    c71e:	d0e9      	beq.n	c6f4 <rpc_ip_event_handler+0x1ac>
    c720:	2324      	movs	r3, #36	; 0x24
    c722:	7003      	strb	r3, [r0, #0]
    c724:	2302      	movs	r3, #2
    c726:	7c6a      	ldrb	r2, [r5, #17]
    c728:	6043      	str	r3, [r0, #4]
    c72a:	7c2b      	ldrb	r3, [r5, #16]
    c72c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    c730:	8103      	strh	r3, [r0, #8]
    c732:	f105 0214 	add.w	r2, r5, #20
    c736:	f100 0310 	add.w	r3, r0, #16
    c73a:	3524      	adds	r5, #36	; 0x24
    c73c:	f852 1b04 	ldr.w	r1, [r2], #4
    c740:	42aa      	cmp	r2, r5
    c742:	f843 1b04 	str.w	r1, [r3], #4
    c746:	d1f9      	bne.n	c73c <rpc_ip_event_handler+0x1f4>
    c748:	e77e      	b.n	c648 <rpc_ip_event_handler+0x100>
    c74a:	4601      	mov	r1, r0
    c74c:	4628      	mov	r0, r5
    c74e:	f000 f817 	bl	c780 <on_tls_attach_res>
    c752:	e70a      	b.n	c56a <rpc_ip_event_handler+0x22>
    c754:	2000d2bb 	.word	0x2000d2bb

0000c758 <ip_interface_init>:
    c758:	b508      	push	{r3, lr}
    c75a:	f7ff fe95 	bl	c488 <sock_init>
    c75e:	f7ff feeb 	bl	c538 <addrinfo_init>
    c762:	2200      	movs	r2, #0
    c764:	4b04      	ldr	r3, [pc, #16]	; (c778 <ip_interface_init+0x20>)
    c766:	4805      	ldr	r0, [pc, #20]	; (c77c <ip_interface_init+0x24>)
    c768:	701a      	strb	r2, [r3, #0]
    c76a:	2201      	movs	r2, #1
    c76c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c770:	4611      	mov	r1, r2
    c772:	f7fe bbc7 	b.w	af04 <nrf_modem_os_sem_init>
    c776:	bf00      	nop
    c778:	2000d2bb 	.word	0x2000d2bb
    c77c:	2000ce18 	.word	0x2000ce18

0000c780 <on_tls_attach_res>:
    c780:	b510      	push	{r4, lr}
    c782:	6940      	ldr	r0, [r0, #20]
    c784:	460c      	mov	r4, r1
    c786:	b150      	cbz	r0, c79e <on_tls_attach_res+0x1e>
    c788:	7f0b      	ldrb	r3, [r1, #28]
    c78a:	f36f 1304 	bfc	r3, #4, #1
    c78e:	770b      	strb	r3, [r1, #28]
    c790:	f000 f894 	bl	c8bc <rpc_error_to_nrf_errno>
    c794:	4b03      	ldr	r3, [pc, #12]	; (c7a4 <on_tls_attach_res+0x24>)
    c796:	61a0      	str	r0, [r4, #24]
    c798:	6818      	ldr	r0, [r3, #0]
    c79a:	f002 fe0c 	bl	f3b6 <nrf_modem_os_sem_give>
    c79e:	2000      	movs	r0, #0
    c7a0:	bd10      	pop	{r4, pc}
    c7a2:	bf00      	nop
    c7a4:	2000ce18 	.word	0x2000ce18

0000c7a8 <on_tls_handshake_ntf>:
    c7a8:	b510      	push	{r4, lr}
    c7aa:	7f0b      	ldrb	r3, [r1, #28]
    c7ac:	460c      	mov	r4, r1
    c7ae:	f36f 1304 	bfc	r3, #4, #1
    c7b2:	770b      	strb	r3, [r1, #28]
    c7b4:	6900      	ldr	r0, [r0, #16]
    c7b6:	b958      	cbnz	r0, c7d0 <on_tls_handshake_ntf+0x28>
    c7b8:	b2db      	uxtb	r3, r3
    c7ba:	f023 0328 	bic.w	r3, r3, #40	; 0x28
    c7be:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    c7c2:	770b      	strb	r3, [r1, #28]
    c7c4:	4b04      	ldr	r3, [pc, #16]	; (c7d8 <on_tls_handshake_ntf+0x30>)
    c7c6:	6818      	ldr	r0, [r3, #0]
    c7c8:	f002 fdf5 	bl	f3b6 <nrf_modem_os_sem_give>
    c7cc:	2000      	movs	r0, #0
    c7ce:	bd10      	pop	{r4, pc}
    c7d0:	f000 f874 	bl	c8bc <rpc_error_to_nrf_errno>
    c7d4:	61a0      	str	r0, [r4, #24]
    c7d6:	e7f5      	b.n	c7c4 <on_tls_handshake_ntf+0x1c>
    c7d8:	2000ce18 	.word	0x2000ce18

0000c7dc <tls_attach>:
    c7dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c7e0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; c8b8 <tls_attach+0xdc>
    c7e4:	4605      	mov	r5, r0
    c7e6:	f8d8 0000 	ldr.w	r0, [r8]
    c7ea:	9101      	str	r1, [sp, #4]
    c7ec:	f002 fde5 	bl	f3ba <nrf_modem_os_sem_take>
    c7f0:	4607      	mov	r7, r0
    c7f2:	b120      	cbz	r0, c7fe <tls_attach+0x22>
    c7f4:	2310      	movs	r3, #16
    c7f6:	61ab      	str	r3, [r5, #24]
    c7f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    c7fc:	e041      	b.n	c882 <tls_attach+0xa6>
    c7fe:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    c800:	b1a8      	cbz	r0, c82e <tls_attach+0x52>
    c802:	f7fb fe0a 	bl	841a <strlen>
    c806:	1c46      	adds	r6, r0, #1
    c808:	4630      	mov	r0, r6
    c80a:	f002 fe7b 	bl	f504 <rpc_client_request_alloc>
    c80e:	4604      	mov	r4, r0
    c810:	b978      	cbnz	r0, c832 <tls_attach+0x56>
    c812:	4628      	mov	r0, r5
    c814:	f002 fea2 	bl	f55c <sock_is_nonblock>
    c818:	b108      	cbz	r0, c81e <tls_attach+0x42>
    c81a:	2369      	movs	r3, #105	; 0x69
    c81c:	61ab      	str	r3, [r5, #24]
    c81e:	f8d8 0000 	ldr.w	r0, [r8]
    c822:	f002 fdc8 	bl	f3b6 <nrf_modem_os_sem_give>
    c826:	2069      	movs	r0, #105	; 0x69
    c828:	f002 fdbd 	bl	f3a6 <nrf_modem_os_errno_set>
    c82c:	e7e4      	b.n	c7f8 <tls_attach+0x1c>
    c82e:	463e      	mov	r6, r7
    c830:	e7ea      	b.n	c808 <tls_attach+0x2c>
    c832:	682b      	ldr	r3, [r5, #0]
    c834:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    c838:	6103      	str	r3, [r0, #16]
    c83a:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
    c83e:	3014      	adds	r0, #20
    c840:	3201      	adds	r2, #1
    c842:	0092      	lsls	r2, r2, #2
    c844:	f840 2c0c 	str.w	r2, [r0, #-12]
    c848:	f003 f94c 	bl	fae4 <memcpy>
    c84c:	b1ee      	cbz	r6, c88a <tls_attach+0xae>
    c84e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    c850:	6820      	ldr	r0, [r4, #0]
    c852:	f003 f9cc 	bl	fbee <strcpy>
    c856:	6066      	str	r6, [r4, #4]
    c858:	7f2b      	ldrb	r3, [r5, #28]
    c85a:	2004      	movs	r0, #4
    c85c:	f043 0310 	orr.w	r3, r3, #16
    c860:	4622      	mov	r2, r4
    c862:	f247 0181 	movw	r1, #28801	; 0x7081
    c866:	772b      	strb	r3, [r5, #28]
    c868:	f002 fe52 	bl	f510 <rpc_client_request_send>
    c86c:	4628      	mov	r0, r5
    c86e:	f002 fe75 	bl	f55c <sock_is_nonblock>
    c872:	b930      	cbnz	r0, c882 <tls_attach+0xa6>
    c874:	4628      	mov	r0, r5
    c876:	f002 fe6d 	bl	f554 <sock_is_attaching>
    c87a:	b978      	cbnz	r0, c89c <tls_attach+0xc0>
    c87c:	69a8      	ldr	r0, [r5, #24]
    c87e:	2800      	cmp	r0, #0
    c880:	d1d2      	bne.n	c828 <tls_attach+0x4c>
    c882:	4638      	mov	r0, r7
    c884:	b002      	add	sp, #8
    c886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c88a:	7026      	strb	r6, [r4, #0]
    c88c:	7066      	strb	r6, [r4, #1]
    c88e:	70a6      	strb	r6, [r4, #2]
    c890:	70e6      	strb	r6, [r4, #3]
    c892:	7126      	strb	r6, [r4, #4]
    c894:	7166      	strb	r6, [r4, #5]
    c896:	71a6      	strb	r6, [r4, #6]
    c898:	71e6      	strb	r6, [r4, #7]
    c89a:	e7dd      	b.n	c858 <tls_attach+0x7c>
    c89c:	2000      	movs	r0, #0
    c89e:	a901      	add	r1, sp, #4
    c8a0:	f7fe fa6e 	bl	ad80 <nrf_modem_os_timedwait>
    c8a4:	f110 0f0b 	cmn.w	r0, #11
    c8a8:	d004      	beq.n	c8b4 <tls_attach+0xd8>
    c8aa:	2800      	cmp	r0, #0
    c8ac:	d0e2      	beq.n	c874 <tls_attach+0x98>
    c8ae:	f003 f915 	bl	fadc <abs>
    c8b2:	e7b9      	b.n	c828 <tls_attach+0x4c>
    c8b4:	2074      	movs	r0, #116	; 0x74
    c8b6:	e7b7      	b.n	c828 <tls_attach+0x4c>
    c8b8:	2000ce18 	.word	0x2000ce18

0000c8bc <rpc_error_to_nrf_errno>:
    c8bc:	286c      	cmp	r0, #108	; 0x6c
    c8be:	bf9a      	itte	ls
    c8c0:	4b02      	ldrls	r3, [pc, #8]	; (c8cc <rpc_error_to_nrf_errno+0x10>)
    c8c2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    c8c6:	4802      	ldrhi	r0, [pc, #8]	; (c8d0 <rpc_error_to_nrf_errno+0x14>)
    c8c8:	4770      	bx	lr
    c8ca:	bf00      	nop
    c8cc:	000102f8 	.word	0x000102f8
    c8d0:	baadbaad 	.word	0xbaadbaad

0000c8d4 <at_cmd_send>:
    c8d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c8d8:	4605      	mov	r5, r0
    c8da:	2000      	movs	r0, #0
    c8dc:	4617      	mov	r7, r2
    c8de:	4688      	mov	r8, r1
    c8e0:	461e      	mov	r6, r3
    c8e2:	f002 fe0f 	bl	f504 <rpc_client_request_alloc>
    c8e6:	4602      	mov	r2, r0
    c8e8:	b930      	cbnz	r0, c8f8 <at_cmd_send+0x24>
    c8ea:	b115      	cbz	r5, c8f2 <at_cmd_send+0x1e>
    c8ec:	4628      	mov	r0, r5
    c8ee:	f002 fdfc 	bl	f4ea <rpc_transport_local_data_free>
    c8f2:	f06f 000b 	mvn.w	r0, #11
    c8f6:	e022      	b.n	c93e <at_cmd_send+0x6a>
    c8f8:	f06f 0358 	mvn.w	r3, #88	; 0x58
    c8fc:	2400      	movs	r4, #0
    c8fe:	7303      	strb	r3, [r0, #12]
    c900:	2304      	movs	r3, #4
    c902:	6005      	str	r5, [r0, #0]
    c904:	4d0f      	ldr	r5, [pc, #60]	; (c944 <at_cmd_send+0x70>)
    c906:	7203      	strb	r3, [r0, #8]
    c908:	7344      	strb	r4, [r0, #13]
    c90a:	7384      	strb	r4, [r0, #14]
    c90c:	73c4      	strb	r4, [r0, #15]
    c90e:	7244      	strb	r4, [r0, #9]
    c910:	7284      	strb	r4, [r0, #10]
    c912:	72c4      	strb	r4, [r0, #11]
    c914:	f8c0 8004 	str.w	r8, [r0, #4]
    c918:	4639      	mov	r1, r7
    c91a:	2003      	movs	r0, #3
    c91c:	702c      	strb	r4, [r5, #0]
    c91e:	f002 fdf7 	bl	f510 <rpc_client_request_send>
    c922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c926:	9301      	str	r3, [sp, #4]
    c928:	782b      	ldrb	r3, [r5, #0]
    c92a:	42b3      	cmp	r3, r6
    c92c:	d101      	bne.n	c932 <at_cmd_send+0x5e>
    c92e:	2000      	movs	r0, #0
    c930:	e005      	b.n	c93e <at_cmd_send+0x6a>
    c932:	2000      	movs	r0, #0
    c934:	a901      	add	r1, sp, #4
    c936:	f7fe fa23 	bl	ad80 <nrf_modem_os_timedwait>
    c93a:	2800      	cmp	r0, #0
    c93c:	d0f4      	beq.n	c928 <at_cmd_send+0x54>
    c93e:	b002      	add	sp, #8
    c940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c944:	2000d2bc 	.word	0x2000d2bc

0000c948 <at_response_match>:
    c948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c94a:	4605      	mov	r5, r0
    c94c:	2400      	movs	r4, #0
    c94e:	4f0f      	ldr	r7, [pc, #60]	; (c98c <at_response_match+0x44>)
    c950:	f857 6b04 	ldr.w	r6, [r7], #4
    c954:	4628      	mov	r0, r5
    c956:	4631      	mov	r1, r6
    c958:	f003 f95d 	bl	fc16 <strstr>
    c95c:	b928      	cbnz	r0, c96a <at_response_match+0x22>
    c95e:	3401      	adds	r4, #1
    c960:	2c04      	cmp	r4, #4
    c962:	d1f5      	bne.n	c950 <at_response_match+0x8>
    c964:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    c968:	e00d      	b.n	c986 <at_response_match+0x3e>
    c96a:	b16c      	cbz	r4, c988 <at_response_match+0x40>
    c96c:	1ea3      	subs	r3, r4, #2
    c96e:	2b01      	cmp	r3, #1
    c970:	d8f8      	bhi.n	c964 <at_response_match+0x1c>
    c972:	4630      	mov	r0, r6
    c974:	f7fb fd51 	bl	841a <strlen>
    c978:	220a      	movs	r2, #10
    c97a:	2100      	movs	r1, #0
    c97c:	4428      	add	r0, r5
    c97e:	f001 fe29 	bl	e5d4 <strtol>
    c982:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
    c986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c988:	4620      	mov	r0, r4
    c98a:	e7fc      	b.n	c986 <at_response_match+0x3e>
    c98c:	000104ac 	.word	0x000104ac

0000c990 <at_vsprintf>:
    c990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c992:	4613      	mov	r3, r2
    c994:	4607      	mov	r7, r0
    c996:	9201      	str	r2, [sp, #4]
    c998:	460e      	mov	r6, r1
    c99a:	4615      	mov	r5, r2
    c99c:	480b      	ldr	r0, [pc, #44]	; (c9cc <at_vsprintf+0x3c>)
    c99e:	460a      	mov	r2, r1
    c9a0:	2100      	movs	r1, #0
    c9a2:	f001 fe21 	bl	e5e8 <vsniprintf>
    c9a6:	1c44      	adds	r4, r0, #1
    c9a8:	4620      	mov	r0, r4
    c9aa:	f002 fd9c 	bl	f4e6 <rpc_transport_data_alloc>
    c9ae:	6038      	str	r0, [r7, #0]
    c9b0:	b140      	cbz	r0, c9c4 <at_vsprintf+0x34>
    c9b2:	462b      	mov	r3, r5
    c9b4:	4632      	mov	r2, r6
    c9b6:	4621      	mov	r1, r4
    c9b8:	9501      	str	r5, [sp, #4]
    c9ba:	f001 fe15 	bl	e5e8 <vsniprintf>
    c9be:	4620      	mov	r0, r4
    c9c0:	b003      	add	sp, #12
    c9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c9c4:	f06f 000b 	mvn.w	r0, #11
    c9c8:	e7fa      	b.n	c9c0 <at_vsprintf+0x30>
    c9ca:	bf00      	nop
    c9cc:	00010130 	.word	0x00010130

0000c9d0 <nrf_modem_at_init>:
    c9d0:	2201      	movs	r2, #1
    c9d2:	b510      	push	{r4, lr}
    c9d4:	4611      	mov	r1, r2
    c9d6:	4805      	ldr	r0, [pc, #20]	; (c9ec <nrf_modem_at_init+0x1c>)
    c9d8:	f7fe fa94 	bl	af04 <nrf_modem_os_sem_init>
    c9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c9e0:	2100      	movs	r1, #0
    c9e2:	2301      	movs	r3, #1
    c9e4:	2205      	movs	r2, #5
    c9e6:	4608      	mov	r0, r1
    c9e8:	f7ff bf74 	b.w	c8d4 <at_cmd_send>
    c9ec:	2000ce1c 	.word	0x2000ce1c

0000c9f0 <nrf_modem_at_printf>:
    c9f0:	b40f      	push	{r0, r1, r2, r3}
    c9f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c9f4:	9c06      	ldr	r4, [sp, #24]
    c9f6:	f000 fa83 	bl	cf00 <nrf_modem_state_is_initialized>
    c9fa:	2800      	cmp	r0, #0
    c9fc:	d032      	beq.n	ca64 <nrf_modem_at_printf+0x74>
    c9fe:	2c00      	cmp	r4, #0
    ca00:	d033      	beq.n	ca6a <nrf_modem_at_printf+0x7a>
    ca02:	4621      	mov	r1, r4
    ca04:	aa07      	add	r2, sp, #28
    ca06:	a801      	add	r0, sp, #4
    ca08:	9200      	str	r2, [sp, #0]
    ca0a:	f7ff ffc1 	bl	c990 <at_vsprintf>
    ca0e:	9b01      	ldr	r3, [sp, #4]
    ca10:	4604      	mov	r4, r0
    ca12:	b36b      	cbz	r3, ca70 <nrf_modem_at_printf+0x80>
    ca14:	4e18      	ldr	r6, [pc, #96]	; (ca78 <nrf_modem_at_printf+0x88>)
    ca16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ca1a:	6830      	ldr	r0, [r6, #0]
    ca1c:	f002 fccd 	bl	f3ba <nrf_modem_os_sem_take>
    ca20:	4621      	mov	r1, r4
    ca22:	2302      	movs	r3, #2
    ca24:	2201      	movs	r2, #1
    ca26:	9801      	ldr	r0, [sp, #4]
    ca28:	f7ff ff54 	bl	c8d4 <at_cmd_send>
    ca2c:	4604      	mov	r4, r0
    ca2e:	b140      	cbz	r0, ca42 <nrf_modem_at_printf+0x52>
    ca30:	6830      	ldr	r0, [r6, #0]
    ca32:	f002 fcc0 	bl	f3b6 <nrf_modem_os_sem_give>
    ca36:	4620      	mov	r0, r4
    ca38:	b002      	add	sp, #8
    ca3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ca3e:	b004      	add	sp, #16
    ca40:	4770      	bx	lr
    ca42:	4d0e      	ldr	r5, [pc, #56]	; (ca7c <nrf_modem_at_printf+0x8c>)
    ca44:	682b      	ldr	r3, [r5, #0]
    ca46:	6818      	ldr	r0, [r3, #0]
    ca48:	f7ff ff7e 	bl	c948 <at_response_match>
    ca4c:	4604      	mov	r4, r0
    ca4e:	6830      	ldr	r0, [r6, #0]
    ca50:	f002 fcb1 	bl	f3b6 <nrf_modem_os_sem_give>
    ca54:	682b      	ldr	r3, [r5, #0]
    ca56:	6818      	ldr	r0, [r3, #0]
    ca58:	f002 fd64 	bl	f524 <rpc_client_data_free>
    ca5c:	6828      	ldr	r0, [r5, #0]
    ca5e:	f002 fd5e 	bl	f51e <rpc_client_message_free>
    ca62:	e7e8      	b.n	ca36 <nrf_modem_at_printf+0x46>
    ca64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    ca68:	e7e5      	b.n	ca36 <nrf_modem_at_printf+0x46>
    ca6a:	f06f 040d 	mvn.w	r4, #13
    ca6e:	e7e2      	b.n	ca36 <nrf_modem_at_printf+0x46>
    ca70:	f06f 040b 	mvn.w	r4, #11
    ca74:	e7df      	b.n	ca36 <nrf_modem_at_printf+0x46>
    ca76:	bf00      	nop
    ca78:	2000ce1c 	.word	0x2000ce1c
    ca7c:	2000ce24 	.word	0x2000ce24

0000ca80 <rpc_at_event_handler>:
    ca80:	b570      	push	{r4, r5, r6, lr}
    ca82:	68c3      	ldr	r3, [r0, #12]
    ca84:	4605      	mov	r5, r0
    ca86:	2ba7      	cmp	r3, #167	; 0xa7
    ca88:	d003      	beq.n	ca92 <rpc_at_event_handler+0x12>
    ca8a:	6828      	ldr	r0, [r5, #0]
    ca8c:	f002 fd4a 	bl	f524 <rpc_client_data_free>
    ca90:	e008      	b.n	caa4 <rpc_at_event_handler+0x24>
    ca92:	2903      	cmp	r1, #3
    ca94:	d008      	beq.n	caa8 <rpc_at_event_handler+0x28>
    ca96:	2904      	cmp	r1, #4
    ca98:	d019      	beq.n	cace <rpc_at_event_handler+0x4e>
    ca9a:	2902      	cmp	r1, #2
    ca9c:	d102      	bne.n	caa4 <rpc_at_event_handler+0x24>
    ca9e:	2201      	movs	r2, #1
    caa0:	4b0e      	ldr	r3, [pc, #56]	; (cadc <rpc_at_event_handler+0x5c>)
    caa2:	701a      	strb	r2, [r3, #0]
    caa4:	2000      	movs	r0, #0
    caa6:	e00a      	b.n	cabe <rpc_at_event_handler+0x3e>
    caa8:	4e0d      	ldr	r6, [pc, #52]	; (cae0 <rpc_at_event_handler+0x60>)
    caaa:	6833      	ldr	r3, [r6, #0]
    caac:	b143      	cbz	r3, cac0 <rpc_at_event_handler+0x40>
    caae:	2400      	movs	r4, #0
    cab0:	6800      	ldr	r0, [r0, #0]
    cab2:	4798      	blx	r3
    cab4:	6828      	ldr	r0, [r5, #0]
    cab6:	6034      	str	r4, [r6, #0]
    cab8:	f002 fd34 	bl	f524 <rpc_client_data_free>
    cabc:	b2e0      	uxtb	r0, r4
    cabe:	bd70      	pop	{r4, r5, r6, pc}
    cac0:	2202      	movs	r2, #2
    cac2:	4b08      	ldr	r3, [pc, #32]	; (cae4 <rpc_at_event_handler+0x64>)
    cac4:	2401      	movs	r4, #1
    cac6:	6018      	str	r0, [r3, #0]
    cac8:	4b04      	ldr	r3, [pc, #16]	; (cadc <rpc_at_event_handler+0x5c>)
    caca:	701a      	strb	r2, [r3, #0]
    cacc:	e7f6      	b.n	cabc <rpc_at_event_handler+0x3c>
    cace:	4b06      	ldr	r3, [pc, #24]	; (cae8 <rpc_at_event_handler+0x68>)
    cad0:	681b      	ldr	r3, [r3, #0]
    cad2:	2b00      	cmp	r3, #0
    cad4:	d0d9      	beq.n	ca8a <rpc_at_event_handler+0xa>
    cad6:	6800      	ldr	r0, [r0, #0]
    cad8:	4798      	blx	r3
    cada:	e7d6      	b.n	ca8a <rpc_at_event_handler+0xa>
    cadc:	2000d2bc 	.word	0x2000d2bc
    cae0:	2000ce28 	.word	0x2000ce28
    cae4:	2000ce24 	.word	0x2000ce24
    cae8:	2000ce20 	.word	0x2000ce20

0000caec <rpc_dfu_event_handler>:
    caec:	b510      	push	{r4, lr}
    caee:	4604      	mov	r4, r0
    caf0:	6800      	ldr	r0, [r0, #0]
    caf2:	b108      	cbz	r0, caf8 <rpc_dfu_event_handler+0xc>
    caf4:	f002 fd16 	bl	f524 <rpc_client_data_free>
    caf8:	4b05      	ldr	r3, [pc, #20]	; (cb10 <rpc_dfu_event_handler+0x24>)
    cafa:	68e2      	ldr	r2, [r4, #12]
    cafc:	429a      	cmp	r2, r3
    cafe:	bf05      	ittet	eq
    cb00:	2001      	moveq	r0, #1
    cb02:	4b04      	ldreq	r3, [pc, #16]	; (cb14 <rpc_dfu_event_handler+0x28>)
    cb04:	2000      	movne	r0, #0
    cb06:	7018      	strbeq	r0, [r3, #0]
    cb08:	bf04      	itt	eq
    cb0a:	4b03      	ldreq	r3, [pc, #12]	; (cb18 <rpc_dfu_event_handler+0x2c>)
    cb0c:	601c      	streq	r4, [r3, #0]
    cb0e:	bd10      	pop	{r4, pc}
    cb10:	15abe11a 	.word	0x15abe11a
    cb14:	2000d2bd 	.word	0x2000d2bd
    cb18:	2000ce2c 	.word	0x2000ce2c

0000cb1c <rpc_gnss_event_handler>:
    cb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb20:	6804      	ldr	r4, [r0, #0]
    cb22:	4607      	mov	r7, r0
    cb24:	460d      	mov	r5, r1
    cb26:	2c00      	cmp	r4, #0
    cb28:	f000 8086 	beq.w	cc38 <rpc_gnss_event_handler+0x11c>
    cb2c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
    cb30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    cb34:	d142      	bne.n	cbbc <rpc_gnss_event_handler+0xa0>
    cb36:	f8df 817c 	ldr.w	r8, [pc, #380]	; ccb4 <rpc_gnss_event_handler+0x198>
    cb3a:	f898 3000 	ldrb.w	r3, [r8]
    cb3e:	2b01      	cmp	r3, #1
    cb40:	d131      	bne.n	cba6 <rpc_gnss_event_handler+0x8a>
    cb42:	4b5d      	ldr	r3, [pc, #372]	; (ccb8 <rpc_gnss_event_handler+0x19c>)
    cb44:	6822      	ldr	r2, [r4, #0]
    cb46:	881b      	ldrh	r3, [r3, #0]
    cb48:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
    cb4c:	d12b      	bne.n	cba6 <rpc_gnss_event_handler+0x8a>
    cb4e:	6863      	ldr	r3, [r4, #4]
    cb50:	bb6b      	cbnz	r3, cbae <rpc_gnss_event_handler+0x92>
    cb52:	4b5a      	ldr	r3, [pc, #360]	; (ccbc <rpc_gnss_event_handler+0x1a0>)
    cb54:	681e      	ldr	r6, [r3, #0]
    cb56:	b31e      	cbz	r6, cba0 <rpc_gnss_event_handler+0x84>
    cb58:	f242 0309 	movw	r3, #8201	; 0x2009
    cb5c:	4299      	cmp	r1, r3
    cb5e:	d11f      	bne.n	cba0 <rpc_gnss_event_handler+0x84>
    cb60:	4630      	mov	r0, r6
    cb62:	8923      	ldrh	r3, [r4, #8]
    cb64:	2280      	movs	r2, #128	; 0x80
    cb66:	f840 3b04 	str.w	r3, [r0], #4
    cb6a:	f104 010a 	add.w	r1, r4, #10
    cb6e:	f002 ffb9 	bl	fae4 <memcpy>
    cb72:	2280      	movs	r2, #128	; 0x80
    cb74:	f104 018a 	add.w	r1, r4, #138	; 0x8a
    cb78:	f106 0084 	add.w	r0, r6, #132	; 0x84
    cb7c:	f002 ffb2 	bl	fae4 <memcpy>
    cb80:	f8d4 310a 	ldr.w	r3, [r4, #266]	; 0x10a
    cb84:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
    cb88:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
    cb8c:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    cb90:	f8d4 3112 	ldr.w	r3, [r4, #274]	; 0x112
    cb94:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
    cb98:	f8d4 3116 	ldr.w	r3, [r4, #278]	; 0x116
    cb9c:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    cba0:	2300      	movs	r3, #0
    cba2:	f888 3000 	strb.w	r3, [r8]
    cba6:	6838      	ldr	r0, [r7, #0]
    cba8:	f002 fcbc 	bl	f524 <rpc_client_data_free>
    cbac:	e044      	b.n	cc38 <rpc_gnss_event_handler+0x11c>
    cbae:	f647 72ff 	movw	r2, #32767	; 0x7fff
    cbb2:	4293      	cmp	r3, r2
    cbb4:	bf0c      	ite	eq
    cbb6:	2303      	moveq	r3, #3
    cbb8:	2302      	movne	r3, #2
    cbba:	e7f2      	b.n	cba2 <rpc_gnss_event_handler+0x86>
    cbbc:	4e40      	ldr	r6, [pc, #256]	; (ccc0 <rpc_gnss_event_handler+0x1a4>)
    cbbe:	6833      	ldr	r3, [r6, #0]
    cbc0:	2b00      	cmp	r3, #0
    cbc2:	d0f0      	beq.n	cba6 <rpc_gnss_event_handler+0x8a>
    cbc4:	f244 0204 	movw	r2, #16388	; 0x4004
    cbc8:	4291      	cmp	r1, r2
    cbca:	d80b      	bhi.n	cbe4 <rpc_gnss_event_handler+0xc8>
    cbcc:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    cbd0:	d9e9      	bls.n	cba6 <rpc_gnss_event_handler+0x8a>
    cbd2:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
    cbd6:	3a02      	subs	r2, #2
    cbd8:	2a02      	cmp	r2, #2
    cbda:	d80b      	bhi.n	cbf4 <rpc_gnss_event_handler+0xd8>
    cbdc:	e8df f002 	tbb	[pc, r2]
    cbe0:	4f45      	.short	0x4f45
    cbe2:	59          	.byte	0x59
    cbe3:	00          	.byte	0x00
    cbe4:	f244 1301 	movw	r3, #16641	; 0x4101
    cbe8:	4299      	cmp	r1, r3
    cbea:	d003      	beq.n	cbf4 <rpc_gnss_event_handler+0xd8>
    cbec:	f244 2301 	movw	r3, #16897	; 0x4201
    cbf0:	4299      	cmp	r1, r3
    cbf2:	d1d8      	bne.n	cba6 <rpc_gnss_event_handler+0x8a>
    cbf4:	4f33      	ldr	r7, [pc, #204]	; (ccc4 <rpc_gnss_event_handler+0x1a8>)
    cbf6:	6838      	ldr	r0, [r7, #0]
    cbf8:	b108      	cbz	r0, cbfe <rpc_gnss_event_handler+0xe2>
    cbfa:	f002 fc93 	bl	f524 <rpc_client_data_free>
    cbfe:	f244 2301 	movw	r3, #16897	; 0x4201
    cc02:	429d      	cmp	r5, r3
    cc04:	4b30      	ldr	r3, [pc, #192]	; (ccc8 <rpc_gnss_event_handler+0x1ac>)
    cc06:	d11a      	bne.n	cc3e <rpc_gnss_event_handler+0x122>
    cc08:	2202      	movs	r2, #2
    cc0a:	603c      	str	r4, [r7, #0]
    cc0c:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
    cc10:	701a      	strb	r2, [r3, #0]
    cc12:	4d2e      	ldr	r5, [pc, #184]	; (cccc <rpc_gnss_event_handler+0x1b0>)
    cc14:	f014 0718 	ands.w	r7, r4, #24
    cc18:	6833      	ldr	r3, [r6, #0]
    cc1a:	782a      	ldrb	r2, [r5, #0]
    cc1c:	d01f      	beq.n	cc5e <rpc_gnss_event_handler+0x142>
    cc1e:	b91a      	cbnz	r2, cc28 <rpc_gnss_event_handler+0x10c>
    cc20:	2005      	movs	r0, #5
    cc22:	4798      	blx	r3
    cc24:	2301      	movs	r3, #1
    cc26:	702b      	strb	r3, [r5, #0]
    cc28:	07e3      	lsls	r3, r4, #31
    cc2a:	d502      	bpl.n	cc32 <rpc_gnss_event_handler+0x116>
    cc2c:	2002      	movs	r0, #2
    cc2e:	6833      	ldr	r3, [r6, #0]
    cc30:	4798      	blx	r3
    cc32:	2001      	movs	r0, #1
    cc34:	6833      	ldr	r3, [r6, #0]
    cc36:	4798      	blx	r3
    cc38:	2000      	movs	r0, #0
    cc3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc3e:	f244 1201 	movw	r2, #16641	; 0x4101
    cc42:	4295      	cmp	r5, r2
    cc44:	bf0b      	itete	eq
    cc46:	2201      	moveq	r2, #1
    cc48:	2200      	movne	r2, #0
    cc4a:	603c      	streq	r4, [r7, #0]
    cc4c:	603c      	strne	r4, [r7, #0]
    cc4e:	bf0b      	itete	eq
    cc50:	f894 4041 	ldrbeq.w	r4, [r4, #65]	; 0x41
    cc54:	f894 403d 	ldrbne.w	r4, [r4, #61]	; 0x3d
    cc58:	701a      	strbeq	r2, [r3, #0]
    cc5a:	701a      	strbne	r2, [r3, #0]
    cc5c:	e7d9      	b.n	cc12 <rpc_gnss_event_handler+0xf6>
    cc5e:	2a00      	cmp	r2, #0
    cc60:	d0e2      	beq.n	cc28 <rpc_gnss_event_handler+0x10c>
    cc62:	2006      	movs	r0, #6
    cc64:	4798      	blx	r3
    cc66:	702f      	strb	r7, [r5, #0]
    cc68:	e7de      	b.n	cc28 <rpc_gnss_event_handler+0x10c>
    cc6a:	4c19      	ldr	r4, [pc, #100]	; (ccd0 <rpc_gnss_event_handler+0x1b4>)
    cc6c:	6820      	ldr	r0, [r4, #0]
    cc6e:	b108      	cbz	r0, cc74 <rpc_gnss_event_handler+0x158>
    cc70:	f002 fc58 	bl	f524 <rpc_client_data_free>
    cc74:	683b      	ldr	r3, [r7, #0]
    cc76:	2003      	movs	r0, #3
    cc78:	6023      	str	r3, [r4, #0]
    cc7a:	6833      	ldr	r3, [r6, #0]
    cc7c:	e7db      	b.n	cc36 <rpc_gnss_event_handler+0x11a>
    cc7e:	4c15      	ldr	r4, [pc, #84]	; (ccd4 <rpc_gnss_event_handler+0x1b8>)
    cc80:	6820      	ldr	r0, [r4, #0]
    cc82:	b108      	cbz	r0, cc88 <rpc_gnss_event_handler+0x16c>
    cc84:	f002 fc4e 	bl	f524 <rpc_client_data_free>
    cc88:	683b      	ldr	r3, [r7, #0]
    cc8a:	2004      	movs	r0, #4
    cc8c:	6023      	str	r3, [r4, #0]
    cc8e:	6833      	ldr	r3, [r6, #0]
    cc90:	e7d1      	b.n	cc36 <rpc_gnss_event_handler+0x11a>
    cc92:	7822      	ldrb	r2, [r4, #0]
    cc94:	2a03      	cmp	r2, #3
    cc96:	d886      	bhi.n	cba6 <rpc_gnss_event_handler+0x8a>
    cc98:	e8df f002 	tbb	[pc, r2]
    cc9c:	09070502 	.word	0x09070502
    cca0:	2007      	movs	r0, #7
    cca2:	4798      	blx	r3
    cca4:	e77f      	b.n	cba6 <rpc_gnss_event_handler+0x8a>
    cca6:	2008      	movs	r0, #8
    cca8:	e7fb      	b.n	cca2 <rpc_gnss_event_handler+0x186>
    ccaa:	2009      	movs	r0, #9
    ccac:	e7f9      	b.n	cca2 <rpc_gnss_event_handler+0x186>
    ccae:	200a      	movs	r0, #10
    ccb0:	e7f7      	b.n	cca2 <rpc_gnss_event_handler+0x186>
    ccb2:	bf00      	nop
    ccb4:	2000d2c0 	.word	0x2000d2c0
    ccb8:	2000cea4 	.word	0x2000cea4
    ccbc:	2000ce40 	.word	0x2000ce40
    ccc0:	2000ce34 	.word	0x2000ce34
    ccc4:	2000ce3c 	.word	0x2000ce3c
    ccc8:	2000d2bf 	.word	0x2000d2bf
    cccc:	2000d2be 	.word	0x2000d2be
    ccd0:	2000ce38 	.word	0x2000ce38
    ccd4:	2000ce30 	.word	0x2000ce30

0000ccd8 <full_dfu_ipc_irq_handler>:
    ccd8:	b510      	push	{r4, lr}
    ccda:	4604      	mov	r4, r0
    ccdc:	4b04      	ldr	r3, [pc, #16]	; (ccf0 <full_dfu_ipc_irq_handler+0x18>)
    ccde:	6818      	ldr	r0, [r3, #0]
    cce0:	f002 fb69 	bl	f3b6 <nrf_modem_os_sem_give>
    cce4:	07e3      	lsls	r3, r4, #31
    cce6:	bf42      	ittt	mi
    cce8:	2201      	movmi	r2, #1
    ccea:	4b02      	ldrmi	r3, [pc, #8]	; (ccf4 <full_dfu_ipc_irq_handler+0x1c>)
    ccec:	701a      	strbmi	r2, [r3, #0]
    ccee:	bd10      	pop	{r4, pc}
    ccf0:	2000ce44 	.word	0x2000ce44
    ccf4:	2000d2c1 	.word	0x2000d2c1

0000ccf8 <modem_ipc_wait_for_event>:
    ccf8:	b508      	push	{r3, lr}
    ccfa:	4b08      	ldr	r3, [pc, #32]	; (cd1c <modem_ipc_wait_for_event+0x24>)
    ccfc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    cd00:	6818      	ldr	r0, [r3, #0]
    cd02:	f002 fb5a 	bl	f3ba <nrf_modem_os_sem_take>
    cd06:	b930      	cbnz	r0, cd16 <modem_ipc_wait_for_event+0x1e>
    cd08:	4b05      	ldr	r3, [pc, #20]	; (cd20 <modem_ipc_wait_for_event+0x28>)
    cd0a:	781b      	ldrb	r3, [r3, #0]
    cd0c:	2b01      	cmp	r3, #1
    cd0e:	bf08      	it	eq
    cd10:	f06f 0004 	mvneq.w	r0, #4
    cd14:	bd08      	pop	{r3, pc}
    cd16:	f06f 0073 	mvn.w	r0, #115	; 0x73
    cd1a:	e7fb      	b.n	cd14 <modem_ipc_wait_for_event+0x1c>
    cd1c:	2000ce44 	.word	0x2000ce44
    cd20:	2000d2c1 	.word	0x2000d2c1

0000cd24 <nrf_modem_full_dfu_setup>:
    cd24:	2200      	movs	r2, #0
    cd26:	2300      	movs	r3, #0
    cd28:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd2a:	4d2d      	ldr	r5, [pc, #180]	; (cde0 <nrf_modem_full_dfu_setup+0xbc>)
    cd2c:	4f2d      	ldr	r7, [pc, #180]	; (cde4 <nrf_modem_full_dfu_setup+0xc0>)
    cd2e:	e9c5 2302 	strd	r2, r3, [r5, #8]
    cd32:	e9c5 2304 	strd	r2, r3, [r5, #16]
    cd36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    cd3a:	4b2b      	ldr	r3, [pc, #172]	; (cde8 <nrf_modem_full_dfu_setup+0xc4>)
    cd3c:	2400      	movs	r4, #0
    cd3e:	601a      	str	r2, [r3, #0]
    cd40:	f100 031c 	add.w	r3, r0, #28
    cd44:	603b      	str	r3, [r7, #0]
    cd46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    cd4a:	6043      	str	r3, [r0, #4]
    cd4c:	231c      	movs	r3, #28
    cd4e:	7203      	strb	r3, [r0, #8]
    cd50:	2320      	movs	r3, #32
    cd52:	2601      	movs	r6, #1
    cd54:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    cd58:	7243      	strb	r3, [r0, #9]
    cd5a:	4b24      	ldr	r3, [pc, #144]	; (cdec <nrf_modem_full_dfu_setup+0xc8>)
    cd5c:	7004      	strb	r4, [r0, #0]
    cd5e:	7044      	strb	r4, [r0, #1]
    cd60:	70c2      	strb	r2, [r0, #3]
    cd62:	7284      	strb	r4, [r0, #10]
    cd64:	72c4      	strb	r4, [r0, #11]
    cd66:	7086      	strb	r6, [r0, #2]
    cd68:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    cd6c:	702c      	strb	r4, [r5, #0]
    cd6e:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
    cd72:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
    cd76:	4b1e      	ldr	r3, [pc, #120]	; (cdf0 <nrf_modem_full_dfu_setup+0xcc>)
    cd78:	b093      	sub	sp, #76	; 0x4c
    cd7a:	4622      	mov	r2, r4
    cd7c:	4620      	mov	r0, r4
    cd7e:	491d      	ldr	r1, [pc, #116]	; (cdf4 <nrf_modem_full_dfu_setup+0xd0>)
    cd80:	701c      	strb	r4, [r3, #0]
    cd82:	f7fe fe27 	bl	b9d4 <nrfx_ipc_init>
    cd86:	4621      	mov	r1, r4
    cd88:	2240      	movs	r2, #64	; 0x40
    cd8a:	a801      	add	r0, sp, #4
    cd8c:	f002 feb7 	bl	fafe <memset>
    cd90:	2302      	movs	r3, #2
    cd92:	9302      	str	r3, [sp, #8]
    cd94:	2304      	movs	r3, #4
    cd96:	930b      	str	r3, [sp, #44]	; 0x2c
    cd98:	2305      	movs	r3, #5
    cd9a:	a801      	add	r0, sp, #4
    cd9c:	9311      	str	r3, [sp, #68]	; 0x44
    cd9e:	9609      	str	r6, [sp, #36]	; 0x24
    cda0:	f7fe fe30 	bl	ba04 <nrfx_ipc_config_load>
    cda4:	4621      	mov	r1, r4
    cda6:	4632      	mov	r2, r6
    cda8:	4813      	ldr	r0, [pc, #76]	; (cdf8 <nrf_modem_full_dfu_setup+0xd4>)
    cdaa:	683f      	ldr	r7, [r7, #0]
    cdac:	f7fe f8aa 	bl	af04 <nrf_modem_os_sem_init>
    cdb0:	4b12      	ldr	r3, [pc, #72]	; (cdfc <nrf_modem_full_dfu_setup+0xd8>)
    cdb2:	9400      	str	r4, [sp, #0]
    cdb4:	611c      	str	r4, [r3, #16]
    cdb6:	691b      	ldr	r3, [r3, #16]
    cdb8:	9300      	str	r3, [sp, #0]
    cdba:	9b00      	ldr	r3, [sp, #0]
    cdbc:	f7ff ff9c 	bl	ccf8 <modem_ipc_wait_for_event>
    cdc0:	4604      	mov	r4, r0
    cdc2:	b130      	cbz	r0, cdd2 <nrf_modem_full_dfu_setup+0xae>
    cdc4:	2303      	movs	r3, #3
    cdc6:	702b      	strb	r3, [r5, #0]
    cdc8:	f7fe fe3c 	bl	ba44 <nrfx_ipc_uninit>
    cdcc:	4620      	mov	r0, r4
    cdce:	b013      	add	sp, #76	; 0x4c
    cdd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cdd2:	683a      	ldr	r2, [r7, #0]
    cdd4:	4b0a      	ldr	r3, [pc, #40]	; (ce00 <nrf_modem_full_dfu_setup+0xdc>)
    cdd6:	429a      	cmp	r2, r3
    cdd8:	d0f8      	beq.n	cdcc <nrf_modem_full_dfu_setup+0xa8>
    cdda:	f06f 0404 	mvn.w	r4, #4
    cdde:	e7f3      	b.n	cdc8 <nrf_modem_full_dfu_setup+0xa4>
    cde0:	2000c6e8 	.word	0x2000c6e8
    cde4:	2000ce48 	.word	0x2000ce48
    cde8:	2000ce4c 	.word	0x2000ce4c
    cdec:	4002a000 	.word	0x4002a000
    cdf0:	2000d2c1 	.word	0x2000d2c1
    cdf4:	0000ccd9 	.word	0x0000ccd9
    cdf8:	2000ce44 	.word	0x2000ce44
    cdfc:	40005600 	.word	0x40005600
    ce00:	a5000001 	.word	0xa5000001

0000ce04 <modem_off>:
    ce04:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ce06:	2501      	movs	r5, #1
    ce08:	4c07      	ldr	r4, [pc, #28]	; (ce28 <modem_off+0x24>)
    ce0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    ce0e:	6165      	str	r5, [r4, #20]
    ce10:	f002 fac7 	bl	f3a2 <nrf_modem_os_busywait>
    ce14:	2300      	movs	r3, #0
    ce16:	6163      	str	r3, [r4, #20]
    ce18:	9301      	str	r3, [sp, #4]
    ce1a:	6125      	str	r5, [r4, #16]
    ce1c:	6923      	ldr	r3, [r4, #16]
    ce1e:	9301      	str	r3, [sp, #4]
    ce20:	9b01      	ldr	r3, [sp, #4]
    ce22:	b003      	add	sp, #12
    ce24:	bd30      	pop	{r4, r5, pc}
    ce26:	bf00      	nop
    ce28:	40005600 	.word	0x40005600

0000ce2c <nrf_modem_init>:
    ce2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ce2e:	4604      	mov	r4, r0
    ce30:	460d      	mov	r5, r1
    ce32:	f000 f86d 	bl	cf10 <nrf_modem_state_is_uninitialized>
    ce36:	2800      	cmp	r0, #0
    ce38:	d037      	beq.n	ceaa <nrf_modem_init+0x7e>
    ce3a:	2c00      	cmp	r4, #0
    ce3c:	d038      	beq.n	ceb0 <nrf_modem_init+0x84>
    ce3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    ce40:	2800      	cmp	r0, #0
    ce42:	d038      	beq.n	ceb6 <nrf_modem_init+0x8a>
    ce44:	f000 f840 	bl	cec8 <nrf_modem_fault_handler_set>
    ce48:	2d01      	cmp	r5, #1
    ce4a:	d017      	beq.n	ce7c <nrf_modem_init+0x50>
    ce4c:	f7fe f8b8 	bl	afc0 <nrf_modem_os_init>
    ce50:	6a23      	ldr	r3, [r4, #32]
    ce52:	4668      	mov	r0, sp
    ce54:	9400      	str	r4, [sp, #0]
    ce56:	f88d 3004 	strb.w	r3, [sp, #4]
    ce5a:	f7ff fa45 	bl	c2e8 <rpc_transport_ipc_init>
    ce5e:	4604      	mov	r4, r0
    ce60:	bb00      	cbnz	r0, cea4 <nrf_modem_init+0x78>
    ce62:	f7ff fdb5 	bl	c9d0 <nrf_modem_at_init>
    ce66:	4604      	mov	r4, r0
    ce68:	b9e0      	cbnz	r0, cea4 <nrf_modem_init+0x78>
    ce6a:	f7ff fc75 	bl	c758 <ip_interface_init>
    ce6e:	4604      	mov	r4, r0
    ce70:	b9c0      	cbnz	r0, cea4 <nrf_modem_init+0x78>
    ce72:	4b14      	ldr	r3, [pc, #80]	; (cec4 <nrf_modem_init+0x98>)
    ce74:	701d      	strb	r5, [r3, #0]
    ce76:	4620      	mov	r0, r4
    ce78:	b003      	add	sp, #12
    ce7a:	bd30      	pop	{r4, r5, pc}
    ce7c:	69e2      	ldr	r2, [r4, #28]
    ce7e:	6863      	ldr	r3, [r4, #4]
    ce80:	4413      	add	r3, r2
    ce82:	68e2      	ldr	r2, [r4, #12]
    ce84:	4413      	add	r3, r2
    ce86:	6962      	ldr	r2, [r4, #20]
    ce88:	4413      	add	r3, r2
    ce8a:	f242 021b 	movw	r2, #8219	; 0x201b
    ce8e:	4293      	cmp	r3, r2
    ce90:	d914      	bls.n	cebc <nrf_modem_init+0x90>
    ce92:	6820      	ldr	r0, [r4, #0]
    ce94:	f7ff ff46 	bl	cd24 <nrf_modem_full_dfu_setup>
    ce98:	4604      	mov	r4, r0
    ce9a:	b918      	cbnz	r0, cea4 <nrf_modem_init+0x78>
    ce9c:	2002      	movs	r0, #2
    ce9e:	f000 f829 	bl	cef4 <nrf_modem_state_set>
    cea2:	e7e6      	b.n	ce72 <nrf_modem_init+0x46>
    cea4:	f7ff ffae 	bl	ce04 <modem_off>
    cea8:	e7e5      	b.n	ce76 <nrf_modem_init+0x4a>
    ceaa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    ceae:	e7e2      	b.n	ce76 <nrf_modem_init+0x4a>
    ceb0:	f06f 040d 	mvn.w	r4, #13
    ceb4:	e7df      	b.n	ce76 <nrf_modem_init+0x4a>
    ceb6:	f06f 0415 	mvn.w	r4, #21
    ceba:	e7dc      	b.n	ce76 <nrf_modem_init+0x4a>
    cebc:	f06f 040b 	mvn.w	r4, #11
    cec0:	e7d9      	b.n	ce76 <nrf_modem_init+0x4a>
    cec2:	bf00      	nop
    cec4:	2000d2c2 	.word	0x2000d2c2

0000cec8 <nrf_modem_fault_handler_set>:
    cec8:	4b01      	ldr	r3, [pc, #4]	; (ced0 <nrf_modem_fault_handler_set+0x8>)
    ceca:	6018      	str	r0, [r3, #0]
    cecc:	4770      	bx	lr
    cece:	bf00      	nop
    ced0:	2000ce50 	.word	0x2000ce50

0000ced4 <nrf_modem_fault_handler_internal>:
    ced4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ced6:	460c      	mov	r4, r1
    ced8:	4605      	mov	r5, r0
    ceda:	2003      	movs	r0, #3
    cedc:	f000 f80a 	bl	cef4 <nrf_modem_state_set>
    cee0:	4b03      	ldr	r3, [pc, #12]	; (cef0 <nrf_modem_fault_handler_internal+0x1c>)
    cee2:	4668      	mov	r0, sp
    cee4:	e9cd 5400 	strd	r5, r4, [sp]
    cee8:	681b      	ldr	r3, [r3, #0]
    ceea:	4798      	blx	r3
    ceec:	b003      	add	sp, #12
    ceee:	bd30      	pop	{r4, r5, pc}
    cef0:	2000ce50 	.word	0x2000ce50

0000cef4 <nrf_modem_state_set>:
    cef4:	4b01      	ldr	r3, [pc, #4]	; (cefc <nrf_modem_state_set+0x8>)
    cef6:	7018      	strb	r0, [r3, #0]
    cef8:	4770      	bx	lr
    cefa:	bf00      	nop
    cefc:	2000d2c3 	.word	0x2000d2c3

0000cf00 <nrf_modem_state_is_initialized>:
    cf00:	4b02      	ldr	r3, [pc, #8]	; (cf0c <nrf_modem_state_is_initialized+0xc>)
    cf02:	7818      	ldrb	r0, [r3, #0]
    cf04:	1e43      	subs	r3, r0, #1
    cf06:	4258      	negs	r0, r3
    cf08:	4158      	adcs	r0, r3
    cf0a:	4770      	bx	lr
    cf0c:	2000d2c3 	.word	0x2000d2c3

0000cf10 <nrf_modem_state_is_uninitialized>:
    cf10:	4b02      	ldr	r3, [pc, #8]	; (cf1c <nrf_modem_state_is_uninitialized+0xc>)
    cf12:	7818      	ldrb	r0, [r3, #0]
    cf14:	fab0 f080 	clz	r0, r0
    cf18:	0940      	lsrs	r0, r0, #5
    cf1a:	4770      	bx	lr
    cf1c:	2000d2c3 	.word	0x2000d2c3

0000cf20 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    cf20:	4b0e      	ldr	r3, [pc, #56]	; (cf5c <z_sys_init_run_level+0x3c>)
{
    cf22:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    cf24:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    cf28:	3001      	adds	r0, #1
    cf2a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    cf2e:	42a6      	cmp	r6, r4
    cf30:	d800      	bhi.n	cf34 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    cf32:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    cf34:	e9d4 3500 	ldrd	r3, r5, [r4]
    cf38:	4628      	mov	r0, r5
    cf3a:	4798      	blx	r3
		if (dev != NULL) {
    cf3c:	b165      	cbz	r5, cf58 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    cf3e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    cf40:	b130      	cbz	r0, cf50 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    cf42:	2800      	cmp	r0, #0
    cf44:	bfb8      	it	lt
    cf46:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    cf48:	28ff      	cmp	r0, #255	; 0xff
    cf4a:	bfa8      	it	ge
    cf4c:	20ff      	movge	r0, #255	; 0xff
    cf4e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    cf50:	785a      	ldrb	r2, [r3, #1]
    cf52:	f042 0201 	orr.w	r2, r2, #1
    cf56:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    cf58:	3408      	adds	r4, #8
    cf5a:	e7e8      	b.n	cf2e <z_sys_init_run_level+0xe>
    cf5c:	000104bc 	.word	0x000104bc

0000cf60 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    cf60:	4b01      	ldr	r3, [pc, #4]	; (cf68 <z_impl_z_errno+0x8>)
    cf62:	6898      	ldr	r0, [r3, #8]
}
    cf64:	3064      	adds	r0, #100	; 0x64
    cf66:	4770      	bx	lr
    cf68:	2000ce54 	.word	0x2000ce54

0000cf6c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    cf6c:	2201      	movs	r2, #1
{
    cf6e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    cf70:	4b09      	ldr	r3, [pc, #36]	; (cf98 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    cf72:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    cf74:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    cf76:	f7ff ffd3 	bl	cf20 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    cf7a:	f000 ff91 	bl	dea0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    cf7e:	2003      	movs	r0, #3
    cf80:	f7ff ffce 	bl	cf20 <z_sys_init_run_level>

	z_init_static_threads();
    cf84:	f000 f926 	bl	d1d4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    cf88:	f7fb fa94 	bl	84b4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    cf8c:	4a03      	ldr	r2, [pc, #12]	; (cf9c <bg_thread_main+0x30>)
    cf8e:	7b13      	ldrb	r3, [r2, #12]
    cf90:	f023 0301 	bic.w	r3, r3, #1
    cf94:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    cf96:	bd08      	pop	{r3, pc}
    cf98:	2000d2c4 	.word	0x2000d2c4
    cf9c:	2000c788 	.word	0x2000c788

0000cfa0 <z_bss_zero>:
{
    cfa0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    cfa2:	4803      	ldr	r0, [pc, #12]	; (cfb0 <z_bss_zero+0x10>)
    cfa4:	4a03      	ldr	r2, [pc, #12]	; (cfb4 <z_bss_zero+0x14>)
    cfa6:	2100      	movs	r1, #0
    cfa8:	1a12      	subs	r2, r2, r0
    cfaa:	f002 fb0b 	bl	f5c4 <z_early_memset>
}
    cfae:	bd08      	pop	{r3, pc}
    cfb0:	2000c6c8 	.word	0x2000c6c8
    cfb4:	2000d2c8 	.word	0x2000d2c8

0000cfb8 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
    cfb8:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    cfba:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    cfbc:	4e13      	ldr	r6, [pc, #76]	; (d00c <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
    cfbe:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
    cfc0:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    cfc4:	2300      	movs	r3, #0
{
    cfc6:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    cfc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    cfcc:	220f      	movs	r2, #15
    cfce:	9301      	str	r3, [sp, #4]
    cfd0:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    cfd4:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
    cfd6:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    cfda:	4d0d      	ldr	r5, [pc, #52]	; (d010 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
    cfdc:	490d      	ldr	r1, [pc, #52]	; (d014 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    cfde:	fb03 5500 	mla	r5, r3, r0, r5
{
    cfe2:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    cfe4:	fb02 1100 	mla	r1, r2, r0, r1
    cfe8:	4b0b      	ldr	r3, [pc, #44]	; (d018 <z_init_cpu+0x60>)
    cfea:	4630      	mov	r0, r6
    cfec:	9500      	str	r5, [sp, #0]
    cfee:	f000 f895 	bl	d11c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    cff2:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    cff4:	4809      	ldr	r0, [pc, #36]	; (d01c <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
    cff6:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    cff8:	3401      	adds	r4, #1
    cffa:	f023 0304 	bic.w	r3, r3, #4
    cffe:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
    d002:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    d004:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    d006:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    d008:	b006      	add	sp, #24
    d00a:	bd70      	pop	{r4, r5, r6, pc}
    d00c:	2000c700 	.word	0x2000c700
    d010:	2000ce54 	.word	0x2000ce54
    d014:	2000e2c8 	.word	0x2000e2c8
    d018:	0000d28d 	.word	0x0000d28d
    d01c:	2000e408 	.word	0x2000e408

0000d020 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    d020:	b580      	push	{r7, lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    d022:	4b2e      	ldr	r3, [pc, #184]	; (d0dc <z_cstart+0xbc>)
    d024:	b0a8      	sub	sp, #160	; 0xa0
	uint32_t msp =
    d026:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    d02a:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    d02e:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d032:	2400      	movs	r4, #0
    d034:	23e0      	movs	r3, #224	; 0xe0
    d036:	4d2a      	ldr	r5, [pc, #168]	; (d0e0 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    d038:	4e2a      	ldr	r6, [pc, #168]	; (d0e4 <z_cstart+0xc4>)
    d03a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    d03e:	77ec      	strb	r4, [r5, #31]
    d040:	762c      	strb	r4, [r5, #24]
    d042:	766c      	strb	r4, [r5, #25]
    d044:	76ac      	strb	r4, [r5, #26]
    d046:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    d04a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    d04c:	4f26      	ldr	r7, [pc, #152]	; (d0e8 <z_cstart+0xc8>)
    d04e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    d052:	626b      	str	r3, [r5, #36]	; 0x24
    d054:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    d058:	f7fc fac6 	bl	95e8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    d05c:	f7fc f88e 	bl	917c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    d060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d064:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    d066:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    d068:	f7fc fcce 	bl	9a08 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    d06c:	f7fc fb6c 	bl	9748 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    d070:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    d074:	ad06      	add	r5, sp, #24
    d076:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    d078:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    d07c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
    d080:	f000 ff08 	bl	de94 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    d084:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    d086:	f002 fa77 	bl	f578 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    d08a:	4620      	mov	r0, r4
    d08c:	f7ff ff48 	bl	cf20 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    d090:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    d092:	4d16      	ldr	r5, [pc, #88]	; (d0ec <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    d094:	f7ff ff44 	bl	cf20 <z_sys_init_run_level>
	z_sched_init();
    d098:	f000 fc5a 	bl	d950 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    d09c:	4b14      	ldr	r3, [pc, #80]	; (d0f0 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
    d09e:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    d0a0:	9305      	str	r3, [sp, #20]
    d0a2:	2301      	movs	r3, #1
    d0a4:	4913      	ldr	r1, [pc, #76]	; (d0f4 <z_cstart+0xd4>)
    d0a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d0aa:	e9cd 4303 	strd	r4, r3, [sp, #12]
    d0ae:	4628      	mov	r0, r5
    d0b0:	463b      	mov	r3, r7
    d0b2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    d0b6:	9400      	str	r4, [sp, #0]
    d0b8:	f000 f830 	bl	d11c <z_setup_new_thread>
    d0bc:	4606      	mov	r6, r0
    d0be:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    d0c0:	4628      	mov	r0, r5
    d0c2:	f022 0204 	bic.w	r2, r2, #4
    d0c6:	736a      	strb	r2, [r5, #13]
    d0c8:	f002 fb63 	bl	f792 <z_ready_thread>
	z_init_cpu(0);
    d0cc:	4620      	mov	r0, r4
    d0ce:	f7ff ff73 	bl	cfb8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    d0d2:	463a      	mov	r2, r7
    d0d4:	4631      	mov	r1, r6
    d0d6:	4628      	mov	r0, r5
    d0d8:	f7fc f95e 	bl	9398 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    d0dc:	2000e408 	.word	0x2000e408
    d0e0:	e000ed00 	.word	0xe000ed00
    d0e4:	2000ce54 	.word	0x2000ce54
    d0e8:	0000cf6d 	.word	0x0000cf6d
    d0ec:	2000c788 	.word	0x2000c788
    d0f0:	0001063c 	.word	0x0001063c
    d0f4:	2000d2c8 	.word	0x2000d2c8

0000d0f8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    d0f8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    d0fa:	4c06      	ldr	r4, [pc, #24]	; (d114 <statics_init+0x1c>)
    d0fc:	4d06      	ldr	r5, [pc, #24]	; (d118 <statics_init+0x20>)
    d0fe:	42ac      	cmp	r4, r5
    d100:	d301      	bcc.n	d106 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    d102:	2000      	movs	r0, #0
    d104:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    d106:	4620      	mov	r0, r4
    d108:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    d10c:	f002 fa5e 	bl	f5cc <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    d110:	3414      	adds	r4, #20
    d112:	e7f4      	b.n	d0fe <statics_init+0x6>
    d114:	2000c68c 	.word	0x2000c68c
    d118:	2000c6a0 	.word	0x2000c6a0

0000d11c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    d11c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    d120:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    d122:	f100 0558 	add.w	r5, r0, #88	; 0x58
    d126:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    d128:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    d12a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    d12e:	2500      	movs	r5, #0
{
    d130:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    d132:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    d134:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    d136:	e9c0 5506 	strd	r5, r5, [r0, #24]
    d13a:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    d13c:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    d13e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    d140:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    d144:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
    d148:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    d14a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    d14c:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    d14e:	9202      	str	r2, [sp, #8]
    d150:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    d152:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    d156:	9201      	str	r2, [sp, #4]
    d158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d15a:	9200      	str	r2, [sp, #0]
    d15c:	4642      	mov	r2, r8
    d15e:	f7fc f8fb 	bl	9358 <arch_new_thread>
	if (!_current) {
    d162:	4b05      	ldr	r3, [pc, #20]	; (d178 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    d164:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    d166:	689b      	ldr	r3, [r3, #8]
    d168:	b103      	cbz	r3, d16c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    d16a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
    d16c:	4640      	mov	r0, r8
    d16e:	6763      	str	r3, [r4, #116]	; 0x74
    d170:	b004      	add	sp, #16
    d172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d176:	bf00      	nop
    d178:	2000ce54 	.word	0x2000ce54

0000d17c <z_impl_k_thread_create>:
{
    d17c:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    d17e:	2700      	movs	r7, #0
{
    d180:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    d182:	9705      	str	r7, [sp, #20]
    d184:	9f10      	ldr	r7, [sp, #64]	; 0x40
{
    d186:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    d18a:	9704      	str	r7, [sp, #16]
    d18c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
{
    d18e:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    d190:	9703      	str	r7, [sp, #12]
    d192:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    d194:	9702      	str	r7, [sp, #8]
    d196:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    d198:	9701      	str	r7, [sp, #4]
    d19a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    d19c:	9700      	str	r7, [sp, #0]
    d19e:	f7ff ffbd 	bl	d11c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    d1a2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    d1a6:	bf08      	it	eq
    d1a8:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    d1ac:	d005      	beq.n	d1ba <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    d1ae:	ea55 0306 	orrs.w	r3, r5, r6
    d1b2:	d105      	bne.n	d1c0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    d1b4:	4620      	mov	r0, r4
    d1b6:	f000 fac5 	bl	d744 <z_sched_start>
}
    d1ba:	4620      	mov	r0, r4
    d1bc:	b007      	add	sp, #28
    d1be:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    d1c0:	4632      	mov	r2, r6
    d1c2:	462b      	mov	r3, r5
    d1c4:	4902      	ldr	r1, [pc, #8]	; (d1d0 <z_impl_k_thread_create+0x54>)
    d1c6:	f104 0018 	add.w	r0, r4, #24
    d1ca:	f000 fd4b 	bl	dc64 <z_add_timeout>
    d1ce:	e7f4      	b.n	d1ba <z_impl_k_thread_create+0x3e>
    d1d0:	0000f7b3 	.word	0x0000f7b3

0000d1d4 <z_init_static_threads>:
{
    d1d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d1d8:	4c29      	ldr	r4, [pc, #164]	; (d280 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    d1da:	4d2a      	ldr	r5, [pc, #168]	; (d284 <z_init_static_threads+0xb0>)
{
    d1dc:	b087      	sub	sp, #28
    d1de:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    d1e0:	42ae      	cmp	r6, r5
    d1e2:	f104 0430 	add.w	r4, r4, #48	; 0x30
    d1e6:	d30f      	bcc.n	d208 <z_init_static_threads+0x34>
	k_sched_lock();
    d1e8:	f000 f9c6 	bl	d578 <k_sched_lock>
    d1ec:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    d1f0:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    d1f4:	4c22      	ldr	r4, [pc, #136]	; (d280 <z_init_static_threads+0xac>)
    d1f6:	f8df 9090 	ldr.w	r9, [pc, #144]	; d288 <z_init_static_threads+0xb4>
    d1fa:	42ac      	cmp	r4, r5
    d1fc:	d320      	bcc.n	d240 <z_init_static_threads+0x6c>
}
    d1fe:	b007      	add	sp, #28
    d200:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    d204:	f000 bb88 	b.w	d918 <k_sched_unlock>
		z_setup_new_thread(
    d208:	f854 3c04 	ldr.w	r3, [r4, #-4]
    d20c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    d210:	9305      	str	r3, [sp, #20]
    d212:	f854 3c10 	ldr.w	r3, [r4, #-16]
    d216:	9304      	str	r3, [sp, #16]
    d218:	f854 3c14 	ldr.w	r3, [r4, #-20]
    d21c:	9303      	str	r3, [sp, #12]
    d21e:	f854 3c18 	ldr.w	r3, [r4, #-24]
    d222:	9302      	str	r3, [sp, #8]
    d224:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    d228:	9301      	str	r3, [sp, #4]
    d22a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    d22e:	9300      	str	r3, [sp, #0]
    d230:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    d234:	f7ff ff72 	bl	d11c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    d238:	f854 3c30 	ldr.w	r3, [r4, #-48]
    d23c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    d23e:	e7ce      	b.n	d1de <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    d240:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d242:	1c5a      	adds	r2, r3, #1
    d244:	d00d      	beq.n	d262 <z_init_static_threads+0x8e>
    d246:	2100      	movs	r1, #0
    d248:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    d24a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    d24e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    d252:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    d256:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    d25a:	d104      	bne.n	d266 <z_init_static_threads+0x92>
	z_sched_start(thread);
    d25c:	4640      	mov	r0, r8
    d25e:	f000 fa71 	bl	d744 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    d262:	3430      	adds	r4, #48	; 0x30
    d264:	e7c9      	b.n	d1fa <z_init_static_threads+0x26>
    d266:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d26a:	2300      	movs	r3, #0
    d26c:	f7fa ff6a 	bl	8144 <__aeabi_uldivmod>
    d270:	4602      	mov	r2, r0
    d272:	460b      	mov	r3, r1
    d274:	f108 0018 	add.w	r0, r8, #24
    d278:	4649      	mov	r1, r9
    d27a:	f000 fcf3 	bl	dc64 <z_add_timeout>
    d27e:	e7f0      	b.n	d262 <z_init_static_threads+0x8e>
    d280:	2000c68c 	.word	0x2000c68c
    d284:	2000c68c 	.word	0x2000c68c
    d288:	0000f7b3 	.word	0x0000f7b3

0000d28c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    d28c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    d28e:	4c0b      	ldr	r4, [pc, #44]	; (d2bc <idle+0x30>)
    d290:	4d0b      	ldr	r5, [pc, #44]	; (d2c0 <idle+0x34>)
	__asm__ volatile(
    d292:	f04f 0220 	mov.w	r2, #32
    d296:	f3ef 8311 	mrs	r3, BASEPRI
    d29a:	f382 8812 	msr	BASEPRI_MAX, r2
    d29e:	f3bf 8f6f 	isb	sy
    d2a2:	f002 fb2d 	bl	f900 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    d2a6:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    d2a8:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    d2aa:	b913      	cbnz	r3, d2b2 <idle+0x26>
	arch_cpu_idle();
    d2ac:	f7fb ff6c 	bl	9188 <arch_cpu_idle>
}
    d2b0:	e7ef      	b.n	d292 <idle+0x6>
    d2b2:	f7fb fe9f 	bl	8ff4 <pm_system_suspend>
    d2b6:	2800      	cmp	r0, #0
    d2b8:	d1eb      	bne.n	d292 <idle+0x6>
    d2ba:	e7f7      	b.n	d2ac <idle+0x20>
    d2bc:	2000ce54 	.word	0x2000ce54
    d2c0:	2000d2c4 	.word	0x2000d2c4

0000d2c4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    d2c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d2c8:	4604      	mov	r4, r0
    d2ca:	4617      	mov	r7, r2
    d2cc:	461e      	mov	r6, r3
    d2ce:	f04f 0320 	mov.w	r3, #32
    d2d2:	f3ef 8811 	mrs	r8, BASEPRI
    d2d6:	f383 8812 	msr	BASEPRI_MAX, r3
    d2da:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    d2de:	68c3      	ldr	r3, [r0, #12]
    d2e0:	4a32      	ldr	r2, [pc, #200]	; (d3ac <z_impl_k_mutex_lock+0xe8>)
    d2e2:	b16b      	cbz	r3, d300 <z_impl_k_mutex_lock+0x3c>
    d2e4:	6880      	ldr	r0, [r0, #8]
    d2e6:	6891      	ldr	r1, [r2, #8]
    d2e8:	4288      	cmp	r0, r1
    d2ea:	d019      	beq.n	d320 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    d2ec:	ea57 0306 	orrs.w	r3, r7, r6
    d2f0:	d118      	bne.n	d324 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    d2f2:	f388 8811 	msr	BASEPRI, r8
    d2f6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    d2fa:	f06f 000f 	mvn.w	r0, #15
    d2fe:	e00c      	b.n	d31a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    d300:	6891      	ldr	r1, [r2, #8]
    d302:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    d306:	3301      	adds	r3, #1
    d308:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    d30a:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    d30c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    d30e:	60a3      	str	r3, [r4, #8]
    d310:	f388 8811 	msr	BASEPRI, r8
    d314:	f3bf 8f6f 	isb	sy
		return 0;
    d318:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    d31a:	b002      	add	sp, #8
    d31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    d320:	6921      	ldr	r1, [r4, #16]
    d322:	e7f0      	b.n	d306 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    d324:	f991 100e 	ldrsb.w	r1, [r1, #14]
    d328:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    d32c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    d330:	4299      	cmp	r1, r3
    d332:	bfa8      	it	ge
    d334:	4619      	movge	r1, r3
    d336:	4291      	cmp	r1, r2
    d338:	bfb8      	it	lt
    d33a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    d33c:	428b      	cmp	r3, r1
    d33e:	dd2e      	ble.n	d39e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    d340:	f002 f9c6 	bl	f6d0 <adjust_owner_prio.isra.0>
    d344:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    d346:	4622      	mov	r2, r4
    d348:	4641      	mov	r1, r8
    d34a:	e9cd 7600 	strd	r7, r6, [sp]
    d34e:	4818      	ldr	r0, [pc, #96]	; (d3b0 <z_impl_k_mutex_lock+0xec>)
    d350:	f000 fa54 	bl	d7fc <z_pend_curr>
	if (got_mutex == 0) {
    d354:	2800      	cmp	r0, #0
    d356:	d0e0      	beq.n	d31a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    d358:	f04f 0320 	mov.w	r3, #32
    d35c:	f3ef 8611 	mrs	r6, BASEPRI
    d360:	f383 8812 	msr	BASEPRI_MAX, r3
    d364:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    d368:	6823      	ldr	r3, [r4, #0]
    d36a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d36c:	429c      	cmp	r4, r3
    d36e:	d00a      	beq.n	d386 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    d370:	b14b      	cbz	r3, d386 <z_impl_k_mutex_lock+0xc2>
    d372:	f993 300e 	ldrsb.w	r3, [r3, #14]
    d376:	4299      	cmp	r1, r3
    d378:	bfa8      	it	ge
    d37a:	4619      	movge	r1, r3
    d37c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    d380:	4299      	cmp	r1, r3
    d382:	bfb8      	it	lt
    d384:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    d386:	68a0      	ldr	r0, [r4, #8]
    d388:	f002 f9a2 	bl	f6d0 <adjust_owner_prio.isra.0>
    d38c:	b900      	cbnz	r0, d390 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    d38e:	b145      	cbz	r5, d3a2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    d390:	4631      	mov	r1, r6
    d392:	4807      	ldr	r0, [pc, #28]	; (d3b0 <z_impl_k_mutex_lock+0xec>)
    d394:	f000 f8de 	bl	d554 <z_reschedule>
	return -EAGAIN;
    d398:	f06f 000a 	mvn.w	r0, #10
    d39c:	e7bd      	b.n	d31a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    d39e:	2500      	movs	r5, #0
    d3a0:	e7d1      	b.n	d346 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    d3a2:	f386 8811 	msr	BASEPRI, r6
    d3a6:	f3bf 8f6f 	isb	sy
    d3aa:	e7f5      	b.n	d398 <z_impl_k_mutex_lock+0xd4>
    d3ac:	2000ce54 	.word	0x2000ce54
    d3b0:	2000d2c5 	.word	0x2000d2c5

0000d3b4 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    d3b4:	6883      	ldr	r3, [r0, #8]
{
    d3b6:	b570      	push	{r4, r5, r6, lr}
    d3b8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    d3ba:	b36b      	cbz	r3, d418 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    d3bc:	4a19      	ldr	r2, [pc, #100]	; (d424 <z_impl_k_mutex_unlock+0x70>)
    d3be:	6892      	ldr	r2, [r2, #8]
    d3c0:	4293      	cmp	r3, r2
    d3c2:	d12c      	bne.n	d41e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    d3c4:	68c3      	ldr	r3, [r0, #12]
    d3c6:	2b01      	cmp	r3, #1
    d3c8:	d903      	bls.n	d3d2 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    d3ca:	3b01      	subs	r3, #1
    d3cc:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    d3ce:	2000      	movs	r0, #0
}
    d3d0:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    d3d2:	f04f 0320 	mov.w	r3, #32
    d3d6:	f3ef 8511 	mrs	r5, BASEPRI
    d3da:	f383 8812 	msr	BASEPRI_MAX, r3
    d3de:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    d3e2:	6901      	ldr	r1, [r0, #16]
    d3e4:	6880      	ldr	r0, [r0, #8]
    d3e6:	f002 f973 	bl	f6d0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    d3ea:	4620      	mov	r0, r4
    d3ec:	f002 fa2d 	bl	f84a <z_unpend_first_thread>
	mutex->owner = new_owner;
    d3f0:	2600      	movs	r6, #0
    d3f2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    d3f4:	b150      	cbz	r0, d40c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    d3f6:	f990 200e 	ldrsb.w	r2, [r0, #14]
    d3fa:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    d3fc:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    d3fe:	f002 f9c8 	bl	f792 <z_ready_thread>
		z_reschedule(&lock, key);
    d402:	4629      	mov	r1, r5
    d404:	4808      	ldr	r0, [pc, #32]	; (d428 <z_impl_k_mutex_unlock+0x74>)
    d406:	f000 f8a5 	bl	d554 <z_reschedule>
    d40a:	e7e0      	b.n	d3ce <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    d40c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    d40e:	f385 8811 	msr	BASEPRI, r5
    d412:	f3bf 8f6f 	isb	sy
    d416:	e7da      	b.n	d3ce <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    d418:	f06f 0015 	mvn.w	r0, #21
    d41c:	e7d8      	b.n	d3d0 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    d41e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d422:	e7d5      	b.n	d3d0 <z_impl_k_mutex_unlock+0x1c>
    d424:	2000ce54 	.word	0x2000ce54
    d428:	2000d2c5 	.word	0x2000d2c5

0000d42c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    d42c:	b538      	push	{r3, r4, r5, lr}
    d42e:	4604      	mov	r4, r0
	__asm__ volatile(
    d430:	f04f 0320 	mov.w	r3, #32
    d434:	f3ef 8511 	mrs	r5, BASEPRI
    d438:	f383 8812 	msr	BASEPRI_MAX, r3
    d43c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    d440:	f002 fa03 	bl	f84a <z_unpend_first_thread>

	if (thread != NULL) {
    d444:	b148      	cbz	r0, d45a <z_impl_k_sem_give+0x2e>
    d446:	2200      	movs	r2, #0
    d448:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    d44a:	f002 f9a2 	bl	f792 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    d44e:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    d450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    d454:	4807      	ldr	r0, [pc, #28]	; (d474 <z_impl_k_sem_give+0x48>)
    d456:	f000 b87d 	b.w	d554 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    d45a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    d45e:	429a      	cmp	r2, r3
    d460:	bf18      	it	ne
    d462:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    d464:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    d466:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    d468:	f104 0010 	add.w	r0, r4, #16
    d46c:	f002 fb01 	bl	fa72 <z_handle_obj_poll_events>
}
    d470:	e7ed      	b.n	d44e <z_impl_k_sem_give+0x22>
    d472:	bf00      	nop
    d474:	2000d2c5 	.word	0x2000d2c5

0000d478 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    d478:	b513      	push	{r0, r1, r4, lr}
    d47a:	f04f 0420 	mov.w	r4, #32
    d47e:	f3ef 8111 	mrs	r1, BASEPRI
    d482:	f384 8812 	msr	BASEPRI_MAX, r4
    d486:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    d48a:	6884      	ldr	r4, [r0, #8]
    d48c:	b144      	cbz	r4, d4a0 <z_impl_k_sem_take+0x28>
		sem->count--;
    d48e:	3c01      	subs	r4, #1
    d490:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    d492:	f381 8811 	msr	BASEPRI, r1
    d496:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    d49a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    d49c:	b002      	add	sp, #8
    d49e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    d4a0:	ea52 0403 	orrs.w	r4, r2, r3
    d4a4:	d106      	bne.n	d4b4 <z_impl_k_sem_take+0x3c>
    d4a6:	f381 8811 	msr	BASEPRI, r1
    d4aa:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    d4ae:	f06f 000f 	mvn.w	r0, #15
    d4b2:	e7f3      	b.n	d49c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    d4b4:	e9cd 2300 	strd	r2, r3, [sp]
    d4b8:	4602      	mov	r2, r0
    d4ba:	4802      	ldr	r0, [pc, #8]	; (d4c4 <z_impl_k_sem_take+0x4c>)
    d4bc:	f000 f99e 	bl	d7fc <z_pend_curr>
	return ret;
    d4c0:	e7ec      	b.n	d49c <z_impl_k_sem_take+0x24>
    d4c2:	bf00      	nop
    d4c4:	2000d2c5 	.word	0x2000d2c5

0000d4c8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    d4c8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    d4ca:	4d07      	ldr	r5, [pc, #28]	; (d4e8 <z_reset_time_slice+0x20>)
    d4cc:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    d4ce:	b154      	cbz	r4, d4e6 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    d4d0:	f7fd fb1a 	bl	ab08 <sys_clock_elapsed>
    d4d4:	4b05      	ldr	r3, [pc, #20]	; (d4ec <z_reset_time_slice+0x24>)
    d4d6:	4404      	add	r4, r0
    d4d8:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    d4da:	6828      	ldr	r0, [r5, #0]
    d4dc:	2100      	movs	r1, #0
	}
}
    d4de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    d4e2:	f002 ba1d 	b.w	f920 <z_set_timeout_expiry>
}
    d4e6:	bd38      	pop	{r3, r4, r5, pc}
    d4e8:	2000ce84 	.word	0x2000ce84
    d4ec:	2000ce54 	.word	0x2000ce54

0000d4f0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    d4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d4f2:	4604      	mov	r4, r0
    d4f4:	460d      	mov	r5, r1
	__asm__ volatile(
    d4f6:	f04f 0320 	mov.w	r3, #32
    d4fa:	f3ef 8711 	mrs	r7, BASEPRI
    d4fe:	f383 8812 	msr	BASEPRI_MAX, r3
    d502:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    d506:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    d508:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    d50c:	f240 30e7 	movw	r0, #999	; 0x3e7
    d510:	4e0d      	ldr	r6, [pc, #52]	; (d548 <k_sched_time_slice_set+0x58>)
    d512:	2300      	movs	r3, #0
    d514:	6131      	str	r1, [r6, #16]
    d516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d51a:	fbe4 010c 	umlal	r0, r1, r4, ip
    d51e:	f7fa fe11 	bl	8144 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    d522:	2c00      	cmp	r4, #0
    d524:	4b09      	ldr	r3, [pc, #36]	; (d54c <k_sched_time_slice_set+0x5c>)
    d526:	dc0a      	bgt.n	d53e <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    d528:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    d52a:	4b09      	ldr	r3, [pc, #36]	; (d550 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    d52c:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    d52e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    d530:	f7ff ffca 	bl	d4c8 <z_reset_time_slice>
	__asm__ volatile(
    d534:	f387 8811 	msr	BASEPRI, r7
    d538:	f3bf 8f6f 	isb	sy
	}
}
    d53c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    d53e:	2802      	cmp	r0, #2
    d540:	bfb8      	it	lt
    d542:	2002      	movlt	r0, #2
    d544:	e7f0      	b.n	d528 <k_sched_time_slice_set+0x38>
    d546:	bf00      	nop
    d548:	2000ce54 	.word	0x2000ce54
    d54c:	2000ce84 	.word	0x2000ce84
    d550:	2000ce80 	.word	0x2000ce80

0000d554 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    d554:	b949      	cbnz	r1, d56a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d556:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    d55a:	b930      	cbnz	r0, d56a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    d55c:	4b05      	ldr	r3, [pc, #20]	; (d574 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    d55e:	69da      	ldr	r2, [r3, #28]
    d560:	689b      	ldr	r3, [r3, #8]
    d562:	429a      	cmp	r2, r3
    d564:	d001      	beq.n	d56a <z_reschedule+0x16>
	ret = arch_swap(key);
    d566:	f7fb be9d 	b.w	92a4 <arch_swap>
    d56a:	f381 8811 	msr	BASEPRI, r1
    d56e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    d572:	4770      	bx	lr
    d574:	2000ce54 	.word	0x2000ce54

0000d578 <k_sched_lock>:
	__asm__ volatile(
    d578:	f04f 0320 	mov.w	r3, #32
    d57c:	f3ef 8111 	mrs	r1, BASEPRI
    d580:	f383 8812 	msr	BASEPRI_MAX, r3
    d584:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    d588:	4b04      	ldr	r3, [pc, #16]	; (d59c <k_sched_lock+0x24>)
    d58a:	689a      	ldr	r2, [r3, #8]
    d58c:	7bd3      	ldrb	r3, [r2, #15]
    d58e:	3b01      	subs	r3, #1
    d590:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    d592:	f381 8811 	msr	BASEPRI, r1
    d596:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    d59a:	4770      	bx	lr
    d59c:	2000ce54 	.word	0x2000ce54

0000d5a0 <update_cache>:
{
    d5a0:	b538      	push	{r3, r4, r5, lr}
    d5a2:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    d5a4:	480c      	ldr	r0, [pc, #48]	; (d5d8 <update_cache+0x38>)
    d5a6:	f002 f8ee 	bl	f786 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    d5aa:	4d0c      	ldr	r5, [pc, #48]	; (d5dc <update_cache+0x3c>)
    d5ac:	4604      	mov	r4, r0
    d5ae:	b900      	cbnz	r0, d5b2 <update_cache+0x12>
    d5b0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    d5b2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    d5b4:	b94a      	cbnz	r2, d5ca <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    d5b6:	7b5a      	ldrb	r2, [r3, #13]
    d5b8:	06d2      	lsls	r2, r2, #27
    d5ba:	d106      	bne.n	d5ca <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    d5bc:	69a2      	ldr	r2, [r4, #24]
    d5be:	b922      	cbnz	r2, d5ca <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    d5c0:	89da      	ldrh	r2, [r3, #14]
    d5c2:	2a7f      	cmp	r2, #127	; 0x7f
    d5c4:	d901      	bls.n	d5ca <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    d5c6:	61eb      	str	r3, [r5, #28]
}
    d5c8:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    d5ca:	429c      	cmp	r4, r3
    d5cc:	d002      	beq.n	d5d4 <update_cache+0x34>
			z_reset_time_slice(thread);
    d5ce:	4620      	mov	r0, r4
    d5d0:	f7ff ff7a 	bl	d4c8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    d5d4:	61ec      	str	r4, [r5, #28]
}
    d5d6:	e7f7      	b.n	d5c8 <update_cache+0x28>
    d5d8:	2000ce74 	.word	0x2000ce74
    d5dc:	2000ce54 	.word	0x2000ce54

0000d5e0 <move_thread_to_end_of_prio_q>:
{
    d5e0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    d5e2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    d5e6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    d5e8:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    d5ea:	7b43      	ldrb	r3, [r0, #13]
    d5ec:	da04      	bge.n	d5f8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d5ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d5f2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    d5f4:	f002 f88b 	bl	f70e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    d5f8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    d5fa:	4a15      	ldr	r2, [pc, #84]	; (d650 <move_thread_to_end_of_prio_q+0x70>)
    d5fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d600:	734b      	strb	r3, [r1, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d602:	f102 0520 	add.w	r5, r2, #32
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    d606:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d60a:	42ab      	cmp	r3, r5
    d60c:	d01b      	beq.n	d646 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d60e:	b1d3      	cbz	r3, d646 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    d610:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    d614:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    d618:	4286      	cmp	r6, r0
    d61a:	d00f      	beq.n	d63c <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    d61c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    d61e:	2800      	cmp	r0, #0
    d620:	dd0c      	ble.n	d63c <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    d622:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    d624:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    d628:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    d62a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    d62c:	6890      	ldr	r0, [r2, #8]
}
    d62e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    d632:	1a43      	subs	r3, r0, r1
    d634:	4258      	negs	r0, r3
    d636:	4158      	adcs	r0, r3
    d638:	f7ff bfb2 	b.w	d5a0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    d63c:	42a3      	cmp	r3, r4
    d63e:	d002      	beq.n	d646 <move_thread_to_end_of_prio_q+0x66>
    d640:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d642:	2b00      	cmp	r3, #0
    d644:	d1e6      	bne.n	d614 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    d646:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    d64a:	6021      	str	r1, [r4, #0]
	list->tail = node;
    d64c:	6251      	str	r1, [r2, #36]	; 0x24
}
    d64e:	e7ed      	b.n	d62c <move_thread_to_end_of_prio_q+0x4c>
    d650:	2000ce54 	.word	0x2000ce54

0000d654 <z_time_slice>:
{
    d654:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    d656:	f04f 0320 	mov.w	r3, #32
    d65a:	f3ef 8511 	mrs	r5, BASEPRI
    d65e:	f383 8812 	msr	BASEPRI_MAX, r3
    d662:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    d666:	4b17      	ldr	r3, [pc, #92]	; (d6c4 <z_time_slice+0x70>)
    d668:	4a17      	ldr	r2, [pc, #92]	; (d6c8 <z_time_slice+0x74>)
    d66a:	689c      	ldr	r4, [r3, #8]
    d66c:	6811      	ldr	r1, [r2, #0]
    d66e:	428c      	cmp	r4, r1
    d670:	d107      	bne.n	d682 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    d672:	4620      	mov	r0, r4
    d674:	f7ff ff28 	bl	d4c8 <z_reset_time_slice>
	__asm__ volatile(
    d678:	f385 8811 	msr	BASEPRI, r5
    d67c:	f3bf 8f6f 	isb	sy
}
    d680:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    d682:	2100      	movs	r1, #0
    d684:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    d686:	4a11      	ldr	r2, [pc, #68]	; (d6cc <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    d688:	6812      	ldr	r2, [r2, #0]
    d68a:	b1c2      	cbz	r2, d6be <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    d68c:	89e2      	ldrh	r2, [r4, #14]
    d68e:	2a7f      	cmp	r2, #127	; 0x7f
    d690:	d815      	bhi.n	d6be <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    d692:	7b62      	ldrb	r2, [r4, #13]
    d694:	06d2      	lsls	r2, r2, #27
    d696:	d112      	bne.n	d6be <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    d698:	4a0d      	ldr	r2, [pc, #52]	; (d6d0 <z_time_slice+0x7c>)
    d69a:	f994 100e 	ldrsb.w	r1, [r4, #14]
    d69e:	6812      	ldr	r2, [r2, #0]
    d6a0:	4291      	cmp	r1, r2
    d6a2:	db0c      	blt.n	d6be <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    d6a4:	4a0b      	ldr	r2, [pc, #44]	; (d6d4 <z_time_slice+0x80>)
    d6a6:	4294      	cmp	r4, r2
    d6a8:	d009      	beq.n	d6be <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    d6aa:	691a      	ldr	r2, [r3, #16]
    d6ac:	4282      	cmp	r2, r0
    d6ae:	dc03      	bgt.n	d6b8 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    d6b0:	4620      	mov	r0, r4
    d6b2:	f7ff ff95 	bl	d5e0 <move_thread_to_end_of_prio_q>
    d6b6:	e7dc      	b.n	d672 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    d6b8:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    d6ba:	611a      	str	r2, [r3, #16]
    d6bc:	e7dc      	b.n	d678 <z_time_slice+0x24>
    d6be:	2200      	movs	r2, #0
    d6c0:	e7fb      	b.n	d6ba <z_time_slice+0x66>
    d6c2:	bf00      	nop
    d6c4:	2000ce54 	.word	0x2000ce54
    d6c8:	2000ce7c 	.word	0x2000ce7c
    d6cc:	2000ce84 	.word	0x2000ce84
    d6d0:	2000ce80 	.word	0x2000ce80
    d6d4:	2000c700 	.word	0x2000c700

0000d6d8 <ready_thread>:
{
    d6d8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    d6da:	f990 200d 	ldrsb.w	r2, [r0, #13]
    d6de:	7b43      	ldrb	r3, [r0, #13]
    d6e0:	2a00      	cmp	r2, #0
    d6e2:	db2a      	blt.n	d73a <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    d6e4:	06da      	lsls	r2, r3, #27
    d6e6:	d128      	bne.n	d73a <ready_thread+0x62>
    d6e8:	6982      	ldr	r2, [r0, #24]
    d6ea:	bb32      	cbnz	r2, d73a <ready_thread+0x62>
	return list->head == list;
    d6ec:	4a14      	ldr	r2, [pc, #80]	; (d740 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    d6ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d6f2:	7343      	strb	r3, [r0, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d6f4:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
    d6f8:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d6fc:	42ab      	cmp	r3, r5
    d6fe:	d017      	beq.n	d730 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d700:	b1b3      	cbz	r3, d730 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    d702:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    d706:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    d70a:	428e      	cmp	r6, r1
    d70c:	d00b      	beq.n	d726 <ready_thread+0x4e>
		return b2 - b1;
    d70e:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    d710:	2900      	cmp	r1, #0
    d712:	dd08      	ble.n	d726 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    d714:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    d716:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    d71a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    d71c:	6058      	str	r0, [r3, #4]
		update_cache(0);
    d71e:	2000      	movs	r0, #0
}
    d720:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    d722:	f7ff bf3d 	b.w	d5a0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    d726:	42a3      	cmp	r3, r4
    d728:	d002      	beq.n	d730 <ready_thread+0x58>
    d72a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d72c:	2b00      	cmp	r3, #0
    d72e:	d1ea      	bne.n	d706 <ready_thread+0x2e>
	node->prev = tail;
    d730:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    d734:	6020      	str	r0, [r4, #0]
	list->tail = node;
    d736:	6250      	str	r0, [r2, #36]	; 0x24
}
    d738:	e7f1      	b.n	d71e <ready_thread+0x46>
}
    d73a:	bc70      	pop	{r4, r5, r6}
    d73c:	4770      	bx	lr
    d73e:	bf00      	nop
    d740:	2000ce54 	.word	0x2000ce54

0000d744 <z_sched_start>:
{
    d744:	b510      	push	{r4, lr}
	__asm__ volatile(
    d746:	f04f 0220 	mov.w	r2, #32
    d74a:	f3ef 8411 	mrs	r4, BASEPRI
    d74e:	f382 8812 	msr	BASEPRI_MAX, r2
    d752:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    d756:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    d758:	0751      	lsls	r1, r2, #29
    d75a:	d404      	bmi.n	d766 <z_sched_start+0x22>
	__asm__ volatile(
    d75c:	f384 8811 	msr	BASEPRI, r4
    d760:	f3bf 8f6f 	isb	sy
}
    d764:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    d766:	f022 0204 	bic.w	r2, r2, #4
    d76a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    d76c:	f7ff ffb4 	bl	d6d8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    d770:	4621      	mov	r1, r4
}
    d772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    d776:	4801      	ldr	r0, [pc, #4]	; (d77c <z_sched_start+0x38>)
    d778:	f7ff beec 	b.w	d554 <z_reschedule>
    d77c:	2000d2c5 	.word	0x2000d2c5

0000d780 <unready_thread>:
{
    d780:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    d782:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    d786:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    d788:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    d78a:	7b43      	ldrb	r3, [r0, #13]
    d78c:	da04      	bge.n	d798 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d78e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d792:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    d794:	f001 ffbb 	bl	f70e <sys_dlist_remove>
	update_cache(thread == _current);
    d798:	4b04      	ldr	r3, [pc, #16]	; (d7ac <unready_thread+0x2c>)
    d79a:	6898      	ldr	r0, [r3, #8]
    d79c:	1a43      	subs	r3, r0, r1
    d79e:	4258      	negs	r0, r3
    d7a0:	4158      	adcs	r0, r3
}
    d7a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    d7a6:	f7ff befb 	b.w	d5a0 <update_cache>
    d7aa:	bf00      	nop
    d7ac:	2000ce54 	.word	0x2000ce54

0000d7b0 <pend>:
{
    d7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7b4:	4606      	mov	r6, r0
    d7b6:	4615      	mov	r5, r2
    d7b8:	461c      	mov	r4, r3
	__asm__ volatile(
    d7ba:	f04f 0320 	mov.w	r3, #32
    d7be:	f3ef 8711 	mrs	r7, BASEPRI
    d7c2:	f383 8812 	msr	BASEPRI_MAX, r3
    d7c6:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    d7ca:	f002 f814 	bl	f7f6 <add_to_waitq_locked>
	__asm__ volatile(
    d7ce:	f387 8811 	msr	BASEPRI, r7
    d7d2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d7d6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    d7da:	bf08      	it	eq
    d7dc:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    d7e0:	d008      	beq.n	d7f4 <pend+0x44>
    d7e2:	462a      	mov	r2, r5
    d7e4:	4623      	mov	r3, r4
    d7e6:	f106 0018 	add.w	r0, r6, #24
    d7ea:	4903      	ldr	r1, [pc, #12]	; (d7f8 <pend+0x48>)
}
    d7ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d7f0:	f000 ba38 	b.w	dc64 <z_add_timeout>
    d7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d7f8:	0000f7b3 	.word	0x0000f7b3

0000d7fc <z_pend_curr>:
{
    d7fc:	b510      	push	{r4, lr}
    d7fe:	460c      	mov	r4, r1
	pending_current = _current;
    d800:	4b06      	ldr	r3, [pc, #24]	; (d81c <z_pend_curr+0x20>)
{
    d802:	4611      	mov	r1, r2
	pending_current = _current;
    d804:	6898      	ldr	r0, [r3, #8]
    d806:	4b06      	ldr	r3, [pc, #24]	; (d820 <z_pend_curr+0x24>)
    d808:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    d80a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d80e:	f7ff ffcf 	bl	d7b0 <pend>
    d812:	4620      	mov	r0, r4
}
    d814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d818:	f7fb bd44 	b.w	92a4 <arch_swap>
    d81c:	2000ce54 	.word	0x2000ce54
    d820:	2000ce7c 	.word	0x2000ce7c

0000d824 <z_set_prio>:
{
    d824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d826:	4604      	mov	r4, r0
	__asm__ volatile(
    d828:	f04f 0320 	mov.w	r3, #32
    d82c:	f3ef 8611 	mrs	r6, BASEPRI
    d830:	f383 8812 	msr	BASEPRI_MAX, r3
    d834:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    d838:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    d83a:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    d83c:	06da      	lsls	r2, r3, #27
    d83e:	d133      	bne.n	d8a8 <z_set_prio+0x84>
		if (need_sched) {
    d840:	6982      	ldr	r2, [r0, #24]
    d842:	bb8a      	cbnz	r2, d8a8 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d848:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    d84a:	f001 ff60 	bl	f70e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    d84e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    d850:	4a17      	ldr	r2, [pc, #92]	; (d8b0 <z_set_prio+0x8c>)
    d852:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d856:	7343      	strb	r3, [r0, #13]
				thread->base.prio = prio;
    d858:	7381      	strb	r1, [r0, #14]
    d85a:	4610      	mov	r0, r2
    d85c:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d860:	4283      	cmp	r3, r0
    d862:	d01b      	beq.n	d89c <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d864:	b1d3      	cbz	r3, d89c <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    d866:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    d868:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    d86c:	42a9      	cmp	r1, r5
    d86e:	d010      	beq.n	d892 <z_set_prio+0x6e>
		return b2 - b1;
    d870:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    d872:	2d00      	cmp	r5, #0
    d874:	dd0d      	ble.n	d892 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    d876:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    d878:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    d87c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    d87e:	605c      	str	r4, [r3, #4]
			update_cache(1);
    d880:	2001      	movs	r0, #1
    d882:	f7ff fe8d 	bl	d5a0 <update_cache>
    d886:	2001      	movs	r0, #1
	__asm__ volatile(
    d888:	f386 8811 	msr	BASEPRI, r6
    d88c:	f3bf 8f6f 	isb	sy
}
    d890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    d892:	42bb      	cmp	r3, r7
    d894:	d002      	beq.n	d89c <z_set_prio+0x78>
    d896:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d898:	2b00      	cmp	r3, #0
    d89a:	d1e5      	bne.n	d868 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    d89c:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    d89e:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    d8a2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    d8a4:	6254      	str	r4, [r2, #36]	; 0x24
}
    d8a6:	e7eb      	b.n	d880 <z_set_prio+0x5c>
			thread->base.prio = prio;
    d8a8:	2000      	movs	r0, #0
    d8aa:	73a1      	strb	r1, [r4, #14]
    d8ac:	e7ec      	b.n	d888 <z_set_prio+0x64>
    d8ae:	bf00      	nop
    d8b0:	2000ce54 	.word	0x2000ce54

0000d8b4 <z_impl_k_thread_suspend>:
{
    d8b4:	b570      	push	{r4, r5, r6, lr}
    d8b6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    d8b8:	3018      	adds	r0, #24
    d8ba:	f002 f80b 	bl	f8d4 <z_abort_timeout>
	__asm__ volatile(
    d8be:	f04f 0320 	mov.w	r3, #32
    d8c2:	f3ef 8611 	mrs	r6, BASEPRI
    d8c6:	f383 8812 	msr	BASEPRI_MAX, r3
    d8ca:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    d8ce:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    d8d2:	7b63      	ldrb	r3, [r4, #13]
    d8d4:	2a00      	cmp	r2, #0
    d8d6:	da05      	bge.n	d8e4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d8d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    d8dc:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d8de:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    d8e0:	f001 ff15 	bl	f70e <sys_dlist_remove>
		update_cache(thread == _current);
    d8e4:	4d0b      	ldr	r5, [pc, #44]	; (d914 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    d8e6:	7b63      	ldrb	r3, [r4, #13]
    d8e8:	68a8      	ldr	r0, [r5, #8]
    d8ea:	f043 0310 	orr.w	r3, r3, #16
    d8ee:	7363      	strb	r3, [r4, #13]
    d8f0:	1b03      	subs	r3, r0, r4
    d8f2:	4258      	negs	r0, r3
    d8f4:	4158      	adcs	r0, r3
    d8f6:	f7ff fe53 	bl	d5a0 <update_cache>
	__asm__ volatile(
    d8fa:	f386 8811 	msr	BASEPRI, r6
    d8fe:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    d902:	68ab      	ldr	r3, [r5, #8]
    d904:	42a3      	cmp	r3, r4
    d906:	d103      	bne.n	d910 <z_impl_k_thread_suspend+0x5c>
}
    d908:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    d90c:	f001 bf31 	b.w	f772 <z_reschedule_unlocked>
}
    d910:	bd70      	pop	{r4, r5, r6, pc}
    d912:	bf00      	nop
    d914:	2000ce54 	.word	0x2000ce54

0000d918 <k_sched_unlock>:
{
    d918:	b510      	push	{r4, lr}
	__asm__ volatile(
    d91a:	f04f 0320 	mov.w	r3, #32
    d91e:	f3ef 8411 	mrs	r4, BASEPRI
    d922:	f383 8812 	msr	BASEPRI_MAX, r3
    d926:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    d92a:	4b08      	ldr	r3, [pc, #32]	; (d94c <k_sched_unlock+0x34>)
		update_cache(0);
    d92c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    d92e:	689a      	ldr	r2, [r3, #8]
    d930:	7bd3      	ldrb	r3, [r2, #15]
    d932:	3301      	adds	r3, #1
    d934:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    d936:	f7ff fe33 	bl	d5a0 <update_cache>
	__asm__ volatile(
    d93a:	f384 8811 	msr	BASEPRI, r4
    d93e:	f3bf 8f6f 	isb	sy
}
    d942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    d946:	f001 bf14 	b.w	f772 <z_reschedule_unlocked>
    d94a:	bf00      	nop
    d94c:	2000ce54 	.word	0x2000ce54

0000d950 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    d950:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    d952:	4b04      	ldr	r3, [pc, #16]	; (d964 <z_sched_init+0x14>)
    d954:	4608      	mov	r0, r1
    d956:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    d95a:	e9c3 2208 	strd	r2, r2, [r3, #32]
    d95e:	f7ff bdc7 	b.w	d4f0 <k_sched_time_slice_set>
    d962:	bf00      	nop
    d964:	2000ce54 	.word	0x2000ce54

0000d968 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    d968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    d96a:	f04f 0320 	mov.w	r3, #32
    d96e:	f3ef 8511 	mrs	r5, BASEPRI
    d972:	f383 8812 	msr	BASEPRI_MAX, r3
    d976:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    d97a:	491a      	ldr	r1, [pc, #104]	; (d9e4 <z_impl_k_yield+0x7c>)
    d97c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d97e:	7b43      	ldrb	r3, [r0, #13]
    d980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d984:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    d986:	f001 fec2 	bl	f70e <sys_dlist_remove>
	return list->head == list;
    d98a:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    d98c:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    d98e:	7b5a      	ldrb	r2, [r3, #13]
    d990:	f062 027f 	orn	r2, r2, #127	; 0x7f
    d994:	735a      	strb	r2, [r3, #13]
    d996:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d99a:	4282      	cmp	r2, r0
    d99c:	d01c      	beq.n	d9d8 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d99e:	b1da      	cbz	r2, d9d8 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    d9a0:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    d9a2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    d9a6:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    d9aa:	42a6      	cmp	r6, r4
    d9ac:	d00f      	beq.n	d9ce <z_impl_k_yield+0x66>
		return b2 - b1;
    d9ae:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    d9b0:	2c00      	cmp	r4, #0
    d9b2:	dd0c      	ble.n	d9ce <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    d9b4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    d9b6:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    d9ba:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    d9bc:	6053      	str	r3, [r2, #4]
	update_cache(1);
    d9be:	2001      	movs	r0, #1
    d9c0:	f7ff fdee 	bl	d5a0 <update_cache>
    d9c4:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    d9c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d9ca:	f7fb bc6b 	b.w	92a4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    d9ce:	42ba      	cmp	r2, r7
    d9d0:	d002      	beq.n	d9d8 <z_impl_k_yield+0x70>
    d9d2:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d9d4:	2a00      	cmp	r2, #0
    d9d6:	d1e6      	bne.n	d9a6 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    d9d8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    d9da:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    d9de:	6013      	str	r3, [r2, #0]
	list->tail = node;
    d9e0:	624b      	str	r3, [r1, #36]	; 0x24
}
    d9e2:	e7ec      	b.n	d9be <z_impl_k_yield+0x56>
    d9e4:	2000ce54 	.word	0x2000ce54

0000d9e8 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    d9e8:	ea50 0301 	orrs.w	r3, r0, r1
{
    d9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9f0:	4605      	mov	r5, r0
    d9f2:	460e      	mov	r6, r1
	if (ticks == 0) {
    d9f4:	d103      	bne.n	d9fe <z_tick_sleep+0x16>
	z_impl_k_yield();
    d9f6:	f7ff ffb7 	bl	d968 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    d9fa:	2000      	movs	r0, #0
    d9fc:	e033      	b.n	da66 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    d9fe:	f06f 0401 	mvn.w	r4, #1
    da02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    da06:	1a24      	subs	r4, r4, r0
    da08:	eb63 0301 	sbc.w	r3, r3, r1
    da0c:	2c01      	cmp	r4, #1
    da0e:	f173 0300 	sbcs.w	r3, r3, #0
    da12:	da02      	bge.n	da1a <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    da14:	f001 ff9e 	bl	f954 <sys_clock_tick_get_32>
    da18:	1944      	adds	r4, r0, r5
    da1a:	f04f 0320 	mov.w	r3, #32
    da1e:	f3ef 8811 	mrs	r8, BASEPRI
    da22:	f383 8812 	msr	BASEPRI_MAX, r3
    da26:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    da2a:	4f10      	ldr	r7, [pc, #64]	; (da6c <z_tick_sleep+0x84>)
    da2c:	4b10      	ldr	r3, [pc, #64]	; (da70 <z_tick_sleep+0x88>)
    da2e:	68b8      	ldr	r0, [r7, #8]
    da30:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    da32:	f7ff fea5 	bl	d780 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    da36:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    da38:	490e      	ldr	r1, [pc, #56]	; (da74 <z_tick_sleep+0x8c>)
    da3a:	462a      	mov	r2, r5
    da3c:	4633      	mov	r3, r6
    da3e:	3018      	adds	r0, #24
    da40:	f000 f910 	bl	dc64 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    da44:	68ba      	ldr	r2, [r7, #8]
    da46:	4640      	mov	r0, r8
    da48:	7b53      	ldrb	r3, [r2, #13]
    da4a:	f043 0310 	orr.w	r3, r3, #16
    da4e:	7353      	strb	r3, [r2, #13]
    da50:	f7fb fc28 	bl	92a4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    da54:	f001 ff7e 	bl	f954 <sys_clock_tick_get_32>
    da58:	1a20      	subs	r0, r4, r0
    da5a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    da5e:	2801      	cmp	r0, #1
    da60:	f173 0300 	sbcs.w	r3, r3, #0
    da64:	dbc9      	blt.n	d9fa <z_tick_sleep+0x12>
}
    da66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da6a:	bf00      	nop
    da6c:	2000ce54 	.word	0x2000ce54
    da70:	2000ce7c 	.word	0x2000ce7c
    da74:	0000f7b3 	.word	0x0000f7b3

0000da78 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    da78:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    da7c:	bf08      	it	eq
    da7e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    da82:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    da84:	d106      	bne.n	da94 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    da86:	4b08      	ldr	r3, [pc, #32]	; (daa8 <z_impl_k_sleep+0x30>)
    da88:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    da8a:	f7ff ff13 	bl	d8b4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    da8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    da92:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    da94:	f7ff ffa8 	bl	d9e8 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    da98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    da9c:	fb80 0303 	smull	r0, r3, r0, r3
    daa0:	0bc0      	lsrs	r0, r0, #15
    daa2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    daa6:	e7f4      	b.n	da92 <z_impl_k_sleep+0x1a>
    daa8:	2000ce54 	.word	0x2000ce54

0000daac <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    daac:	4b01      	ldr	r3, [pc, #4]	; (dab4 <z_impl_z_current_get+0x8>)
    daae:	6898      	ldr	r0, [r3, #8]
    dab0:	4770      	bx	lr
    dab2:	bf00      	nop
    dab4:	2000ce54 	.word	0x2000ce54

0000dab8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    dab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dabc:	4604      	mov	r4, r0
    dabe:	f04f 0320 	mov.w	r3, #32
    dac2:	f3ef 8611 	mrs	r6, BASEPRI
    dac6:	f383 8812 	msr	BASEPRI_MAX, r3
    daca:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    dace:	7b03      	ldrb	r3, [r0, #12]
    dad0:	07d9      	lsls	r1, r3, #31
    dad2:	d50b      	bpl.n	daec <z_thread_abort+0x34>
	__asm__ volatile(
    dad4:	f386 8811 	msr	BASEPRI, r6
    dad8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    dadc:	4040      	eors	r0, r0
    dade:	f380 8811 	msr	BASEPRI, r0
    dae2:	f04f 0004 	mov.w	r0, #4
    dae6:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    dae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    daec:	7b43      	ldrb	r3, [r0, #13]
    daee:	071a      	lsls	r2, r3, #28
    daf0:	d504      	bpl.n	dafc <z_thread_abort+0x44>
    daf2:	f386 8811 	msr	BASEPRI, r6
    daf6:	f3bf 8f6f 	isb	sy
    dafa:	e7f5      	b.n	dae8 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    dafc:	f023 0220 	bic.w	r2, r3, #32
    db00:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    db04:	09d2      	lsrs	r2, r2, #7
    db06:	d120      	bne.n	db4a <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    db08:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    db0a:	68a3      	ldr	r3, [r4, #8]
    db0c:	b113      	cbz	r3, db14 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    db0e:	4620      	mov	r0, r4
    db10:	f001 fe05 	bl	f71e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    db14:	f104 0018 	add.w	r0, r4, #24
    db18:	f001 fedc 	bl	f8d4 <z_abort_timeout>
    db1c:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    db20:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    db24:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    db26:	42bd      	cmp	r5, r7
    db28:	d000      	beq.n	db2c <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    db2a:	b9b5      	cbnz	r5, db5a <z_thread_abort+0xa2>
		update_cache(1);
    db2c:	2001      	movs	r0, #1
    db2e:	f7ff fd37 	bl	d5a0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    db32:	4b10      	ldr	r3, [pc, #64]	; (db74 <z_thread_abort+0xbc>)
    db34:	689b      	ldr	r3, [r3, #8]
    db36:	42a3      	cmp	r3, r4
    db38:	d1db      	bne.n	daf2 <z_thread_abort+0x3a>
    db3a:	f3ef 8305 	mrs	r3, IPSR
    db3e:	2b00      	cmp	r3, #0
    db40:	d1d7      	bne.n	daf2 <z_thread_abort+0x3a>
    db42:	4630      	mov	r0, r6
    db44:	f7fb fbae 	bl	92a4 <arch_swap>
	return ret;
    db48:	e7d3      	b.n	daf2 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    db4a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    db4e:	f043 0308 	orr.w	r3, r3, #8
    db52:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    db54:	f001 fddb 	bl	f70e <sys_dlist_remove>
}
    db58:	e7d7      	b.n	db0a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    db5a:	4628      	mov	r0, r5
    db5c:	f001 fddf 	bl	f71e <unpend_thread_no_timeout>
    db60:	f105 0018 	add.w	r0, r5, #24
    db64:	f001 feb6 	bl	f8d4 <z_abort_timeout>
		ready_thread(thread);
    db68:	4628      	mov	r0, r5
    db6a:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
    db6e:	f7ff fdb3 	bl	d6d8 <ready_thread>
    db72:	e7d7      	b.n	db24 <z_thread_abort+0x6c>
    db74:	2000ce54 	.word	0x2000ce54

0000db78 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    db78:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    db7a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    db7e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    db80:	e9cd 6700 	strd	r6, r7, [sp]
    db84:	f7ff fe3a 	bl	d7fc <z_pend_curr>

	if (data != NULL) {
    db88:	b11c      	cbz	r4, db92 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    db8a:	4b03      	ldr	r3, [pc, #12]	; (db98 <z_sched_wait+0x20>)
    db8c:	689b      	ldr	r3, [r3, #8]
    db8e:	695b      	ldr	r3, [r3, #20]
    db90:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    db92:	b002      	add	sp, #8
    db94:	bdd0      	pop	{r4, r6, r7, pc}
    db96:	bf00      	nop
    db98:	2000ce54 	.word	0x2000ce54

0000db9c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    db9c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    db9e:	4806      	ldr	r0, [pc, #24]	; (dbb8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    dba0:	4a06      	ldr	r2, [pc, #24]	; (dbbc <z_data_copy+0x20>)
    dba2:	4907      	ldr	r1, [pc, #28]	; (dbc0 <z_data_copy+0x24>)
    dba4:	1a12      	subs	r2, r2, r0
    dba6:	f001 fd0f 	bl	f5c8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    dbaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    dbae:	4a05      	ldr	r2, [pc, #20]	; (dbc4 <z_data_copy+0x28>)
    dbb0:	4905      	ldr	r1, [pc, #20]	; (dbc8 <z_data_copy+0x2c>)
    dbb2:	4806      	ldr	r0, [pc, #24]	; (dbcc <z_data_copy+0x30>)
    dbb4:	f001 bd08 	b.w	f5c8 <z_early_memcpy>
    dbb8:	2000c500 	.word	0x2000c500
    dbbc:	2000c6c8 	.word	0x2000c6c8
    dbc0:	000107d4 	.word	0x000107d4
    dbc4:	00000000 	.word	0x00000000
    dbc8:	000107bc 	.word	0x000107bc
    dbcc:	2000c500 	.word	0x2000c500

0000dbd0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    dbd0:	4b03      	ldr	r3, [pc, #12]	; (dbe0 <elapsed+0x10>)
    dbd2:	681b      	ldr	r3, [r3, #0]
    dbd4:	b90b      	cbnz	r3, dbda <elapsed+0xa>
    dbd6:	f7fc bf97 	b.w	ab08 <sys_clock_elapsed>
}
    dbda:	2000      	movs	r0, #0
    dbdc:	4770      	bx	lr
    dbde:	bf00      	nop
    dbe0:	2000ce88 	.word	0x2000ce88

0000dbe4 <next_timeout>:
	return list->head == list;
    dbe4:	4b10      	ldr	r3, [pc, #64]	; (dc28 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    dbe6:	b510      	push	{r4, lr}
    dbe8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    dbea:	429c      	cmp	r4, r3
    dbec:	bf08      	it	eq
    dbee:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    dbf0:	f7ff ffee 	bl	dbd0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    dbf4:	b1a4      	cbz	r4, dc20 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    dbf6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    dbfa:	1a1b      	subs	r3, r3, r0
    dbfc:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    dc00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    dc04:	f170 0200 	sbcs.w	r2, r0, #0
    dc08:	da0a      	bge.n	dc20 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    dc0a:	2800      	cmp	r0, #0
    dc0c:	bfac      	ite	ge
    dc0e:	4618      	movge	r0, r3
    dc10:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    dc12:	4b06      	ldr	r3, [pc, #24]	; (dc2c <next_timeout+0x48>)
    dc14:	691b      	ldr	r3, [r3, #16]
    dc16:	b113      	cbz	r3, dc1e <next_timeout+0x3a>
    dc18:	4298      	cmp	r0, r3
    dc1a:	bfa8      	it	ge
    dc1c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    dc1e:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    dc20:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    dc24:	e7f5      	b.n	dc12 <next_timeout+0x2e>
    dc26:	bf00      	nop
    dc28:	2000c60c 	.word	0x2000c60c
    dc2c:	2000ce54 	.word	0x2000ce54

0000dc30 <remove_timeout>:
{
    dc30:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    dc32:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    dc34:	b168      	cbz	r0, dc52 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    dc36:	4a0a      	ldr	r2, [pc, #40]	; (dc60 <remove_timeout+0x30>)
    dc38:	6852      	ldr	r2, [r2, #4]
    dc3a:	4290      	cmp	r0, r2
    dc3c:	d009      	beq.n	dc52 <remove_timeout+0x22>
	if (next(t) != NULL) {
    dc3e:	b143      	cbz	r3, dc52 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    dc40:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    dc44:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    dc48:	1912      	adds	r2, r2, r4
    dc4a:	eb41 0105 	adc.w	r1, r1, r5
    dc4e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    dc52:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    dc54:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    dc56:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    dc58:	2300      	movs	r3, #0
	node->prev = NULL;
    dc5a:	e9c0 3300 	strd	r3, r3, [r0]
}
    dc5e:	bd30      	pop	{r4, r5, pc}
    dc60:	2000c60c 	.word	0x2000c60c

0000dc64 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    dc64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    dc68:	bf08      	it	eq
    dc6a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    dc6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc70:	4604      	mov	r4, r0
    dc72:	461f      	mov	r7, r3
    dc74:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    dc76:	d067      	beq.n	dd48 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    dc78:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    dc7a:	f04f 0320 	mov.w	r3, #32
    dc7e:	f3ef 8611 	mrs	r6, BASEPRI
    dc82:	f383 8812 	msr	BASEPRI_MAX, r3
    dc86:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    dc8a:	f06f 0201 	mvn.w	r2, #1
    dc8e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    dc92:	1b53      	subs	r3, r2, r5
    dc94:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    dc98:	2b00      	cmp	r3, #0
    dc9a:	db1b      	blt.n	dcd4 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    dc9c:	4b2b      	ldr	r3, [pc, #172]	; (dd4c <z_add_timeout+0xe8>)
    dc9e:	e9d3 1300 	ldrd	r1, r3, [r3]
    dca2:	1a52      	subs	r2, r2, r1
    dca4:	eb6c 0303 	sbc.w	r3, ip, r3
    dca8:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    dcaa:	eb63 0307 	sbc.w	r3, r3, r7
    dcae:	2d01      	cmp	r5, #1
    dcb0:	f173 0200 	sbcs.w	r2, r3, #0
    dcb4:	bfbc      	itt	lt
    dcb6:	2501      	movlt	r5, #1
    dcb8:	2300      	movlt	r3, #0
    dcba:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    dcbe:	4824      	ldr	r0, [pc, #144]	; (dd50 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    dcc0:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    dcc4:	4283      	cmp	r3, r0
    dcc6:	d118      	bne.n	dcfa <z_add_timeout+0x96>
	node->prev = tail;
    dcc8:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    dccc:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    dcd0:	6044      	str	r4, [r0, #4]
}
    dcd2:	e026      	b.n	dd22 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    dcd4:	f7ff ff7c 	bl	dbd0 <elapsed>
    dcd8:	3501      	adds	r5, #1
    dcda:	f147 0700 	adc.w	r7, r7, #0
    dcde:	182d      	adds	r5, r5, r0
    dce0:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    dce4:	e9c4 5704 	strd	r5, r7, [r4, #16]
    dce8:	e7e9      	b.n	dcbe <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    dcea:	1a52      	subs	r2, r2, r1
    dcec:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    dcf0:	459c      	cmp	ip, r3
    dcf2:	e9c4 2504 	strd	r2, r5, [r4, #16]
    dcf6:	d0e7      	beq.n	dcc8 <z_add_timeout+0x64>
    dcf8:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    dcfa:	2b00      	cmp	r3, #0
    dcfc:	d0e4      	beq.n	dcc8 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    dcfe:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    dd02:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    dd06:	428a      	cmp	r2, r1
    dd08:	eb75 0e07 	sbcs.w	lr, r5, r7
    dd0c:	daed      	bge.n	dcea <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    dd0e:	1a8a      	subs	r2, r1, r2
    dd10:	eb67 0505 	sbc.w	r5, r7, r5
    dd14:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    dd18:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    dd1a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    dd1e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    dd20:	605c      	str	r4, [r3, #4]
	return list->head == list;
    dd22:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    dd24:	4283      	cmp	r3, r0
    dd26:	d00b      	beq.n	dd40 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    dd28:	429c      	cmp	r4, r3
    dd2a:	d109      	bne.n	dd40 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    dd2c:	f7ff ff5a 	bl	dbe4 <next_timeout>

			if (next_time == 0 ||
    dd30:	b118      	cbz	r0, dd3a <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    dd32:	4b08      	ldr	r3, [pc, #32]	; (dd54 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    dd34:	691b      	ldr	r3, [r3, #16]
    dd36:	4283      	cmp	r3, r0
    dd38:	d002      	beq.n	dd40 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    dd3a:	2100      	movs	r1, #0
    dd3c:	f7fc feb4 	bl	aaa8 <sys_clock_set_timeout>
	__asm__ volatile(
    dd40:	f386 8811 	msr	BASEPRI, r6
    dd44:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    dd48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dd4a:	bf00      	nop
    dd4c:	2000c810 	.word	0x2000c810
    dd50:	2000c60c 	.word	0x2000c60c
    dd54:	2000ce54 	.word	0x2000ce54

0000dd58 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    dd58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd5c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    dd5e:	f7ff fc79 	bl	d654 <z_time_slice>
	__asm__ volatile(
    dd62:	f04f 0320 	mov.w	r3, #32
    dd66:	f3ef 8511 	mrs	r5, BASEPRI
    dd6a:	f383 8812 	msr	BASEPRI_MAX, r3
    dd6e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    dd72:	4f24      	ldr	r7, [pc, #144]	; (de04 <sys_clock_announce+0xac>)
	return list->head == list;
    dd74:	f8df 8090 	ldr.w	r8, [pc, #144]	; de08 <sys_clock_announce+0xb0>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    dd78:	4e24      	ldr	r6, [pc, #144]	; (de0c <sys_clock_announce+0xb4>)
	announce_remaining = ticks;
    dd7a:	603c      	str	r4, [r7, #0]
    dd7c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    dd80:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    dd82:	4540      	cmp	r0, r8
    dd84:	ea4f 71e3 	mov.w	r1, r3, asr #31
		curr_tick += dt;
    dd88:	e9d6 2e00 	ldrd	r2, lr, [r6]
    dd8c:	d00b      	beq.n	dda6 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    dd8e:	b150      	cbz	r0, dda6 <sys_clock_announce+0x4e>
    dd90:	e9d0 4c04 	ldrd	r4, ip, [r0, #16]
    dd94:	42a3      	cmp	r3, r4
    dd96:	eb71 090c 	sbcs.w	r9, r1, ip
    dd9a:	da16      	bge.n	ddca <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    dd9c:	1ae4      	subs	r4, r4, r3
    dd9e:	eb6c 0c01 	sbc.w	ip, ip, r1
    dda2:	e9c0 4c04 	strd	r4, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    dda6:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    dda8:	189b      	adds	r3, r3, r2
    ddaa:	eb4e 0101 	adc.w	r1, lr, r1
    ddae:	e9c6 3100 	strd	r3, r1, [r6]
	announce_remaining = 0;
    ddb2:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    ddb4:	f7ff ff16 	bl	dbe4 <next_timeout>
    ddb8:	4621      	mov	r1, r4
    ddba:	f7fc fe75 	bl	aaa8 <sys_clock_set_timeout>
	__asm__ volatile(
    ddbe:	f385 8811 	msr	BASEPRI, r5
    ddc2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    ddc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    ddca:	18a2      	adds	r2, r4, r2
    ddcc:	eb4e 71e4 	adc.w	r1, lr, r4, asr #31
		t->dticks = 0;
    ddd0:	2300      	movs	r3, #0
		curr_tick += dt;
    ddd2:	e9c6 2100 	strd	r2, r1, [r6]
		t->dticks = 0;
    ddd6:	2200      	movs	r2, #0
    ddd8:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    dddc:	f7ff ff28 	bl	dc30 <remove_timeout>
    dde0:	f385 8811 	msr	BASEPRI, r5
    dde4:	f3bf 8f6f 	isb	sy
		t->fn(t);
    dde8:	6883      	ldr	r3, [r0, #8]
    ddea:	4798      	blx	r3
	__asm__ volatile(
    ddec:	f04f 0320 	mov.w	r3, #32
    ddf0:	f3ef 8511 	mrs	r5, BASEPRI
    ddf4:	f383 8812 	msr	BASEPRI_MAX, r3
    ddf8:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    ddfc:	683b      	ldr	r3, [r7, #0]
    ddfe:	1b1b      	subs	r3, r3, r4
    de00:	603b      	str	r3, [r7, #0]
    de02:	e7bb      	b.n	dd7c <sys_clock_announce+0x24>
    de04:	2000ce88 	.word	0x2000ce88
    de08:	2000c60c 	.word	0x2000c60c
    de0c:	2000c810 	.word	0x2000c810

0000de10 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    de10:	b510      	push	{r4, lr}
    de12:	f04f 0320 	mov.w	r3, #32
    de16:	f3ef 8411 	mrs	r4, BASEPRI
    de1a:	f383 8812 	msr	BASEPRI_MAX, r3
    de1e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    de22:	f7ff fed5 	bl	dbd0 <elapsed>
    de26:	4601      	mov	r1, r0
    de28:	4b05      	ldr	r3, [pc, #20]	; (de40 <sys_clock_tick_get+0x30>)
    de2a:	e9d3 0300 	ldrd	r0, r3, [r3]
    de2e:	1808      	adds	r0, r1, r0
    de30:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
	__asm__ volatile(
    de34:	f384 8811 	msr	BASEPRI, r4
    de38:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    de3c:	bd10      	pop	{r4, pc}
    de3e:	bf00      	nop
    de40:	2000c810 	.word	0x2000c810

0000de44 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    de44:	b538      	push	{r3, r4, r5, lr}
    de46:	4603      	mov	r3, r0
	__asm__ volatile(
    de48:	f04f 0220 	mov.w	r2, #32
    de4c:	f3ef 8511 	mrs	r5, BASEPRI
    de50:	f382 8812 	msr	BASEPRI_MAX, r2
    de54:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    de58:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    de5a:	2101      	movs	r1, #1
    de5c:	6081      	str	r1, [r0, #8]
	return list->head == list;
    de5e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    de60:	4283      	cmp	r3, r0
    de62:	d106      	bne.n	de72 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    de64:	f385 8811 	msr	BASEPRI, r5
    de68:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
    de6c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
    de6e:	4620      	mov	r0, r4
    de70:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
    de72:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    de76:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    de78:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    de7a:	2300      	movs	r3, #0
	node->prev = NULL;
    de7c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    de80:	f001 fd9d 	bl	f9be <signal_poll_event>
	z_reschedule(&lock, key);
    de84:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    de86:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    de88:	4801      	ldr	r0, [pc, #4]	; (de90 <z_impl_k_poll_signal_raise+0x4c>)
    de8a:	f7ff fb63 	bl	d554 <z_reschedule>
	return rc;
    de8e:	e7ee      	b.n	de6e <z_impl_k_poll_signal_raise+0x2a>
    de90:	2000d2c5 	.word	0x2000d2c5

0000de94 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    de94:	4b01      	ldr	r3, [pc, #4]	; (de9c <k_thread_system_pool_assign+0x8>)
    de96:	6743      	str	r3, [r0, #116]	; 0x74
}
    de98:	4770      	bx	lr
    de9a:	bf00      	nop
    de9c:	2000c68c 	.word	0x2000c68c

0000dea0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    dea0:	4a02      	ldr	r2, [pc, #8]	; (deac <boot_banner+0xc>)
    dea2:	4903      	ldr	r1, [pc, #12]	; (deb0 <boot_banner+0x10>)
    dea4:	4803      	ldr	r0, [pc, #12]	; (deb4 <boot_banner+0x14>)
    dea6:	f000 bce8 	b.w	e87a <printk>
    deaa:	bf00      	nop
    deac:	0001061b 	.word	0x0001061b
    deb0:	00010641 	.word	0x00010641
    deb4:	0001064e 	.word	0x0001064e

0000deb8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    deb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    deba:	2400      	movs	r4, #0
    debc:	4b08      	ldr	r3, [pc, #32]	; (dee0 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    debe:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
    dec2:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
    dec4:	ab02      	add	r3, sp, #8
    dec6:	9300      	str	r3, [sp, #0]
    dec8:	4906      	ldr	r1, [pc, #24]	; (dee4 <k_sys_work_q_init+0x2c>)
    deca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dece:	4806      	ldr	r0, [pc, #24]	; (dee8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    ded0:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    ded4:	f000 f8f0 	bl	e0b8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    ded8:	4620      	mov	r0, r4
    deda:	b004      	add	sp, #16
    dedc:	bd10      	pop	{r4, pc}
    dede:	bf00      	nop
    dee0:	00010675 	.word	0x00010675
    dee4:	2000ee08 	.word	0x2000ee08
    dee8:	2000c818 	.word	0x2000c818

0000deec <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    deec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    def0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    def2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    def6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	return list->head;
    defa:	4e45      	ldr	r6, [pc, #276]	; (e010 <work_queue_main+0x124>)
{
    defc:	b085      	sub	sp, #20
	__asm__ volatile(
    defe:	f04f 0320 	mov.w	r3, #32
    df02:	f3ef 8711 	mrs	r7, BASEPRI
    df06:	f383 8812 	msr	BASEPRI_MAX, r3
    df0a:	f3bf 8f6f 	isb	sy
    df0e:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
    df12:	b98d      	cbnz	r5, df38 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    df14:	2102      	movs	r1, #2
    df16:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    df1a:	f001 fdb8 	bl	fa8e <flag_test_and_clear>
    df1e:	2800      	cmp	r0, #0
    df20:	d135      	bne.n	df8e <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    df22:	2300      	movs	r3, #0
    df24:	4639      	mov	r1, r7
    df26:	e9cd 8900 	strd	r8, r9, [sp]
    df2a:	9302      	str	r3, [sp, #8]
    df2c:	f104 0290 	add.w	r2, r4, #144	; 0x90
    df30:	4838      	ldr	r0, [pc, #224]	; (e014 <work_queue_main+0x128>)
    df32:	f7ff fe21 	bl	db78 <z_sched_wait>
			continue;
    df36:	e7e2      	b.n	defe <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    df38:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
    df3c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    df3e:	4295      	cmp	r5, r2
	list->head = node;
    df40:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    df44:	d101      	bne.n	df4a <work_queue_main+0x5e>
	list->tail = node;
    df46:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	*flagp |= BIT(bit);
    df4a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    df4e:	f043 0302 	orr.w	r3, r3, #2
    df52:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
    df56:	68eb      	ldr	r3, [r5, #12]
    df58:	f023 0304 	bic.w	r3, r3, #4
    df5c:	f043 0301 	orr.w	r3, r3, #1
    df60:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    df62:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    df64:	f387 8811 	msr	BASEPRI, r7
    df68:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    df6c:	4628      	mov	r0, r5
    df6e:	4798      	blx	r3
	__asm__ volatile(
    df70:	f04f 0320 	mov.w	r3, #32
    df74:	f3ef 8b11 	mrs	fp, BASEPRI
    df78:	f383 8812 	msr	BASEPRI_MAX, r3
    df7c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    df80:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    df82:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    df84:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    df88:	d40b      	bmi.n	dfa2 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    df8a:	60ea      	str	r2, [r5, #12]
    df8c:	e00e      	b.n	dfac <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    df8e:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    df92:	2200      	movs	r2, #0
    df94:	2101      	movs	r1, #1
    df96:	4628      	mov	r0, r5
    df98:	f001 fc7f 	bl	f89a <z_sched_wake>
    df9c:	2800      	cmp	r0, #0
    df9e:	d1f8      	bne.n	df92 <work_queue_main+0xa6>
    dfa0:	e7bf      	b.n	df22 <work_queue_main+0x36>
	return list->head;
    dfa2:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    dfa4:	f023 0303 	bic.w	r3, r3, #3
    dfa8:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    dfaa:	b970      	cbnz	r0, dfca <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    dfac:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    dfb0:	f023 0302 	bic.w	r3, r3, #2
    dfb4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	__asm__ volatile(
    dfb8:	f38b 8811 	msr	BASEPRI, fp
    dfbc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    dfc0:	05d8      	lsls	r0, r3, #23
    dfc2:	d49c      	bmi.n	defe <work_queue_main+0x12>
	z_impl_k_yield();
    dfc4:	f7ff fcd0 	bl	d968 <z_impl_k_yield>
}
    dfc8:	e799      	b.n	defe <work_queue_main+0x12>
	return node->next;
    dfca:	2700      	movs	r7, #0
	parent->next = child;
    dfcc:	463b      	mov	r3, r7
	return node->next;
    dfce:	f8d0 a000 	ldr.w	sl, [r0]
		if (wc->work == work) {
    dfd2:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    dfd4:	4601      	mov	r1, r0
		if (wc->work == work) {
    dfd6:	4295      	cmp	r5, r2
    dfd8:	d10c      	bne.n	dff4 <work_queue_main+0x108>
    dfda:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    dfdc:	b997      	cbnz	r7, e004 <work_queue_main+0x118>
    dfde:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    dfe0:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    dfe2:	4282      	cmp	r2, r0
    dfe4:	d100      	bne.n	dfe8 <work_queue_main+0xfc>
	list->tail = node;
    dfe6:	6071      	str	r1, [r6, #4]
	parent->next = child;
    dfe8:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    dfec:	f7ff fa1e 	bl	d42c <z_impl_k_sem_give>
}
    dff0:	4639      	mov	r1, r7
    dff2:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    dff4:	f1ba 0f00 	cmp.w	sl, #0
    dff8:	d0d8      	beq.n	dfac <work_queue_main+0xc0>
	return node->next;
    dffa:	4650      	mov	r0, sl
    dffc:	460f      	mov	r7, r1
    dffe:	f8da a000 	ldr.w	sl, [sl]
    e002:	e7e6      	b.n	dfd2 <work_queue_main+0xe6>
	return list->tail;
    e004:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    e006:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    e008:	4290      	cmp	r0, r2
	list->tail = node;
    e00a:	bf08      	it	eq
    e00c:	6077      	streq	r7, [r6, #4]
}
    e00e:	e7eb      	b.n	dfe8 <work_queue_main+0xfc>
    e010:	2000ce8c 	.word	0x2000ce8c
    e014:	2000d2c5 	.word	0x2000d2c5

0000e018 <submit_to_queue_locked>:
{
    e018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    e01a:	68c3      	ldr	r3, [r0, #12]
{
    e01c:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    e01e:	079a      	lsls	r2, r3, #30
{
    e020:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    e022:	f3c3 0540 	ubfx	r5, r3, #1, #1
    e026:	d41f      	bmi.n	e068 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    e028:	075f      	lsls	r7, r3, #29
    e02a:	d41f      	bmi.n	e06c <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    e02c:	680a      	ldr	r2, [r1, #0]
    e02e:	b90a      	cbnz	r2, e034 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    e030:	6882      	ldr	r2, [r0, #8]
    e032:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    e034:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    e036:	bf42      	ittt	mi
    e038:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
    e03a:	2502      	movmi	r5, #2
			*queuep = work->queue;
    e03c:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    e03e:	6837      	ldr	r7, [r6, #0]
		ret = 1;
    e040:	bf58      	it	pl
    e042:	2501      	movpl	r5, #1
	if (queue == NULL) {
    e044:	b37f      	cbz	r7, e0a6 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    e046:	4b1b      	ldr	r3, [pc, #108]	; (e0b4 <submit_to_queue_locked+0x9c>)
    e048:	689b      	ldr	r3, [r3, #8]
    e04a:	42bb      	cmp	r3, r7
    e04c:	d111      	bne.n	e072 <submit_to_queue_locked+0x5a>
    e04e:	f001 fb2d 	bl	f6ac <k_is_in_isr>
    e052:	f080 0001 	eor.w	r0, r0, #1
    e056:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    e058:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    e05c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    e05e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    e062:	d523      	bpl.n	e0ac <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    e064:	b13a      	cbz	r2, e076 <submit_to_queue_locked+0x5e>
    e066:	b940      	cbnz	r0, e07a <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    e068:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    e06c:	2300      	movs	r3, #0
    e06e:	6033      	str	r3, [r6, #0]
	return ret;
    e070:	e013      	b.n	e09a <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    e072:	2000      	movs	r0, #0
    e074:	e7f0      	b.n	e058 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    e076:	071b      	lsls	r3, r3, #28
    e078:	d4f6      	bmi.n	e068 <submit_to_queue_locked+0x50>
	parent->next = child;
    e07a:	2300      	movs	r3, #0
    e07c:	6023      	str	r3, [r4, #0]
	return list->tail;
    e07e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
    e082:	b963      	cbnz	r3, e09e <submit_to_queue_locked+0x86>
	list->head = node;
    e084:	e9c7 4422 	strd	r4, r4, [r7, #136]	; 0x88
		(void)notify_queue_locked(queue);
    e088:	4638      	mov	r0, r7
    e08a:	f001 fd0b 	bl	faa4 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    e08e:	68e3      	ldr	r3, [r4, #12]
    e090:	f043 0304 	orr.w	r3, r3, #4
    e094:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    e096:	6833      	ldr	r3, [r6, #0]
    e098:	60a3      	str	r3, [r4, #8]
}
    e09a:	4628      	mov	r0, r5
    e09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    e09e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    e0a0:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
}
    e0a4:	e7f0      	b.n	e088 <submit_to_queue_locked+0x70>
		return -EINVAL;
    e0a6:	f06f 0515 	mvn.w	r5, #21
    e0aa:	e7df      	b.n	e06c <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    e0ac:	f06f 0512 	mvn.w	r5, #18
    e0b0:	e7dc      	b.n	e06c <submit_to_queue_locked+0x54>
    e0b2:	bf00      	nop
    e0b4:	2000ce54 	.word	0x2000ce54

0000e0b8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    e0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0ba:	4604      	mov	r4, r0
	list->head = NULL;
    e0bc:	2000      	movs	r0, #0
    e0be:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
    e0c0:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    e0c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	sys_dlist_init(&w->waitq);
    e0c6:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
    e0ca:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
    e0ce:	f104 0098 	add.w	r0, r4, #152	; 0x98
    e0d2:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    e0d6:	b31d      	cbz	r5, e120 <k_work_queue_start+0x68>
    e0d8:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    e0da:	2800      	cmp	r0, #0
    e0dc:	f240 1001 	movw	r0, #257	; 0x101
    e0e0:	bf08      	it	eq
    e0e2:	2001      	moveq	r0, #1
	*flagp = flags;
    e0e4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e0e8:	2000      	movs	r0, #0
    e0ea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    e0ee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    e0f2:	e9cd 3003 	strd	r3, r0, [sp, #12]
    e0f6:	e9cd 0001 	strd	r0, r0, [sp, #4]
    e0fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
    e0fe:	4620      	mov	r0, r4
    e100:	4b08      	ldr	r3, [pc, #32]	; (e124 <k_work_queue_start+0x6c>)
    e102:	9400      	str	r4, [sp, #0]
    e104:	f7ff f83a 	bl	d17c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    e108:	b125      	cbz	r5, e114 <k_work_queue_start+0x5c>
    e10a:	6829      	ldr	r1, [r5, #0]
    e10c:	b111      	cbz	r1, e114 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    e10e:	4620      	mov	r0, r4
    e110:	f001 fad2 	bl	f6b8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    e114:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    e116:	b009      	add	sp, #36	; 0x24
    e118:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e11c:	f001 bacf 	b.w	f6be <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    e120:	2001      	movs	r0, #1
    e122:	e7df      	b.n	e0e4 <k_work_queue_start+0x2c>
    e124:	0000deed 	.word	0x0000deed

0000e128 <_free_r>:
    e128:	b538      	push	{r3, r4, r5, lr}
    e12a:	4605      	mov	r5, r0
    e12c:	2900      	cmp	r1, #0
    e12e:	d041      	beq.n	e1b4 <_free_r+0x8c>
    e130:	f851 3c04 	ldr.w	r3, [r1, #-4]
    e134:	1f0c      	subs	r4, r1, #4
    e136:	2b00      	cmp	r3, #0
    e138:	bfb8      	it	lt
    e13a:	18e4      	addlt	r4, r4, r3
    e13c:	f000 fa62 	bl	e604 <__malloc_lock>
    e140:	4a1d      	ldr	r2, [pc, #116]	; (e1b8 <_free_r+0x90>)
    e142:	6813      	ldr	r3, [r2, #0]
    e144:	b933      	cbnz	r3, e154 <_free_r+0x2c>
    e146:	6063      	str	r3, [r4, #4]
    e148:	6014      	str	r4, [r2, #0]
    e14a:	4628      	mov	r0, r5
    e14c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e150:	f000 ba5e 	b.w	e610 <__malloc_unlock>
    e154:	42a3      	cmp	r3, r4
    e156:	d908      	bls.n	e16a <_free_r+0x42>
    e158:	6820      	ldr	r0, [r4, #0]
    e15a:	1821      	adds	r1, r4, r0
    e15c:	428b      	cmp	r3, r1
    e15e:	bf01      	itttt	eq
    e160:	6819      	ldreq	r1, [r3, #0]
    e162:	685b      	ldreq	r3, [r3, #4]
    e164:	1809      	addeq	r1, r1, r0
    e166:	6021      	streq	r1, [r4, #0]
    e168:	e7ed      	b.n	e146 <_free_r+0x1e>
    e16a:	461a      	mov	r2, r3
    e16c:	685b      	ldr	r3, [r3, #4]
    e16e:	b10b      	cbz	r3, e174 <_free_r+0x4c>
    e170:	42a3      	cmp	r3, r4
    e172:	d9fa      	bls.n	e16a <_free_r+0x42>
    e174:	6811      	ldr	r1, [r2, #0]
    e176:	1850      	adds	r0, r2, r1
    e178:	42a0      	cmp	r0, r4
    e17a:	d10b      	bne.n	e194 <_free_r+0x6c>
    e17c:	6820      	ldr	r0, [r4, #0]
    e17e:	4401      	add	r1, r0
    e180:	1850      	adds	r0, r2, r1
    e182:	6011      	str	r1, [r2, #0]
    e184:	4283      	cmp	r3, r0
    e186:	d1e0      	bne.n	e14a <_free_r+0x22>
    e188:	6818      	ldr	r0, [r3, #0]
    e18a:	685b      	ldr	r3, [r3, #4]
    e18c:	4401      	add	r1, r0
    e18e:	6053      	str	r3, [r2, #4]
    e190:	6011      	str	r1, [r2, #0]
    e192:	e7da      	b.n	e14a <_free_r+0x22>
    e194:	d902      	bls.n	e19c <_free_r+0x74>
    e196:	230c      	movs	r3, #12
    e198:	602b      	str	r3, [r5, #0]
    e19a:	e7d6      	b.n	e14a <_free_r+0x22>
    e19c:	6820      	ldr	r0, [r4, #0]
    e19e:	1821      	adds	r1, r4, r0
    e1a0:	428b      	cmp	r3, r1
    e1a2:	bf02      	ittt	eq
    e1a4:	6819      	ldreq	r1, [r3, #0]
    e1a6:	685b      	ldreq	r3, [r3, #4]
    e1a8:	1809      	addeq	r1, r1, r0
    e1aa:	6063      	str	r3, [r4, #4]
    e1ac:	bf08      	it	eq
    e1ae:	6021      	streq	r1, [r4, #0]
    e1b0:	6054      	str	r4, [r2, #4]
    e1b2:	e7ca      	b.n	e14a <_free_r+0x22>
    e1b4:	bd38      	pop	{r3, r4, r5, pc}
    e1b6:	bf00      	nop
    e1b8:	2000ce94 	.word	0x2000ce94

0000e1bc <_malloc_r>:
    e1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e1be:	1ccd      	adds	r5, r1, #3
    e1c0:	4606      	mov	r6, r0
    e1c2:	f025 0503 	bic.w	r5, r5, #3
    e1c6:	3508      	adds	r5, #8
    e1c8:	2d0c      	cmp	r5, #12
    e1ca:	bf38      	it	cc
    e1cc:	250c      	movcc	r5, #12
    e1ce:	2d00      	cmp	r5, #0
    e1d0:	db01      	blt.n	e1d6 <_malloc_r+0x1a>
    e1d2:	42a9      	cmp	r1, r5
    e1d4:	d903      	bls.n	e1de <_malloc_r+0x22>
    e1d6:	230c      	movs	r3, #12
    e1d8:	6033      	str	r3, [r6, #0]
    e1da:	2000      	movs	r0, #0
    e1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e1de:	f000 fa11 	bl	e604 <__malloc_lock>
    e1e2:	4921      	ldr	r1, [pc, #132]	; (e268 <_malloc_r+0xac>)
    e1e4:	680a      	ldr	r2, [r1, #0]
    e1e6:	4614      	mov	r4, r2
    e1e8:	b99c      	cbnz	r4, e212 <_malloc_r+0x56>
    e1ea:	4f20      	ldr	r7, [pc, #128]	; (e26c <_malloc_r+0xb0>)
    e1ec:	683b      	ldr	r3, [r7, #0]
    e1ee:	b923      	cbnz	r3, e1fa <_malloc_r+0x3e>
    e1f0:	4621      	mov	r1, r4
    e1f2:	4630      	mov	r0, r6
    e1f4:	f000 f962 	bl	e4bc <_sbrk_r>
    e1f8:	6038      	str	r0, [r7, #0]
    e1fa:	4629      	mov	r1, r5
    e1fc:	4630      	mov	r0, r6
    e1fe:	f000 f95d 	bl	e4bc <_sbrk_r>
    e202:	1c43      	adds	r3, r0, #1
    e204:	d123      	bne.n	e24e <_malloc_r+0x92>
    e206:	230c      	movs	r3, #12
    e208:	4630      	mov	r0, r6
    e20a:	6033      	str	r3, [r6, #0]
    e20c:	f000 fa00 	bl	e610 <__malloc_unlock>
    e210:	e7e3      	b.n	e1da <_malloc_r+0x1e>
    e212:	6823      	ldr	r3, [r4, #0]
    e214:	1b5b      	subs	r3, r3, r5
    e216:	d417      	bmi.n	e248 <_malloc_r+0x8c>
    e218:	2b0b      	cmp	r3, #11
    e21a:	d903      	bls.n	e224 <_malloc_r+0x68>
    e21c:	6023      	str	r3, [r4, #0]
    e21e:	441c      	add	r4, r3
    e220:	6025      	str	r5, [r4, #0]
    e222:	e004      	b.n	e22e <_malloc_r+0x72>
    e224:	6863      	ldr	r3, [r4, #4]
    e226:	42a2      	cmp	r2, r4
    e228:	bf0c      	ite	eq
    e22a:	600b      	streq	r3, [r1, #0]
    e22c:	6053      	strne	r3, [r2, #4]
    e22e:	4630      	mov	r0, r6
    e230:	f000 f9ee 	bl	e610 <__malloc_unlock>
    e234:	f104 000b 	add.w	r0, r4, #11
    e238:	1d23      	adds	r3, r4, #4
    e23a:	f020 0007 	bic.w	r0, r0, #7
    e23e:	1ac2      	subs	r2, r0, r3
    e240:	d0cc      	beq.n	e1dc <_malloc_r+0x20>
    e242:	1a1b      	subs	r3, r3, r0
    e244:	50a3      	str	r3, [r4, r2]
    e246:	e7c9      	b.n	e1dc <_malloc_r+0x20>
    e248:	4622      	mov	r2, r4
    e24a:	6864      	ldr	r4, [r4, #4]
    e24c:	e7cc      	b.n	e1e8 <_malloc_r+0x2c>
    e24e:	1cc4      	adds	r4, r0, #3
    e250:	f024 0403 	bic.w	r4, r4, #3
    e254:	42a0      	cmp	r0, r4
    e256:	d0e3      	beq.n	e220 <_malloc_r+0x64>
    e258:	1a21      	subs	r1, r4, r0
    e25a:	4630      	mov	r0, r6
    e25c:	f000 f92e 	bl	e4bc <_sbrk_r>
    e260:	3001      	adds	r0, #1
    e262:	d1dd      	bne.n	e220 <_malloc_r+0x64>
    e264:	e7cf      	b.n	e206 <_malloc_r+0x4a>
    e266:	bf00      	nop
    e268:	2000ce94 	.word	0x2000ce94
    e26c:	2000ce98 	.word	0x2000ce98

0000e270 <_printf_i>:
    e270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    e274:	7e0f      	ldrb	r7, [r1, #24]
    e276:	4691      	mov	r9, r2
    e278:	4680      	mov	r8, r0
    e27a:	460c      	mov	r4, r1
    e27c:	2f78      	cmp	r7, #120	; 0x78
    e27e:	469a      	mov	sl, r3
    e280:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    e282:	f101 0243 	add.w	r2, r1, #67	; 0x43
    e286:	d807      	bhi.n	e298 <_printf_i+0x28>
    e288:	2f62      	cmp	r7, #98	; 0x62
    e28a:	d80a      	bhi.n	e2a2 <_printf_i+0x32>
    e28c:	2f00      	cmp	r7, #0
    e28e:	f000 80d8 	beq.w	e442 <_printf_i+0x1d2>
    e292:	2f58      	cmp	r7, #88	; 0x58
    e294:	f000 80a3 	beq.w	e3de <_printf_i+0x16e>
    e298:	f104 0542 	add.w	r5, r4, #66	; 0x42
    e29c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    e2a0:	e03a      	b.n	e318 <_printf_i+0xa8>
    e2a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    e2a6:	2b15      	cmp	r3, #21
    e2a8:	d8f6      	bhi.n	e298 <_printf_i+0x28>
    e2aa:	a101      	add	r1, pc, #4	; (adr r1, e2b0 <_printf_i+0x40>)
    e2ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    e2b0:	0000e309 	.word	0x0000e309
    e2b4:	0000e31d 	.word	0x0000e31d
    e2b8:	0000e299 	.word	0x0000e299
    e2bc:	0000e299 	.word	0x0000e299
    e2c0:	0000e299 	.word	0x0000e299
    e2c4:	0000e299 	.word	0x0000e299
    e2c8:	0000e31d 	.word	0x0000e31d
    e2cc:	0000e299 	.word	0x0000e299
    e2d0:	0000e299 	.word	0x0000e299
    e2d4:	0000e299 	.word	0x0000e299
    e2d8:	0000e299 	.word	0x0000e299
    e2dc:	0000e429 	.word	0x0000e429
    e2e0:	0000e34d 	.word	0x0000e34d
    e2e4:	0000e40b 	.word	0x0000e40b
    e2e8:	0000e299 	.word	0x0000e299
    e2ec:	0000e299 	.word	0x0000e299
    e2f0:	0000e44b 	.word	0x0000e44b
    e2f4:	0000e299 	.word	0x0000e299
    e2f8:	0000e34d 	.word	0x0000e34d
    e2fc:	0000e299 	.word	0x0000e299
    e300:	0000e299 	.word	0x0000e299
    e304:	0000e413 	.word	0x0000e413
    e308:	682b      	ldr	r3, [r5, #0]
    e30a:	1d1a      	adds	r2, r3, #4
    e30c:	681b      	ldr	r3, [r3, #0]
    e30e:	602a      	str	r2, [r5, #0]
    e310:	f104 0542 	add.w	r5, r4, #66	; 0x42
    e314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    e318:	2301      	movs	r3, #1
    e31a:	e0a3      	b.n	e464 <_printf_i+0x1f4>
    e31c:	6820      	ldr	r0, [r4, #0]
    e31e:	6829      	ldr	r1, [r5, #0]
    e320:	0606      	lsls	r6, r0, #24
    e322:	f101 0304 	add.w	r3, r1, #4
    e326:	d50a      	bpl.n	e33e <_printf_i+0xce>
    e328:	680e      	ldr	r6, [r1, #0]
    e32a:	602b      	str	r3, [r5, #0]
    e32c:	2e00      	cmp	r6, #0
    e32e:	da03      	bge.n	e338 <_printf_i+0xc8>
    e330:	232d      	movs	r3, #45	; 0x2d
    e332:	4276      	negs	r6, r6
    e334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    e338:	485e      	ldr	r0, [pc, #376]	; (e4b4 <_printf_i+0x244>)
    e33a:	230a      	movs	r3, #10
    e33c:	e019      	b.n	e372 <_printf_i+0x102>
    e33e:	680e      	ldr	r6, [r1, #0]
    e340:	f010 0f40 	tst.w	r0, #64	; 0x40
    e344:	602b      	str	r3, [r5, #0]
    e346:	bf18      	it	ne
    e348:	b236      	sxthne	r6, r6
    e34a:	e7ef      	b.n	e32c <_printf_i+0xbc>
    e34c:	682b      	ldr	r3, [r5, #0]
    e34e:	6820      	ldr	r0, [r4, #0]
    e350:	1d19      	adds	r1, r3, #4
    e352:	6029      	str	r1, [r5, #0]
    e354:	0601      	lsls	r1, r0, #24
    e356:	d501      	bpl.n	e35c <_printf_i+0xec>
    e358:	681e      	ldr	r6, [r3, #0]
    e35a:	e002      	b.n	e362 <_printf_i+0xf2>
    e35c:	0646      	lsls	r6, r0, #25
    e35e:	d5fb      	bpl.n	e358 <_printf_i+0xe8>
    e360:	881e      	ldrh	r6, [r3, #0]
    e362:	2f6f      	cmp	r7, #111	; 0x6f
    e364:	4853      	ldr	r0, [pc, #332]	; (e4b4 <_printf_i+0x244>)
    e366:	bf0c      	ite	eq
    e368:	2308      	moveq	r3, #8
    e36a:	230a      	movne	r3, #10
    e36c:	2100      	movs	r1, #0
    e36e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    e372:	6865      	ldr	r5, [r4, #4]
    e374:	2d00      	cmp	r5, #0
    e376:	60a5      	str	r5, [r4, #8]
    e378:	bfa2      	ittt	ge
    e37a:	6821      	ldrge	r1, [r4, #0]
    e37c:	f021 0104 	bicge.w	r1, r1, #4
    e380:	6021      	strge	r1, [r4, #0]
    e382:	b90e      	cbnz	r6, e388 <_printf_i+0x118>
    e384:	2d00      	cmp	r5, #0
    e386:	d04d      	beq.n	e424 <_printf_i+0x1b4>
    e388:	4615      	mov	r5, r2
    e38a:	fbb6 f1f3 	udiv	r1, r6, r3
    e38e:	fb03 6711 	mls	r7, r3, r1, r6
    e392:	5dc7      	ldrb	r7, [r0, r7]
    e394:	f805 7d01 	strb.w	r7, [r5, #-1]!
    e398:	4637      	mov	r7, r6
    e39a:	460e      	mov	r6, r1
    e39c:	42bb      	cmp	r3, r7
    e39e:	d9f4      	bls.n	e38a <_printf_i+0x11a>
    e3a0:	2b08      	cmp	r3, #8
    e3a2:	d10b      	bne.n	e3bc <_printf_i+0x14c>
    e3a4:	6823      	ldr	r3, [r4, #0]
    e3a6:	07de      	lsls	r6, r3, #31
    e3a8:	d508      	bpl.n	e3bc <_printf_i+0x14c>
    e3aa:	6923      	ldr	r3, [r4, #16]
    e3ac:	6861      	ldr	r1, [r4, #4]
    e3ae:	4299      	cmp	r1, r3
    e3b0:	bfde      	ittt	le
    e3b2:	2330      	movle	r3, #48	; 0x30
    e3b4:	f805 3c01 	strble.w	r3, [r5, #-1]
    e3b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    e3bc:	1b52      	subs	r2, r2, r5
    e3be:	6122      	str	r2, [r4, #16]
    e3c0:	464b      	mov	r3, r9
    e3c2:	aa03      	add	r2, sp, #12
    e3c4:	4621      	mov	r1, r4
    e3c6:	4640      	mov	r0, r8
    e3c8:	f8cd a000 	str.w	sl, [sp]
    e3cc:	f001 fb9f 	bl	fb0e <_printf_common>
    e3d0:	3001      	adds	r0, #1
    e3d2:	d14c      	bne.n	e46e <_printf_i+0x1fe>
    e3d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e3d8:	b004      	add	sp, #16
    e3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e3de:	4835      	ldr	r0, [pc, #212]	; (e4b4 <_printf_i+0x244>)
    e3e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
    e3e4:	6829      	ldr	r1, [r5, #0]
    e3e6:	6823      	ldr	r3, [r4, #0]
    e3e8:	f851 6b04 	ldr.w	r6, [r1], #4
    e3ec:	6029      	str	r1, [r5, #0]
    e3ee:	061d      	lsls	r5, r3, #24
    e3f0:	d514      	bpl.n	e41c <_printf_i+0x1ac>
    e3f2:	07df      	lsls	r7, r3, #31
    e3f4:	bf44      	itt	mi
    e3f6:	f043 0320 	orrmi.w	r3, r3, #32
    e3fa:	6023      	strmi	r3, [r4, #0]
    e3fc:	b91e      	cbnz	r6, e406 <_printf_i+0x196>
    e3fe:	6823      	ldr	r3, [r4, #0]
    e400:	f023 0320 	bic.w	r3, r3, #32
    e404:	6023      	str	r3, [r4, #0]
    e406:	2310      	movs	r3, #16
    e408:	e7b0      	b.n	e36c <_printf_i+0xfc>
    e40a:	6823      	ldr	r3, [r4, #0]
    e40c:	f043 0320 	orr.w	r3, r3, #32
    e410:	6023      	str	r3, [r4, #0]
    e412:	2378      	movs	r3, #120	; 0x78
    e414:	4828      	ldr	r0, [pc, #160]	; (e4b8 <_printf_i+0x248>)
    e416:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    e41a:	e7e3      	b.n	e3e4 <_printf_i+0x174>
    e41c:	0659      	lsls	r1, r3, #25
    e41e:	bf48      	it	mi
    e420:	b2b6      	uxthmi	r6, r6
    e422:	e7e6      	b.n	e3f2 <_printf_i+0x182>
    e424:	4615      	mov	r5, r2
    e426:	e7bb      	b.n	e3a0 <_printf_i+0x130>
    e428:	682b      	ldr	r3, [r5, #0]
    e42a:	6826      	ldr	r6, [r4, #0]
    e42c:	1d18      	adds	r0, r3, #4
    e42e:	6961      	ldr	r1, [r4, #20]
    e430:	6028      	str	r0, [r5, #0]
    e432:	0635      	lsls	r5, r6, #24
    e434:	681b      	ldr	r3, [r3, #0]
    e436:	d501      	bpl.n	e43c <_printf_i+0x1cc>
    e438:	6019      	str	r1, [r3, #0]
    e43a:	e002      	b.n	e442 <_printf_i+0x1d2>
    e43c:	0670      	lsls	r0, r6, #25
    e43e:	d5fb      	bpl.n	e438 <_printf_i+0x1c8>
    e440:	8019      	strh	r1, [r3, #0]
    e442:	2300      	movs	r3, #0
    e444:	4615      	mov	r5, r2
    e446:	6123      	str	r3, [r4, #16]
    e448:	e7ba      	b.n	e3c0 <_printf_i+0x150>
    e44a:	682b      	ldr	r3, [r5, #0]
    e44c:	2100      	movs	r1, #0
    e44e:	1d1a      	adds	r2, r3, #4
    e450:	602a      	str	r2, [r5, #0]
    e452:	681d      	ldr	r5, [r3, #0]
    e454:	6862      	ldr	r2, [r4, #4]
    e456:	4628      	mov	r0, r5
    e458:	f001 fc1e 	bl	fc98 <memchr>
    e45c:	b108      	cbz	r0, e462 <_printf_i+0x1f2>
    e45e:	1b40      	subs	r0, r0, r5
    e460:	6060      	str	r0, [r4, #4]
    e462:	6863      	ldr	r3, [r4, #4]
    e464:	6123      	str	r3, [r4, #16]
    e466:	2300      	movs	r3, #0
    e468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    e46c:	e7a8      	b.n	e3c0 <_printf_i+0x150>
    e46e:	6923      	ldr	r3, [r4, #16]
    e470:	462a      	mov	r2, r5
    e472:	4649      	mov	r1, r9
    e474:	4640      	mov	r0, r8
    e476:	47d0      	blx	sl
    e478:	3001      	adds	r0, #1
    e47a:	d0ab      	beq.n	e3d4 <_printf_i+0x164>
    e47c:	6823      	ldr	r3, [r4, #0]
    e47e:	079b      	lsls	r3, r3, #30
    e480:	d413      	bmi.n	e4aa <_printf_i+0x23a>
    e482:	68e0      	ldr	r0, [r4, #12]
    e484:	9b03      	ldr	r3, [sp, #12]
    e486:	4298      	cmp	r0, r3
    e488:	bfb8      	it	lt
    e48a:	4618      	movlt	r0, r3
    e48c:	e7a4      	b.n	e3d8 <_printf_i+0x168>
    e48e:	2301      	movs	r3, #1
    e490:	4632      	mov	r2, r6
    e492:	4649      	mov	r1, r9
    e494:	4640      	mov	r0, r8
    e496:	47d0      	blx	sl
    e498:	3001      	adds	r0, #1
    e49a:	d09b      	beq.n	e3d4 <_printf_i+0x164>
    e49c:	3501      	adds	r5, #1
    e49e:	68e3      	ldr	r3, [r4, #12]
    e4a0:	9903      	ldr	r1, [sp, #12]
    e4a2:	1a5b      	subs	r3, r3, r1
    e4a4:	42ab      	cmp	r3, r5
    e4a6:	dcf2      	bgt.n	e48e <_printf_i+0x21e>
    e4a8:	e7eb      	b.n	e482 <_printf_i+0x212>
    e4aa:	2500      	movs	r5, #0
    e4ac:	f104 0619 	add.w	r6, r4, #25
    e4b0:	e7f5      	b.n	e49e <_printf_i+0x22e>
    e4b2:	bf00      	nop
    e4b4:	0001077f 	.word	0x0001077f
    e4b8:	00010790 	.word	0x00010790

0000e4bc <_sbrk_r>:
    e4bc:	b538      	push	{r3, r4, r5, lr}
    e4be:	2300      	movs	r3, #0
    e4c0:	4d05      	ldr	r5, [pc, #20]	; (e4d8 <_sbrk_r+0x1c>)
    e4c2:	4604      	mov	r4, r0
    e4c4:	4608      	mov	r0, r1
    e4c6:	602b      	str	r3, [r5, #0]
    e4c8:	f7fb faca 	bl	9a60 <_sbrk>
    e4cc:	1c43      	adds	r3, r0, #1
    e4ce:	d102      	bne.n	e4d6 <_sbrk_r+0x1a>
    e4d0:	682b      	ldr	r3, [r5, #0]
    e4d2:	b103      	cbz	r3, e4d6 <_sbrk_r+0x1a>
    e4d4:	6023      	str	r3, [r4, #0]
    e4d6:	bd38      	pop	{r3, r4, r5, pc}
    e4d8:	2000ce9c 	.word	0x2000ce9c

0000e4dc <_strtol_l.constprop.0>:
    e4dc:	2b01      	cmp	r3, #1
    e4de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e4e2:	4680      	mov	r8, r0
    e4e4:	d001      	beq.n	e4ea <_strtol_l.constprop.0+0xe>
    e4e6:	2b24      	cmp	r3, #36	; 0x24
    e4e8:	d906      	bls.n	e4f8 <_strtol_l.constprop.0+0x1c>
    e4ea:	f000 fcc1 	bl	ee70 <__errno>
    e4ee:	2316      	movs	r3, #22
    e4f0:	6003      	str	r3, [r0, #0]
    e4f2:	2000      	movs	r0, #0
    e4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e4f8:	460d      	mov	r5, r1
    e4fa:	4f35      	ldr	r7, [pc, #212]	; (e5d0 <_strtol_l.constprop.0+0xf4>)
    e4fc:	4628      	mov	r0, r5
    e4fe:	f815 4b01 	ldrb.w	r4, [r5], #1
    e502:	5de6      	ldrb	r6, [r4, r7]
    e504:	f016 0608 	ands.w	r6, r6, #8
    e508:	d1f8      	bne.n	e4fc <_strtol_l.constprop.0+0x20>
    e50a:	2c2d      	cmp	r4, #45	; 0x2d
    e50c:	d12f      	bne.n	e56e <_strtol_l.constprop.0+0x92>
    e50e:	782c      	ldrb	r4, [r5, #0]
    e510:	2601      	movs	r6, #1
    e512:	1c85      	adds	r5, r0, #2
    e514:	2b00      	cmp	r3, #0
    e516:	d057      	beq.n	e5c8 <_strtol_l.constprop.0+0xec>
    e518:	2b10      	cmp	r3, #16
    e51a:	d109      	bne.n	e530 <_strtol_l.constprop.0+0x54>
    e51c:	2c30      	cmp	r4, #48	; 0x30
    e51e:	d107      	bne.n	e530 <_strtol_l.constprop.0+0x54>
    e520:	7828      	ldrb	r0, [r5, #0]
    e522:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    e526:	2858      	cmp	r0, #88	; 0x58
    e528:	d149      	bne.n	e5be <_strtol_l.constprop.0+0xe2>
    e52a:	786c      	ldrb	r4, [r5, #1]
    e52c:	2310      	movs	r3, #16
    e52e:	3502      	adds	r5, #2
    e530:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
    e534:	2700      	movs	r7, #0
    e536:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    e53a:	4638      	mov	r0, r7
    e53c:	fbbe f9f3 	udiv	r9, lr, r3
    e540:	fb03 ea19 	mls	sl, r3, r9, lr
    e544:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
    e548:	f1bc 0f09 	cmp.w	ip, #9
    e54c:	d814      	bhi.n	e578 <_strtol_l.constprop.0+0x9c>
    e54e:	4664      	mov	r4, ip
    e550:	42a3      	cmp	r3, r4
    e552:	dd22      	ble.n	e59a <_strtol_l.constprop.0+0xbe>
    e554:	2f00      	cmp	r7, #0
    e556:	db1d      	blt.n	e594 <_strtol_l.constprop.0+0xb8>
    e558:	4581      	cmp	r9, r0
    e55a:	d31b      	bcc.n	e594 <_strtol_l.constprop.0+0xb8>
    e55c:	d101      	bne.n	e562 <_strtol_l.constprop.0+0x86>
    e55e:	45a2      	cmp	sl, r4
    e560:	db18      	blt.n	e594 <_strtol_l.constprop.0+0xb8>
    e562:	fb00 4003 	mla	r0, r0, r3, r4
    e566:	2701      	movs	r7, #1
    e568:	f815 4b01 	ldrb.w	r4, [r5], #1
    e56c:	e7ea      	b.n	e544 <_strtol_l.constprop.0+0x68>
    e56e:	2c2b      	cmp	r4, #43	; 0x2b
    e570:	bf04      	itt	eq
    e572:	782c      	ldrbeq	r4, [r5, #0]
    e574:	1c85      	addeq	r5, r0, #2
    e576:	e7cd      	b.n	e514 <_strtol_l.constprop.0+0x38>
    e578:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
    e57c:	f1bc 0f19 	cmp.w	ip, #25
    e580:	d801      	bhi.n	e586 <_strtol_l.constprop.0+0xaa>
    e582:	3c37      	subs	r4, #55	; 0x37
    e584:	e7e4      	b.n	e550 <_strtol_l.constprop.0+0x74>
    e586:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
    e58a:	f1bc 0f19 	cmp.w	ip, #25
    e58e:	d804      	bhi.n	e59a <_strtol_l.constprop.0+0xbe>
    e590:	3c57      	subs	r4, #87	; 0x57
    e592:	e7dd      	b.n	e550 <_strtol_l.constprop.0+0x74>
    e594:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    e598:	e7e6      	b.n	e568 <_strtol_l.constprop.0+0x8c>
    e59a:	2f00      	cmp	r7, #0
    e59c:	da07      	bge.n	e5ae <_strtol_l.constprop.0+0xd2>
    e59e:	2322      	movs	r3, #34	; 0x22
    e5a0:	4670      	mov	r0, lr
    e5a2:	f8c8 3000 	str.w	r3, [r8]
    e5a6:	2a00      	cmp	r2, #0
    e5a8:	d0a4      	beq.n	e4f4 <_strtol_l.constprop.0+0x18>
    e5aa:	1e69      	subs	r1, r5, #1
    e5ac:	e005      	b.n	e5ba <_strtol_l.constprop.0+0xde>
    e5ae:	b106      	cbz	r6, e5b2 <_strtol_l.constprop.0+0xd6>
    e5b0:	4240      	negs	r0, r0
    e5b2:	2a00      	cmp	r2, #0
    e5b4:	d09e      	beq.n	e4f4 <_strtol_l.constprop.0+0x18>
    e5b6:	2f00      	cmp	r7, #0
    e5b8:	d1f7      	bne.n	e5aa <_strtol_l.constprop.0+0xce>
    e5ba:	6011      	str	r1, [r2, #0]
    e5bc:	e79a      	b.n	e4f4 <_strtol_l.constprop.0+0x18>
    e5be:	2430      	movs	r4, #48	; 0x30
    e5c0:	2b00      	cmp	r3, #0
    e5c2:	d1b5      	bne.n	e530 <_strtol_l.constprop.0+0x54>
    e5c4:	2308      	movs	r3, #8
    e5c6:	e7b3      	b.n	e530 <_strtol_l.constprop.0+0x54>
    e5c8:	2c30      	cmp	r4, #48	; 0x30
    e5ca:	d0a9      	beq.n	e520 <_strtol_l.constprop.0+0x44>
    e5cc:	230a      	movs	r3, #10
    e5ce:	e7af      	b.n	e530 <_strtol_l.constprop.0+0x54>
    e5d0:	0001067f 	.word	0x0001067f

0000e5d4 <strtol>:
    e5d4:	4613      	mov	r3, r2
    e5d6:	460a      	mov	r2, r1
    e5d8:	4601      	mov	r1, r0
    e5da:	4802      	ldr	r0, [pc, #8]	; (e5e4 <strtol+0x10>)
    e5dc:	6800      	ldr	r0, [r0, #0]
    e5de:	f7ff bf7d 	b.w	e4dc <_strtol_l.constprop.0>
    e5e2:	bf00      	nop
    e5e4:	2000c614 	.word	0x2000c614

0000e5e8 <vsniprintf>:
    e5e8:	b507      	push	{r0, r1, r2, lr}
    e5ea:	9300      	str	r3, [sp, #0]
    e5ec:	4613      	mov	r3, r2
    e5ee:	460a      	mov	r2, r1
    e5f0:	4601      	mov	r1, r0
    e5f2:	4803      	ldr	r0, [pc, #12]	; (e600 <vsniprintf+0x18>)
    e5f4:	6800      	ldr	r0, [r0, #0]
    e5f6:	f001 fb24 	bl	fc42 <_vsniprintf_r>
    e5fa:	b003      	add	sp, #12
    e5fc:	f85d fb04 	ldr.w	pc, [sp], #4
    e600:	2000c614 	.word	0x2000c614

0000e604 <__malloc_lock>:
    e604:	4801      	ldr	r0, [pc, #4]	; (e60c <__malloc_lock+0x8>)
    e606:	f000 bc2b 	b.w	ee60 <__retarget_lock_acquire_recursive>
    e60a:	bf00      	nop
    e60c:	2000c6a0 	.word	0x2000c6a0

0000e610 <__malloc_unlock>:
    e610:	4801      	ldr	r0, [pc, #4]	; (e618 <__malloc_unlock+0x8>)
    e612:	f000 bc2b 	b.w	ee6c <__retarget_lock_release_recursive>
    e616:	bf00      	nop
    e618:	2000c6a0 	.word	0x2000c6a0

0000e61c <_svfiprintf_r>:
    e61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e620:	4698      	mov	r8, r3
    e622:	898b      	ldrh	r3, [r1, #12]
    e624:	b09d      	sub	sp, #116	; 0x74
    e626:	4607      	mov	r7, r0
    e628:	061b      	lsls	r3, r3, #24
    e62a:	460d      	mov	r5, r1
    e62c:	4614      	mov	r4, r2
    e62e:	d50e      	bpl.n	e64e <_svfiprintf_r+0x32>
    e630:	690b      	ldr	r3, [r1, #16]
    e632:	b963      	cbnz	r3, e64e <_svfiprintf_r+0x32>
    e634:	2140      	movs	r1, #64	; 0x40
    e636:	f7ff fdc1 	bl	e1bc <_malloc_r>
    e63a:	6028      	str	r0, [r5, #0]
    e63c:	6128      	str	r0, [r5, #16]
    e63e:	b920      	cbnz	r0, e64a <_svfiprintf_r+0x2e>
    e640:	230c      	movs	r3, #12
    e642:	603b      	str	r3, [r7, #0]
    e644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e648:	e0d1      	b.n	e7ee <_svfiprintf_r+0x1d2>
    e64a:	2340      	movs	r3, #64	; 0x40
    e64c:	616b      	str	r3, [r5, #20]
    e64e:	2300      	movs	r3, #0
    e650:	f8cd 800c 	str.w	r8, [sp, #12]
    e654:	f04f 0901 	mov.w	r9, #1
    e658:	f8df 81ac 	ldr.w	r8, [pc, #428]	; e808 <_svfiprintf_r+0x1ec>
    e65c:	9309      	str	r3, [sp, #36]	; 0x24
    e65e:	2320      	movs	r3, #32
    e660:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    e664:	2330      	movs	r3, #48	; 0x30
    e666:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    e66a:	4623      	mov	r3, r4
    e66c:	469a      	mov	sl, r3
    e66e:	f813 2b01 	ldrb.w	r2, [r3], #1
    e672:	b10a      	cbz	r2, e678 <_svfiprintf_r+0x5c>
    e674:	2a25      	cmp	r2, #37	; 0x25
    e676:	d1f9      	bne.n	e66c <_svfiprintf_r+0x50>
    e678:	ebba 0b04 	subs.w	fp, sl, r4
    e67c:	d00b      	beq.n	e696 <_svfiprintf_r+0x7a>
    e67e:	465b      	mov	r3, fp
    e680:	4622      	mov	r2, r4
    e682:	4629      	mov	r1, r5
    e684:	4638      	mov	r0, r7
    e686:	f001 fb55 	bl	fd34 <__ssputs_r>
    e68a:	3001      	adds	r0, #1
    e68c:	f000 80aa 	beq.w	e7e4 <_svfiprintf_r+0x1c8>
    e690:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e692:	445a      	add	r2, fp
    e694:	9209      	str	r2, [sp, #36]	; 0x24
    e696:	f89a 3000 	ldrb.w	r3, [sl]
    e69a:	2b00      	cmp	r3, #0
    e69c:	f000 80a2 	beq.w	e7e4 <_svfiprintf_r+0x1c8>
    e6a0:	2300      	movs	r3, #0
    e6a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e6a6:	f10a 0a01 	add.w	sl, sl, #1
    e6aa:	9304      	str	r3, [sp, #16]
    e6ac:	9307      	str	r3, [sp, #28]
    e6ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    e6b2:	931a      	str	r3, [sp, #104]	; 0x68
    e6b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
    e6b8:	4654      	mov	r4, sl
    e6ba:	2205      	movs	r2, #5
    e6bc:	4852      	ldr	r0, [pc, #328]	; (e808 <_svfiprintf_r+0x1ec>)
    e6be:	f814 1b01 	ldrb.w	r1, [r4], #1
    e6c2:	f001 fae9 	bl	fc98 <memchr>
    e6c6:	9a04      	ldr	r2, [sp, #16]
    e6c8:	b9d8      	cbnz	r0, e702 <_svfiprintf_r+0xe6>
    e6ca:	06d0      	lsls	r0, r2, #27
    e6cc:	bf44      	itt	mi
    e6ce:	2320      	movmi	r3, #32
    e6d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    e6d4:	0711      	lsls	r1, r2, #28
    e6d6:	bf44      	itt	mi
    e6d8:	232b      	movmi	r3, #43	; 0x2b
    e6da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    e6de:	f89a 3000 	ldrb.w	r3, [sl]
    e6e2:	2b2a      	cmp	r3, #42	; 0x2a
    e6e4:	d015      	beq.n	e712 <_svfiprintf_r+0xf6>
    e6e6:	9a07      	ldr	r2, [sp, #28]
    e6e8:	4654      	mov	r4, sl
    e6ea:	2000      	movs	r0, #0
    e6ec:	f04f 0c0a 	mov.w	ip, #10
    e6f0:	4621      	mov	r1, r4
    e6f2:	f811 3b01 	ldrb.w	r3, [r1], #1
    e6f6:	3b30      	subs	r3, #48	; 0x30
    e6f8:	2b09      	cmp	r3, #9
    e6fa:	d94e      	bls.n	e79a <_svfiprintf_r+0x17e>
    e6fc:	b1b0      	cbz	r0, e72c <_svfiprintf_r+0x110>
    e6fe:	9207      	str	r2, [sp, #28]
    e700:	e014      	b.n	e72c <_svfiprintf_r+0x110>
    e702:	eba0 0308 	sub.w	r3, r0, r8
    e706:	46a2      	mov	sl, r4
    e708:	fa09 f303 	lsl.w	r3, r9, r3
    e70c:	4313      	orrs	r3, r2
    e70e:	9304      	str	r3, [sp, #16]
    e710:	e7d2      	b.n	e6b8 <_svfiprintf_r+0x9c>
    e712:	9b03      	ldr	r3, [sp, #12]
    e714:	1d19      	adds	r1, r3, #4
    e716:	681b      	ldr	r3, [r3, #0]
    e718:	2b00      	cmp	r3, #0
    e71a:	9103      	str	r1, [sp, #12]
    e71c:	bfbb      	ittet	lt
    e71e:	425b      	neglt	r3, r3
    e720:	f042 0202 	orrlt.w	r2, r2, #2
    e724:	9307      	strge	r3, [sp, #28]
    e726:	9307      	strlt	r3, [sp, #28]
    e728:	bfb8      	it	lt
    e72a:	9204      	strlt	r2, [sp, #16]
    e72c:	7823      	ldrb	r3, [r4, #0]
    e72e:	2b2e      	cmp	r3, #46	; 0x2e
    e730:	d10c      	bne.n	e74c <_svfiprintf_r+0x130>
    e732:	7863      	ldrb	r3, [r4, #1]
    e734:	2b2a      	cmp	r3, #42	; 0x2a
    e736:	d135      	bne.n	e7a4 <_svfiprintf_r+0x188>
    e738:	9b03      	ldr	r3, [sp, #12]
    e73a:	3402      	adds	r4, #2
    e73c:	1d1a      	adds	r2, r3, #4
    e73e:	681b      	ldr	r3, [r3, #0]
    e740:	2b00      	cmp	r3, #0
    e742:	9203      	str	r2, [sp, #12]
    e744:	bfb8      	it	lt
    e746:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    e74a:	9305      	str	r3, [sp, #20]
    e74c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; e80c <_svfiprintf_r+0x1f0>
    e750:	2203      	movs	r2, #3
    e752:	7821      	ldrb	r1, [r4, #0]
    e754:	4650      	mov	r0, sl
    e756:	f001 fa9f 	bl	fc98 <memchr>
    e75a:	b140      	cbz	r0, e76e <_svfiprintf_r+0x152>
    e75c:	2340      	movs	r3, #64	; 0x40
    e75e:	eba0 000a 	sub.w	r0, r0, sl
    e762:	3401      	adds	r4, #1
    e764:	fa03 f000 	lsl.w	r0, r3, r0
    e768:	9b04      	ldr	r3, [sp, #16]
    e76a:	4303      	orrs	r3, r0
    e76c:	9304      	str	r3, [sp, #16]
    e76e:	f814 1b01 	ldrb.w	r1, [r4], #1
    e772:	2206      	movs	r2, #6
    e774:	4826      	ldr	r0, [pc, #152]	; (e810 <_svfiprintf_r+0x1f4>)
    e776:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    e77a:	f001 fa8d 	bl	fc98 <memchr>
    e77e:	2800      	cmp	r0, #0
    e780:	d038      	beq.n	e7f4 <_svfiprintf_r+0x1d8>
    e782:	4b24      	ldr	r3, [pc, #144]	; (e814 <_svfiprintf_r+0x1f8>)
    e784:	bb1b      	cbnz	r3, e7ce <_svfiprintf_r+0x1b2>
    e786:	9b03      	ldr	r3, [sp, #12]
    e788:	3307      	adds	r3, #7
    e78a:	f023 0307 	bic.w	r3, r3, #7
    e78e:	3308      	adds	r3, #8
    e790:	9303      	str	r3, [sp, #12]
    e792:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e794:	4433      	add	r3, r6
    e796:	9309      	str	r3, [sp, #36]	; 0x24
    e798:	e767      	b.n	e66a <_svfiprintf_r+0x4e>
    e79a:	fb0c 3202 	mla	r2, ip, r2, r3
    e79e:	460c      	mov	r4, r1
    e7a0:	2001      	movs	r0, #1
    e7a2:	e7a5      	b.n	e6f0 <_svfiprintf_r+0xd4>
    e7a4:	2300      	movs	r3, #0
    e7a6:	3401      	adds	r4, #1
    e7a8:	f04f 0c0a 	mov.w	ip, #10
    e7ac:	4619      	mov	r1, r3
    e7ae:	9305      	str	r3, [sp, #20]
    e7b0:	4620      	mov	r0, r4
    e7b2:	f810 2b01 	ldrb.w	r2, [r0], #1
    e7b6:	3a30      	subs	r2, #48	; 0x30
    e7b8:	2a09      	cmp	r2, #9
    e7ba:	d903      	bls.n	e7c4 <_svfiprintf_r+0x1a8>
    e7bc:	2b00      	cmp	r3, #0
    e7be:	d0c5      	beq.n	e74c <_svfiprintf_r+0x130>
    e7c0:	9105      	str	r1, [sp, #20]
    e7c2:	e7c3      	b.n	e74c <_svfiprintf_r+0x130>
    e7c4:	fb0c 2101 	mla	r1, ip, r1, r2
    e7c8:	4604      	mov	r4, r0
    e7ca:	2301      	movs	r3, #1
    e7cc:	e7f0      	b.n	e7b0 <_svfiprintf_r+0x194>
    e7ce:	ab03      	add	r3, sp, #12
    e7d0:	462a      	mov	r2, r5
    e7d2:	a904      	add	r1, sp, #16
    e7d4:	4638      	mov	r0, r7
    e7d6:	9300      	str	r3, [sp, #0]
    e7d8:	4b0f      	ldr	r3, [pc, #60]	; (e818 <_svfiprintf_r+0x1fc>)
    e7da:	e000      	b.n	e7de <_svfiprintf_r+0x1c2>
    e7dc:	bf00      	nop
    e7de:	1c42      	adds	r2, r0, #1
    e7e0:	4606      	mov	r6, r0
    e7e2:	d1d6      	bne.n	e792 <_svfiprintf_r+0x176>
    e7e4:	89ab      	ldrh	r3, [r5, #12]
    e7e6:	065b      	lsls	r3, r3, #25
    e7e8:	f53f af2c 	bmi.w	e644 <_svfiprintf_r+0x28>
    e7ec:	9809      	ldr	r0, [sp, #36]	; 0x24
    e7ee:	b01d      	add	sp, #116	; 0x74
    e7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7f4:	ab03      	add	r3, sp, #12
    e7f6:	462a      	mov	r2, r5
    e7f8:	a904      	add	r1, sp, #16
    e7fa:	4638      	mov	r0, r7
    e7fc:	9300      	str	r3, [sp, #0]
    e7fe:	4b06      	ldr	r3, [pc, #24]	; (e818 <_svfiprintf_r+0x1fc>)
    e800:	f7ff fd36 	bl	e270 <_printf_i>
    e804:	e7eb      	b.n	e7de <_svfiprintf_r+0x1c2>
    e806:	bf00      	nop
    e808:	000107a1 	.word	0x000107a1
    e80c:	000107a7 	.word	0x000107a7
    e810:	000107ab 	.word	0x000107ab
    e814:	00000000 	.word	0x00000000
    e818:	0000fd35 	.word	0x0000fd35

0000e81c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    e81c:	4603      	mov	r3, r0
    e81e:	b140      	cbz	r0, e832 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    e820:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    e822:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    e826:	2a02      	cmp	r2, #2
    e828:	d006      	beq.n	e838 <sys_notify_validate+0x1c>
    e82a:	2a03      	cmp	r2, #3
    e82c:	d004      	beq.n	e838 <sys_notify_validate+0x1c>
    e82e:	2a01      	cmp	r2, #1
    e830:	d005      	beq.n	e83e <sys_notify_validate+0x22>
		return -EINVAL;
    e832:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
    e836:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    e838:	681a      	ldr	r2, [r3, #0]
    e83a:	2a00      	cmp	r2, #0
    e83c:	d0f9      	beq.n	e832 <sys_notify_validate+0x16>
		notify->result = 0;
    e83e:	2000      	movs	r0, #0
    e840:	6098      	str	r0, [r3, #8]
    e842:	4770      	bx	lr

0000e844 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    e844:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    e846:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
    e848:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    e84c:	2a02      	cmp	r2, #2
{
    e84e:	4603      	mov	r3, r0
	notify->result = res;
    e850:	6081      	str	r1, [r0, #8]
	switch (method) {
    e852:	d00a      	beq.n	e86a <sys_notify_finalize+0x26>
    e854:	2a03      	cmp	r2, #3
    e856:	d10b      	bne.n	e870 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    e858:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
    e85a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    e85c:	2200      	movs	r2, #0
    e85e:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    e860:	b108      	cbz	r0, e866 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
    e862:	f7ff faef 	bl	de44 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    e866:	4620      	mov	r0, r4
    e868:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = NULL;
    e86a:	2400      	movs	r4, #0
		sig = notify->method.signal;
    e86c:	6800      	ldr	r0, [r0, #0]
		break;
    e86e:	e7f5      	b.n	e85c <sys_notify_finalize+0x18>
	switch (method) {
    e870:	2400      	movs	r4, #0
    e872:	4620      	mov	r0, r4
    e874:	e7f2      	b.n	e85c <sys_notify_finalize+0x18>

0000e876 <arch_printk_char_out>:
}
    e876:	2000      	movs	r0, #0
    e878:	4770      	bx	lr

0000e87a <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    e87a:	b40f      	push	{r0, r1, r2, r3}
    e87c:	b507      	push	{r0, r1, r2, lr}
    e87e:	a904      	add	r1, sp, #16
    e880:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    e884:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    e886:	f7f9 fe41 	bl	850c <vprintk>

	va_end(ap);
}
    e88a:	b003      	add	sp, #12
    e88c:	f85d eb04 	ldr.w	lr, [sp], #4
    e890:	b004      	add	sp, #16
    e892:	4770      	bx	lr

0000e894 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e894:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    e896:	f013 0307 	ands.w	r3, r3, #7
    e89a:	d105      	bne.n	e8a8 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    e89c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    e89e:	2b00      	cmp	r3, #0
    e8a0:	bf0c      	ite	eq
    e8a2:	2000      	moveq	r0, #0
    e8a4:	2003      	movne	r0, #3
    e8a6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    e8a8:	2b02      	cmp	r3, #2
    e8aa:	d105      	bne.n	e8b8 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    e8ac:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    e8ae:	2b00      	cmp	r3, #0
    e8b0:	bf14      	ite	ne
    e8b2:	2000      	movne	r0, #0
    e8b4:	2004      	moveq	r0, #4
    e8b6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    e8b8:	2b01      	cmp	r3, #1
    e8ba:	d105      	bne.n	e8c8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    e8bc:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    e8be:	2b00      	cmp	r3, #0
    e8c0:	bf0c      	ite	eq
    e8c2:	2000      	moveq	r0, #0
    e8c4:	2005      	movne	r0, #5
    e8c6:	4770      	bx	lr
	int evt = EVT_NOP;
    e8c8:	2000      	movs	r0, #0
}
    e8ca:	4770      	bx	lr

0000e8cc <notify_one>:
{
    e8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8d0:	460d      	mov	r5, r1
    e8d2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    e8d4:	4619      	mov	r1, r3
    e8d6:	1d28      	adds	r0, r5, #4
{
    e8d8:	4690      	mov	r8, r2
    e8da:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    e8dc:	f7ff ffb2 	bl	e844 <sys_notify_finalize>
	if (cb) {
    e8e0:	4604      	mov	r4, r0
    e8e2:	b138      	cbz	r0, e8f4 <notify_one+0x28>
		cb(mgr, cli, state, res);
    e8e4:	4633      	mov	r3, r6
    e8e6:	4642      	mov	r2, r8
    e8e8:	4629      	mov	r1, r5
    e8ea:	4638      	mov	r0, r7
    e8ec:	46a4      	mov	ip, r4
}
    e8ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    e8f2:	4760      	bx	ip
}
    e8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e8f8 <transition_complete>:
{
    e8f8:	b410      	push	{r4}
	__asm__ volatile(
    e8fa:	f04f 0420 	mov.w	r4, #32
    e8fe:	f3ef 8211 	mrs	r2, BASEPRI
    e902:	f384 8812 	msr	BASEPRI_MAX, r4
    e906:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    e90a:	6141      	str	r1, [r0, #20]
}
    e90c:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    e90e:	2101      	movs	r1, #1
    e910:	f7f9 be0a 	b.w	8528 <process_event>

0000e914 <validate_args>:
{
    e914:	b510      	push	{r4, lr}
    e916:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    e918:	b140      	cbz	r0, e92c <validate_args+0x18>
    e91a:	b139      	cbz	r1, e92c <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    e91c:	1d08      	adds	r0, r1, #4
    e91e:	f7ff ff7d 	bl	e81c <sys_notify_validate>
	if ((rv == 0)
    e922:	b928      	cbnz	r0, e930 <validate_args+0x1c>
	    && ((cli->notify.flags
    e924:	68a3      	ldr	r3, [r4, #8]
    e926:	f033 0303 	bics.w	r3, r3, #3
    e92a:	d001      	beq.n	e930 <validate_args+0x1c>
		rv = -EINVAL;
    e92c:	f06f 0015 	mvn.w	r0, #21
}
    e930:	bd10      	pop	{r4, pc}

0000e932 <onoff_manager_init>:
{
    e932:	b538      	push	{r3, r4, r5, lr}
    e934:	460c      	mov	r4, r1
	if ((mgr == NULL)
    e936:	4605      	mov	r5, r0
    e938:	b158      	cbz	r0, e952 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    e93a:	b151      	cbz	r1, e952 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    e93c:	680b      	ldr	r3, [r1, #0]
    e93e:	b143      	cbz	r3, e952 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    e940:	684b      	ldr	r3, [r1, #4]
    e942:	b133      	cbz	r3, e952 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    e944:	221c      	movs	r2, #28
    e946:	2100      	movs	r1, #0
    e948:	f001 f8d9 	bl	fafe <memset>
	return 0;
    e94c:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    e94e:	612c      	str	r4, [r5, #16]
}
    e950:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    e952:	f06f 0015 	mvn.w	r0, #21
    e956:	e7fb      	b.n	e950 <onoff_manager_init+0x1e>

0000e958 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    e958:	b570      	push	{r4, r5, r6, lr}
    e95a:	4604      	mov	r4, r0
    e95c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    e95e:	f7ff ffd9 	bl	e914 <validate_args>

	if (rv < 0) {
    e962:	1e05      	subs	r5, r0, #0
    e964:	db31      	blt.n	e9ca <onoff_request+0x72>
    e966:	f04f 0320 	mov.w	r3, #32
    e96a:	f3ef 8111 	mrs	r1, BASEPRI
    e96e:	f383 8812 	msr	BASEPRI_MAX, r3
    e972:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    e976:	f64f 75ff 	movw	r5, #65535	; 0xffff
    e97a:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e97c:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    e97e:	42ab      	cmp	r3, r5
    e980:	f000 0207 	and.w	r2, r0, #7
    e984:	d02e      	beq.n	e9e4 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    e986:	2a02      	cmp	r2, #2
    e988:	d10e      	bne.n	e9a8 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    e98a:	3301      	adds	r3, #1
    e98c:	8363      	strh	r3, [r4, #26]
	rv = state;
    e98e:	4615      	mov	r5, r2
		notify = true;
    e990:	2301      	movs	r3, #1
	__asm__ volatile(
    e992:	f381 8811 	msr	BASEPRI, r1
    e996:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    e99a:	b1b3      	cbz	r3, e9ca <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    e99c:	2300      	movs	r3, #0
    e99e:	4631      	mov	r1, r6
    e9a0:	4620      	mov	r0, r4
    e9a2:	f7ff ff93 	bl	e8cc <notify_one>
    e9a6:	e010      	b.n	e9ca <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    e9a8:	0783      	lsls	r3, r0, #30
    e9aa:	d001      	beq.n	e9b0 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    e9ac:	2a06      	cmp	r2, #6
    e9ae:	d10e      	bne.n	e9ce <onoff_request+0x76>
	parent->next = child;
    e9b0:	2300      	movs	r3, #0
    e9b2:	6033      	str	r3, [r6, #0]
	return list->tail;
    e9b4:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    e9b6:	b993      	cbnz	r3, e9de <onoff_request+0x86>
	list->head = node;
    e9b8:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    e9bc:	4615      	mov	r5, r2
    e9be:	b962      	cbnz	r2, e9da <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    e9c0:	460a      	mov	r2, r1
    e9c2:	4620      	mov	r0, r4
    e9c4:	2102      	movs	r1, #2
    e9c6:	f7f9 fdaf 	bl	8528 <process_event>
		}
	}

	return rv;
}
    e9ca:	4628      	mov	r0, r5
    e9cc:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    e9ce:	2a05      	cmp	r2, #5
    e9d0:	bf0c      	ite	eq
    e9d2:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    e9d6:	f06f 0504 	mvnne.w	r5, #4
    e9da:	2300      	movs	r3, #0
    e9dc:	e7d9      	b.n	e992 <onoff_request+0x3a>
	parent->next = child;
    e9de:	601e      	str	r6, [r3, #0]
	list->tail = node;
    e9e0:	6066      	str	r6, [r4, #4]
}
    e9e2:	e7eb      	b.n	e9bc <onoff_request+0x64>
		rv = -EAGAIN;
    e9e4:	f06f 050a 	mvn.w	r5, #10
    e9e8:	e7f7      	b.n	e9da <onoff_request+0x82>

0000e9ea <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    e9ea:	4604      	mov	r4, r0
    e9ec:	b508      	push	{r3, lr}
    e9ee:	4608      	mov	r0, r1
    e9f0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    e9f2:	461a      	mov	r2, r3
    e9f4:	47a0      	blx	r4
	return z_impl_z_current_get();
    e9f6:	f7ff f859 	bl	daac <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    e9fa:	f7fa fe8f 	bl	971c <z_impl_k_thread_abort>

0000e9fe <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    e9fe:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    ea02:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    ea04:	0840      	lsrs	r0, r0, #1
    ea06:	4770      	bx	lr

0000ea08 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    ea08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea0a:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    ea0c:	f7ff fff7 	bl	e9fe <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    ea10:	fab0 f080 	clz	r0, r0
    ea14:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    ea18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
    ea1c:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
    ea20:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
    ea22:	1d17      	adds	r7, r2, #4
{
    ea24:	460c      	mov	r4, r1
    ea26:	3206      	adds	r2, #6
    ea28:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    ea2a:	b956      	cbnz	r6, ea42 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    ea2c:	2101      	movs	r1, #1
    ea2e:	fa01 f000 	lsl.w	r0, r1, r0
    ea32:	68d9      	ldr	r1, [r3, #12]
    ea34:	4301      	orrs	r1, r0
    ea36:	60d9      	str	r1, [r3, #12]
		b->next = c;
    ea38:	f8cc 4010 	str.w	r4, [ip, #16]
    ea3c:	53dd      	strh	r5, [r3, r7]
    ea3e:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    ea40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    ea42:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    ea44:	3104      	adds	r1, #4
    ea46:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    ea48:	53d8      	strh	r0, [r3, r7]
    ea4a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    ea4e:	529e      	strh	r6, [r3, r2]
    ea50:	80c5      	strh	r5, [r0, #6]
    ea52:	525d      	strh	r5, [r3, r1]
    ea54:	e7f4      	b.n	ea40 <free_list_add+0x38>

0000ea56 <free_list_remove_bidx>:
{
    ea56:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    ea58:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    ea5c:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    ea5e:	4299      	cmp	r1, r3
    ea60:	f102 0104 	add.w	r1, r2, #4
    ea64:	d10a      	bne.n	ea7c <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    ea66:	2301      	movs	r3, #1
    ea68:	fa03 f202 	lsl.w	r2, r3, r2
    ea6c:	68c3      	ldr	r3, [r0, #12]
    ea6e:	ea23 0302 	bic.w	r3, r3, r2
    ea72:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    ea74:	2300      	movs	r3, #0
    ea76:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    ea7a:	bd10      	pop	{r4, pc}
    ea7c:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    ea7e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    ea82:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    ea86:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    ea8a:	80cb      	strh	r3, [r1, #6]
    ea8c:	8082      	strh	r2, [r0, #4]
}
    ea8e:	e7f4      	b.n	ea7a <free_list_remove_bidx+0x24>

0000ea90 <free_list_remove>:
{
    ea90:	b508      	push	{r3, lr}
    ea92:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    ea94:	f7ff ffb3 	bl	e9fe <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    ea98:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    ea9c:	4618      	mov	r0, r3
}
    ea9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    eaa2:	f1c2 021f 	rsb	r2, r2, #31
    eaa6:	f7ff bfd6 	b.w	ea56 <free_list_remove_bidx>

0000eaaa <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    eaaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eaae:	fab1 f581 	clz	r5, r1
    eab2:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    eab6:	eb00 0789 	add.w	r7, r0, r9, lsl #2
    eaba:	693a      	ldr	r2, [r7, #16]
{
    eabc:	4603      	mov	r3, r0
    eabe:	460e      	mov	r6, r1
	if (b->next) {
    eac0:	b1c2      	cbz	r2, eaf4 <alloc_chunk+0x4a>
    eac2:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    eac6:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
    eac8:	4618      	mov	r0, r3
    eaca:	4621      	mov	r1, r4
    eacc:	f7ff ff97 	bl	e9fe <chunk_size>
    ead0:	42b0      	cmp	r0, r6
    ead2:	d306      	bcc.n	eae2 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
    ead4:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    ead6:	4618      	mov	r0, r3
    ead8:	f7ff ffbd 	bl	ea56 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    eadc:	4620      	mov	r0, r4
    eade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    eae2:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
    eae6:	88c0      	ldrh	r0, [r0, #6]
		} while (--i && b->next != first);
    eae8:	f1b8 0801 	subs.w	r8, r8, #1
			b->next = next_free_chunk(h, c);
    eaec:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
    eaee:	d001      	beq.n	eaf4 <alloc_chunk+0x4a>
    eaf0:	4282      	cmp	r2, r0
    eaf2:	d1e8      	bne.n	eac6 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    eaf4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    eaf8:	f1c5 0220 	rsb	r2, r5, #32
    eafc:	4094      	lsls	r4, r2
    eafe:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    eb00:	4014      	ands	r4, r2
    eb02:	d0eb      	beq.n	eadc <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
    eb04:	fa94 f2a4 	rbit	r2, r4
    eb08:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    eb0c:	1d11      	adds	r1, r2, #4
    eb0e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    eb12:	4621      	mov	r1, r4
    eb14:	e7df      	b.n	ead6 <alloc_chunk+0x2c>

0000eb16 <merge_chunks>:
{
    eb16:	b538      	push	{r3, r4, r5, lr}
    eb18:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    eb1a:	f7ff ff70 	bl	e9fe <chunk_size>
{
    eb1e:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    eb20:	4604      	mov	r4, r0
    eb22:	4611      	mov	r1, r2
    eb24:	4618      	mov	r0, r3
    eb26:	f7ff ff6a 	bl	e9fe <chunk_size>
    eb2a:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    eb2c:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    eb2e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    eb32:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    eb34:	4618      	mov	r0, r3
    eb36:	f7ff ff62 	bl	e9fe <chunk_size>
	void *cmem = &buf[c];
    eb3a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    eb3c:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    eb40:	bd38      	pop	{r3, r4, r5, pc}

0000eb42 <split_chunks>:
{
    eb42:	b538      	push	{r3, r4, r5, lr}
    eb44:	460c      	mov	r4, r1
    eb46:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    eb48:	f7ff ff59 	bl	e9fe <chunk_size>
	chunksz_t rsz = sz0 - lsz;
    eb4c:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    eb4e:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
    eb50:	4405      	add	r5, r0
    eb52:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    eb56:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    eb58:	8060      	strh	r0, [r4, #2]
    eb5a:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    eb5e:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    eb60:	8044      	strh	r4, [r0, #2]
    eb62:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    eb66:	4618      	mov	r0, r3
    eb68:	4611      	mov	r1, r2
    eb6a:	f7ff ff48 	bl	e9fe <chunk_size>
	void *cmem = &buf[c];
    eb6e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    eb70:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    eb74:	bd38      	pop	{r3, r4, r5, pc}

0000eb76 <free_chunk>:
{
    eb76:	b538      	push	{r3, r4, r5, lr}
    eb78:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    eb7a:	f7ff ff40 	bl	e9fe <chunk_size>
    eb7e:	460c      	mov	r4, r1
    eb80:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    eb82:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    eb86:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    eb88:	07da      	lsls	r2, r3, #31
    eb8a:	d40a      	bmi.n	eba2 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    eb8c:	4628      	mov	r0, r5
    eb8e:	f7ff ff7f 	bl	ea90 <free_list_remove>
	return c + chunk_size(h, c);
    eb92:	4621      	mov	r1, r4
    eb94:	4628      	mov	r0, r5
    eb96:	f7ff ff32 	bl	e9fe <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    eb9a:	1822      	adds	r2, r4, r0
    eb9c:	4628      	mov	r0, r5
    eb9e:	f7ff ffba 	bl	eb16 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    eba2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    eba6:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    eba8:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    ebac:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    ebae:	07db      	lsls	r3, r3, #31
    ebb0:	d40c      	bmi.n	ebcc <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    ebb2:	4628      	mov	r0, r5
    ebb4:	f7ff ff6c 	bl	ea90 <free_list_remove>
		return ((uint16_t *)cmem)[f];
    ebb8:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    ebbc:	4622      	mov	r2, r4
    ebbe:	1a61      	subs	r1, r4, r1
    ebc0:	4628      	mov	r0, r5
    ebc2:	f7ff ffa8 	bl	eb16 <merge_chunks>
    ebc6:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    ebca:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    ebcc:	4621      	mov	r1, r4
    ebce:	4628      	mov	r0, r5
}
    ebd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    ebd4:	f7ff bf18 	b.w	ea08 <free_list_add>

0000ebd8 <sys_heap_free>:
	if (mem == NULL) {
    ebd8:	b161      	cbz	r1, ebf4 <sys_heap_free+0x1c>
    ebda:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ebdc:	3904      	subs	r1, #4
    ebde:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    ebe0:	f021 0307 	bic.w	r3, r1, #7
    ebe4:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    ebe6:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
    ebe8:	08c9      	lsrs	r1, r1, #3
    ebea:	f022 0201 	bic.w	r2, r2, #1
    ebee:	805a      	strh	r2, [r3, #2]
    ebf0:	f7ff bfc1 	b.w	eb76 <free_chunk>
}
    ebf4:	4770      	bx	lr

0000ebf6 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    ebf6:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    ebf8:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    ebfa:	b909      	cbnz	r1, ec00 <sys_heap_alloc+0xa>
		return NULL;
    ebfc:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    ebfe:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    ec00:	68ab      	ldr	r3, [r5, #8]
    ec02:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    ec06:	d9f9      	bls.n	ebfc <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ec08:	310b      	adds	r1, #11
    ec0a:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    ec0c:	4621      	mov	r1, r4
    ec0e:	4628      	mov	r0, r5
    ec10:	f7ff ff4b 	bl	eaaa <alloc_chunk>
	if (c == 0U) {
    ec14:	4606      	mov	r6, r0
    ec16:	2800      	cmp	r0, #0
    ec18:	d0f0      	beq.n	ebfc <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    ec1a:	4601      	mov	r1, r0
    ec1c:	4628      	mov	r0, r5
    ec1e:	f7ff feee 	bl	e9fe <chunk_size>
    ec22:	42a0      	cmp	r0, r4
    ec24:	d907      	bls.n	ec36 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    ec26:	4628      	mov	r0, r5
    ec28:	1932      	adds	r2, r6, r4
    ec2a:	f7ff ff8a 	bl	eb42 <split_chunks>
		free_list_add(h, c + chunk_sz);
    ec2e:	4611      	mov	r1, r2
    ec30:	4628      	mov	r0, r5
    ec32:	f7ff fee9 	bl	ea08 <free_list_add>
	void *cmem = &buf[c];
    ec36:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    ec3a:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ec3c:	8853      	ldrh	r3, [r2, #2]
    ec3e:	3004      	adds	r0, #4
    ec40:	f043 0301 	orr.w	r3, r3, #1
    ec44:	8053      	strh	r3, [r2, #2]
	return mem;
    ec46:	e7da      	b.n	ebfe <sys_heap_alloc+0x8>

0000ec48 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    ec48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ec4c:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    ec4e:	424a      	negs	r2, r1
    ec50:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
    ec54:	ea31 0202 	bics.w	r2, r1, r2
{
    ec58:	4603      	mov	r3, r0
	if (align != rew) {
    ec5a:	d00a      	beq.n	ec72 <sys_heap_aligned_alloc+0x2a>
		return false;
    ec5c:	2f04      	cmp	r7, #4
    ec5e:	463a      	mov	r2, r7
    ec60:	bf28      	it	cs
    ec62:	2204      	movcs	r2, #4
    ec64:	46b9      	mov	r9, r7
		align -= rew;
    ec66:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    ec68:	b974      	cbnz	r4, ec88 <sys_heap_aligned_alloc+0x40>
		return NULL;
    ec6a:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    ec6c:	4628      	mov	r0, r5
    ec6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    ec72:	2904      	cmp	r1, #4
    ec74:	d804      	bhi.n	ec80 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
    ec76:	4621      	mov	r1, r4
}
    ec78:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    ec7c:	f7ff bfbb 	b.w	ebf6 <sys_heap_alloc>
		rew = 0;
    ec80:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
    ec84:	2204      	movs	r2, #4
    ec86:	e7ef      	b.n	ec68 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
    ec88:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
    ec8a:	68b3      	ldr	r3, [r6, #8]
    ec8c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    ec90:	d9eb      	bls.n	ec6a <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ec92:	f104 010b 	add.w	r1, r4, #11
    ec96:	4439      	add	r1, r7
    ec98:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    ec9a:	4630      	mov	r0, r6
    ec9c:	08c9      	lsrs	r1, r1, #3
    ec9e:	f7ff ff04 	bl	eaaa <alloc_chunk>
	if (c0 == 0) {
    eca2:	4680      	mov	r8, r0
    eca4:	2800      	cmp	r0, #0
    eca6:	d0e0      	beq.n	ec6a <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    eca8:	f109 0504 	add.w	r5, r9, #4
    ecac:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    ecb0:	1e7b      	subs	r3, r7, #1
    ecb2:	4435      	add	r5, r6
    ecb4:	441d      	add	r5, r3
    ecb6:	427f      	negs	r7, r7
    ecb8:	403d      	ands	r5, r7
    ecba:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ecbe:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ecc0:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ecc2:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ecc4:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ecc6:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    ecca:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    eccc:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ecd0:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    ecd4:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    ecd8:	d208      	bcs.n	ecec <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
    ecda:	4601      	mov	r1, r0
    ecdc:	463a      	mov	r2, r7
    ecde:	4630      	mov	r0, r6
    ece0:	f7ff ff2f 	bl	eb42 <split_chunks>
		free_list_add(h, c0);
    ece4:	4641      	mov	r1, r8
    ece6:	4630      	mov	r0, r6
    ece8:	f7ff fe8e 	bl	ea08 <free_list_add>
	return c + chunk_size(h, c);
    ecec:	4639      	mov	r1, r7
    ecee:	4630      	mov	r0, r6
    ecf0:	f7ff fe85 	bl	e9fe <chunk_size>
    ecf4:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    ecf6:	4284      	cmp	r4, r0
    ecf8:	d207      	bcs.n	ed0a <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
    ecfa:	4630      	mov	r0, r6
    ecfc:	4622      	mov	r2, r4
    ecfe:	f7ff ff20 	bl	eb42 <split_chunks>
		free_list_add(h, c_end);
    ed02:	4621      	mov	r1, r4
    ed04:	4630      	mov	r0, r6
    ed06:	f7ff fe7f 	bl	ea08 <free_list_add>
	void *cmem = &buf[c];
    ed0a:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ed0e:	8873      	ldrh	r3, [r6, #2]
    ed10:	f043 0301 	orr.w	r3, r3, #1
    ed14:	8073      	strh	r3, [r6, #2]
    ed16:	e7a9      	b.n	ec6c <sys_heap_aligned_alloc+0x24>

0000ed18 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    ed18:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    ed1a:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    ed1c:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    ed1e:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    ed22:	f021 0107 	bic.w	r1, r1, #7
{
    ed26:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    ed28:	1acd      	subs	r5, r1, r3
    ed2a:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    ed2c:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
    ed2e:	fab2 f082 	clz	r0, r2
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    ed32:	2600      	movs	r6, #0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    ed34:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
    ed38:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ed3a:	3407      	adds	r4, #7
    ed3c:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    ed3e:	f1c0 0020 	rsb	r0, r0, #32
    ed42:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
    ed46:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
    ed48:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    ed4a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    ed4e:	4284      	cmp	r4, r0
    ed50:	d118      	bne.n	ed84 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ed52:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ed54:	f040 0001 	orr.w	r0, r0, #1
    ed58:	8058      	strh	r0, [r3, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    ed5a:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ed5c:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
    ed5e:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
    ed62:	801e      	strh	r6, [r3, #0]
    ed64:	8067      	strh	r7, [r4, #2]
    ed66:	195c      	adds	r4, r3, r5
    ed68:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
    ed6c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
    ed70:	8066      	strh	r6, [r4, #2]
    ed72:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ed74:	8850      	ldrh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    ed76:	bcf0      	pop	{r4, r5, r6, r7}
    ed78:	f040 0001 	orr.w	r0, r0, #1
    ed7c:	8050      	strh	r0, [r2, #2]
	free_list_add(h, chunk0_size);
    ed7e:	4618      	mov	r0, r3
    ed80:	f7ff be42 	b.w	ea08 <free_list_add>
		h->buckets[i].next = 0;
    ed84:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
    ed88:	e7e1      	b.n	ed4e <sys_heap_init+0x36>

0000ed8a <outs>:
{
    ed8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed8e:	4607      	mov	r7, r0
    ed90:	4688      	mov	r8, r1
    ed92:	4615      	mov	r5, r2
    ed94:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    ed96:	4614      	mov	r4, r2
    ed98:	42b4      	cmp	r4, r6
    ed9a:	eba4 0005 	sub.w	r0, r4, r5
    ed9e:	d302      	bcc.n	eda6 <outs+0x1c>
    eda0:	b93e      	cbnz	r6, edb2 <outs+0x28>
    eda2:	7823      	ldrb	r3, [r4, #0]
    eda4:	b12b      	cbz	r3, edb2 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    eda6:	4641      	mov	r1, r8
    eda8:	f814 0b01 	ldrb.w	r0, [r4], #1
    edac:	47b8      	blx	r7
		if (rc < 0) {
    edae:	2800      	cmp	r0, #0
    edb0:	daf2      	bge.n	ed98 <outs+0xe>
}
    edb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000edb6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    edb6:	4770      	bx	lr

0000edb8 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    edb8:	2806      	cmp	r0, #6
    edba:	d108      	bne.n	edce <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    edbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    edc0:	2201      	movs	r2, #1
    edc2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    edc6:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    edca:	bf20      	wfe
    while (true)
    edcc:	e7fd      	b.n	edca <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    edce:	4770      	bx	lr

0000edd0 <pm_state_exit_post_ops>:
    edd0:	2300      	movs	r3, #0
    edd2:	f383 8811 	msr	BASEPRI, r3
    edd6:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    edda:	4770      	bx	lr

0000eddc <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    eddc:	f000 bbd7 	b.w	f58e <z_fatal_error>

0000ede0 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    ede0:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    ede2:	6800      	ldr	r0, [r0, #0]
    ede4:	f000 bbd3 	b.w	f58e <z_fatal_error>

0000ede8 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    ede8:	2100      	movs	r1, #0
    edea:	2001      	movs	r0, #1
    edec:	f7ff bff6 	b.w	eddc <z_arm_fatal_error>

0000edf0 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    edf0:	b508      	push	{r3, lr}
	handler();
    edf2:	f7fa fa37 	bl	9264 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    edf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    edfa:	f7fa bb01 	b.w	9400 <z_arm_exc_exit>

0000edfe <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    edfe:	6e83      	ldr	r3, [r0, #104]	; 0x68
    ee00:	f383 880b 	msr	PSPLIM, r3
}
    ee04:	4770      	bx	lr

0000ee06 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
    ee06:	4770      	bx	lr

0000ee08 <z_arm_restore_fp_context>:
    ee08:	4770      	bx	lr

0000ee0a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    ee0a:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    ee0e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    ee12:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    ee14:	bf08      	it	eq
    ee16:	f06f 0015 	mvneq.w	r0, #21
    ee1a:	4770      	bx	lr

0000ee1c <mpu_configure_region>:
{
    ee1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    ee1e:	890a      	ldrh	r2, [r1, #8]
    ee20:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
    ee22:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    ee24:	684d      	ldr	r5, [r1, #4]
    ee26:	f002 021f 	and.w	r2, r2, #31
    ee2a:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    ee2e:	9300      	str	r3, [sp, #0]
    ee30:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    ee34:	f023 031f 	bic.w	r3, r3, #31
    ee38:	1e6a      	subs	r2, r5, #1
    ee3a:	4413      	add	r3, r2
    ee3c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    ee40:	280f      	cmp	r0, #15
    ee42:	9303      	str	r3, [sp, #12]
    ee44:	d804      	bhi.n	ee50 <mpu_configure_region+0x34>
	region_init(index, region_conf);
    ee46:	4669      	mov	r1, sp
    ee48:	f7fa fc9a 	bl	9780 <region_init>
}
    ee4c:	b004      	add	sp, #16
    ee4e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    ee50:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    ee54:	e7fa      	b.n	ee4c <mpu_configure_region+0x30>

0000ee56 <malloc_prepare>:
}
    ee56:	2000      	movs	r0, #0
    ee58:	4770      	bx	lr

0000ee5a <_stdout_hook_default>:
}
    ee5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ee5e:	4770      	bx	lr

0000ee60 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
    ee60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ee64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ee68:	f7fe ba2c 	b.w	d2c4 <z_impl_k_mutex_lock>

0000ee6c <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
    ee6c:	f7fe baa2 	b.w	d3b4 <z_impl_k_mutex_unlock>

0000ee70 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    ee70:	f7fe b876 	b.w	cf60 <z_impl_z_errno>

0000ee74 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    ee74:	220c      	movs	r2, #12
    ee76:	6903      	ldr	r3, [r0, #16]
    ee78:	b2c9      	uxtb	r1, r1
    ee7a:	fb01 3302 	mla	r3, r1, r2, r3
    ee7e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    ee80:	f000 0007 	and.w	r0, r0, #7
    ee84:	4770      	bx	lr

0000ee86 <set_on_state>:
	__asm__ volatile(
    ee86:	f04f 0320 	mov.w	r3, #32
    ee8a:	f3ef 8211 	mrs	r2, BASEPRI
    ee8e:	f383 8812 	msr	BASEPRI_MAX, r3
    ee92:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    ee96:	6803      	ldr	r3, [r0, #0]
    ee98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ee9c:	f043 0302 	orr.w	r3, r3, #2
    eea0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    eea2:	f382 8811 	msr	BASEPRI, r2
    eea6:	f3bf 8f6f 	isb	sy
}
    eeaa:	4770      	bx	lr

0000eeac <stop>:
{
    eeac:	4603      	mov	r3, r0
    eeae:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    eeb0:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    eeb2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    eeb4:	f04f 0420 	mov.w	r4, #32
    eeb8:	f3ef 8611 	mrs	r6, BASEPRI
    eebc:	f384 8812 	msr	BASEPRI_MAX, r4
    eec0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    eec4:	250c      	movs	r5, #12
    eec6:	fb05 0401 	mla	r4, r5, r1, r0
    eeca:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    eecc:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    eed0:	d001      	beq.n	eed6 <stop+0x2a>
    eed2:	42a2      	cmp	r2, r4
    eed4:	d110      	bne.n	eef8 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    eed6:	2201      	movs	r2, #1
    eed8:	fb05 0001 	mla	r0, r5, r1, r0
    eedc:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    eede:	2000      	movs	r0, #0
	__asm__ volatile(
    eee0:	f386 8811 	msr	BASEPRI, r6
    eee4:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    eee8:	b928      	cbnz	r0, eef6 <stop+0x4a>
	get_sub_config(dev, type)->stop();
    eeea:	685b      	ldr	r3, [r3, #4]
    eeec:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    eef0:	684b      	ldr	r3, [r1, #4]
    eef2:	4798      	blx	r3
	return 0;
    eef4:	2000      	movs	r0, #0
}
    eef6:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    eef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    eefc:	e7f0      	b.n	eee0 <stop+0x34>

0000eefe <api_stop>:
	return stop(dev, subsys, CTX_API);
    eefe:	2280      	movs	r2, #128	; 0x80
    ef00:	f7ff bfd4 	b.w	eeac <stop>

0000ef04 <async_start>:
{
    ef04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef06:	9f06      	ldr	r7, [sp, #24]
    ef08:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
    ef0a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    ef0c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    ef0e:	f04f 0020 	mov.w	r0, #32
    ef12:	f3ef 8c11 	mrs	ip, BASEPRI
    ef16:	f380 8812 	msr	BASEPRI_MAX, r0
    ef1a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    ef1e:	260c      	movs	r6, #12
    ef20:	fb06 4601 	mla	r6, r6, r1, r4
    ef24:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    ef26:	f000 0e07 	and.w	lr, r0, #7
    ef2a:	f1be 0f01 	cmp.w	lr, #1
    ef2e:	d111      	bne.n	ef54 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    ef30:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    ef32:	2600      	movs	r6, #0
	__asm__ volatile(
    ef34:	f38c 8811 	msr	BASEPRI, ip
    ef38:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    ef3c:	b946      	cbnz	r6, ef50 <async_start+0x4c>
	subdata->cb = cb;
    ef3e:	200c      	movs	r0, #12
    ef40:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    ef44:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    ef48:	686b      	ldr	r3, [r5, #4]
    ef4a:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    ef4e:	4798      	blx	r3
}
    ef50:	4630      	mov	r0, r6
    ef52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    ef54:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    ef58:	4287      	cmp	r7, r0
    ef5a:	bf14      	ite	ne
    ef5c:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    ef60:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    ef64:	e7e6      	b.n	ef34 <async_start+0x30>

0000ef66 <api_start>:
{
    ef66:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    ef68:	2480      	movs	r4, #128	; 0x80
    ef6a:	9400      	str	r4, [sp, #0]
    ef6c:	f7ff ffca 	bl	ef04 <async_start>
}
    ef70:	b002      	add	sp, #8
    ef72:	bd10      	pop	{r4, pc}

0000ef74 <onoff_started_callback>:
{
    ef74:	b410      	push	{r4}
	notify(mgr, 0);
    ef76:	241c      	movs	r4, #28
	return &data->mgr[type];
    ef78:	6900      	ldr	r0, [r0, #16]
    ef7a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    ef7c:	fb03 0004 	mla	r0, r3, r4, r0
    ef80:	2100      	movs	r1, #0
}
    ef82:	bc10      	pop	{r4}
	notify(mgr, 0);
    ef84:	4710      	bx	r2

0000ef86 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    ef86:	2000      	movs	r0, #0
    ef88:	f7fc b974 	b.w	b274 <nrfx_clock_start>

0000ef8c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    ef8c:	2000      	movs	r0, #0
    ef8e:	f000 ba5c 	b.w	f44a <nrfx_clock_stop>

0000ef92 <blocking_start_callback>:
{
    ef92:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    ef94:	f7fe ba4a 	b.w	d42c <z_impl_k_sem_give>

0000ef98 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ef98:	6843      	ldr	r3, [r0, #4]
}
    ef9a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ef9c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    ef9e:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    efa0:	600b      	str	r3, [r1, #0]
}
    efa2:	4770      	bx	lr

0000efa4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    efa4:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    efa6:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    efaa:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    efac:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    efb0:	6098      	str	r0, [r3, #8]
}
    efb2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    efb4:	60d9      	str	r1, [r3, #12]
    efb6:	4770      	bx	lr

0000efb8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    efb8:	6843      	ldr	r3, [r0, #4]
}
    efba:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    efbc:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    efbe:	6099      	str	r1, [r3, #8]
}
    efc0:	4770      	bx	lr

0000efc2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    efc2:	6843      	ldr	r3, [r0, #4]
}
    efc4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    efc6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    efc8:	60d9      	str	r1, [r3, #12]
}
    efca:	4770      	bx	lr

0000efcc <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    efcc:	6843      	ldr	r3, [r0, #4]
    efce:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    efd0:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    efd2:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    efd6:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    efd8:	6090      	str	r0, [r2, #8]
}
    efda:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    efdc:	60d3      	str	r3, [r2, #12]
    efde:	4770      	bx	lr

0000efe0 <gpio_nrfx_manage_callback>:
	return port->data;
    efe0:	6903      	ldr	r3, [r0, #16]
{
    efe2:	b530      	push	{r4, r5, lr}
	return list->head;
    efe4:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    efe6:	b158      	cbz	r0, f000 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    efe8:	2400      	movs	r4, #0
    efea:	4281      	cmp	r1, r0
    efec:	d112      	bne.n	f014 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    efee:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    eff0:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    eff2:	b954      	cbnz	r4, f00a <gpio_nrfx_manage_callback+0x2a>
    eff4:	428d      	cmp	r5, r1
	list->head = node;
    eff6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    eff8:	d100      	bne.n	effc <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    effa:	6098      	str	r0, [r3, #8]
	parent->next = child;
    effc:	2000      	movs	r0, #0
    effe:	6008      	str	r0, [r1, #0]
	if (set) {
    f000:	b96a      	cbnz	r2, f01e <gpio_nrfx_manage_callback+0x3e>
	return 0;
    f002:	2000      	movs	r0, #0
}
    f004:	bd30      	pop	{r4, r5, pc}
    f006:	4628      	mov	r0, r5
    f008:	e7ef      	b.n	efea <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    f00a:	428d      	cmp	r5, r1
	parent->next = child;
    f00c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    f00e:	bf08      	it	eq
    f010:	609c      	streq	r4, [r3, #8]
}
    f012:	e7f3      	b.n	effc <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    f014:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f016:	4604      	mov	r4, r0
    f018:	2d00      	cmp	r5, #0
    f01a:	d1f4      	bne.n	f006 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    f01c:	b13a      	cbz	r2, f02e <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
    f01e:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    f020:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    f022:	600a      	str	r2, [r1, #0]
	list->head = node;
    f024:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    f026:	2800      	cmp	r0, #0
    f028:	d1eb      	bne.n	f002 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    f02a:	6099      	str	r1, [r3, #8]
}
    f02c:	e7ea      	b.n	f004 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    f02e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    f032:	e7e7      	b.n	f004 <gpio_nrfx_manage_callback+0x24>

0000f034 <irq_connect3>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
    f034:	2200      	movs	r2, #0
    f036:	2101      	movs	r1, #1
    f038:	200b      	movs	r0, #11
    f03a:	f7fa b8ef 	b.w	921c <z_arm_irq_priority_set>

0000f03e <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    f03e:	b530      	push	{r4, r5, lr}
    f040:	4604      	mov	r4, r0
	while (*count) {
    f042:	6808      	ldr	r0, [r1, #0]
    f044:	b908      	cbnz	r0, f04a <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    f046:	6010      	str	r0, [r2, #0]
	return NULL;
    f048:	e004      	b.n	f054 <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
    f04a:	6823      	ldr	r3, [r4, #0]
    f04c:	685d      	ldr	r5, [r3, #4]
    f04e:	b115      	cbz	r5, f056 <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
    f050:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
    f052:	6015      	str	r5, [r2, #0]
}
    f054:	bd30      	pop	{r4, r5, pc}
		++(*current);
    f056:	3308      	adds	r3, #8
		--(*count);
    f058:	3801      	subs	r0, #1
		++(*current);
    f05a:	6023      	str	r3, [r4, #0]
		--(*count);
    f05c:	6008      	str	r0, [r1, #0]
    f05e:	e7f0      	b.n	f042 <spi_context_get_next_buf.constprop.0+0x4>

0000f060 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    f060:	4603      	mov	r3, r0
    f062:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    f064:	7919      	ldrb	r1, [r3, #4]
    f066:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    f068:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    f06a:	fa03 f101 	lsl.w	r1, r3, r1
    f06e:	6903      	ldr	r3, [r0, #16]
    f070:	681b      	ldr	r3, [r3, #0]
    f072:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    f074:	bf18      	it	ne
    f076:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    f07a:	b112      	cbz	r2, f082 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    f07c:	6883      	ldr	r3, [r0, #8]
    f07e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    f080:	4718      	bx	r3
    f082:	6883      	ldr	r3, [r0, #8]
    f084:	691b      	ldr	r3, [r3, #16]
    f086:	e7fb      	b.n	f080 <gpio_pin_set_dt.isra.0+0x20>

0000f088 <_spi_context_cs_control>:
{
    f088:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    f08a:	6803      	ldr	r3, [r0, #0]
{
    f08c:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    f08e:	b1e3      	cbz	r3, f0ca <_spi_context_cs_control+0x42>
    f090:	6898      	ldr	r0, [r3, #8]
    f092:	b1d0      	cbz	r0, f0ca <_spi_context_cs_control+0x42>
    f094:	6805      	ldr	r5, [r0, #0]
    f096:	b1c5      	cbz	r5, f0ca <_spi_context_cs_control+0x42>
		if (on) {
    f098:	b149      	cbz	r1, f0ae <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    f09a:	2101      	movs	r1, #1
    f09c:	f7ff ffe0 	bl	f060 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    f0a0:	6823      	ldr	r3, [r4, #0]
    f0a2:	689b      	ldr	r3, [r3, #8]
    f0a4:	6898      	ldr	r0, [r3, #8]
}
    f0a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    f0aa:	f000 bc59 	b.w	f960 <z_impl_k_busy_wait>
			if (!force_off &&
    f0ae:	b912      	cbnz	r2, f0b6 <_spi_context_cs_control+0x2e>
    f0b0:	889b      	ldrh	r3, [r3, #4]
    f0b2:	04db      	lsls	r3, r3, #19
    f0b4:	d409      	bmi.n	f0ca <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    f0b6:	6880      	ldr	r0, [r0, #8]
    f0b8:	f000 fc52 	bl	f960 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    f0bc:	6823      	ldr	r3, [r4, #0]
    f0be:	2100      	movs	r1, #0
    f0c0:	6898      	ldr	r0, [r3, #8]
}
    f0c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    f0c6:	f7ff bfcb 	b.w	f060 <gpio_pin_set_dt.isra.0>
}
    f0ca:	bd38      	pop	{r3, r4, r5, pc}

0000f0cc <spi_context_unlock_unconditionally>:
{
    f0cc:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    f0ce:	2201      	movs	r2, #1
    f0d0:	2100      	movs	r1, #0
{
    f0d2:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    f0d4:	f7ff ffd8 	bl	f088 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    f0d8:	69a3      	ldr	r3, [r4, #24]
    f0da:	b933      	cbnz	r3, f0ea <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    f0dc:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    f0de:	f104 0010 	add.w	r0, r4, #16
}
    f0e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0e6:	f7fe b9a1 	b.w	d42c <z_impl_k_sem_give>
    f0ea:	bd10      	pop	{r4, pc}

0000f0ec <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = dev->data;
    f0ec:	6900      	ldr	r0, [r0, #16]
{
    f0ee:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    f0f0:	6803      	ldr	r3, [r0, #0]
    f0f2:	428b      	cmp	r3, r1
    f0f4:	d106      	bne.n	f104 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    f0f6:	f890 4078 	ldrb.w	r4, [r0, #120]	; 0x78
    f0fa:	b934      	cbnz	r4, f10a <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    f0fc:	f7ff ffe6 	bl	f0cc <spi_context_unlock_unconditionally>
	return 0;
    f100:	4620      	mov	r0, r4
}
    f102:	bd10      	pop	{r4, pc}
		return -EINVAL;
    f104:	f06f 0015 	mvn.w	r0, #21
    f108:	e7fb      	b.n	f102 <spi_nrfx_release+0x16>
		return -EBUSY;
    f10a:	f06f 000f 	mvn.w	r0, #15
    f10e:	e7f8      	b.n	f102 <spi_nrfx_release+0x16>

0000f110 <spi_nrfx_init>:
{
    f110:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
    f114:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    f116:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    f118:	6a66      	ldr	r6, [r4, #36]	; 0x24
	ret = pinctrl_lookup_state(config, id, &state);
    f11a:	2100      	movs	r1, #0
    f11c:	4630      	mov	r0, r6
    f11e:	aa01      	add	r2, sp, #4
    f120:	f000 f927 	bl	f372 <pinctrl_lookup_state>
	if (ret < 0) {
    f124:	2800      	cmp	r0, #0
    f126:	db43      	blt.n	f1b0 <spi_nrfx_init+0xa0>
	return pinctrl_apply_state_direct(config, state);
    f128:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    f12a:	6832      	ldr	r2, [r6, #0]
    f12c:	7919      	ldrb	r1, [r3, #4]
    f12e:	6818      	ldr	r0, [r3, #0]
    f130:	f7fb fd1a 	bl	ab68 <pinctrl_configure_pins>
	if (err < 0) {
    f134:	2800      	cmp	r0, #0
    f136:	db3b      	blt.n	f1b0 <spi_nrfx_init+0xa0>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    f138:	2601      	movs	r6, #1
	dev_config->irq_connect();
    f13a:	6a23      	ldr	r3, [r4, #32]
    f13c:	4798      	blx	r3
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    f13e:	68ac      	ldr	r4, [r5, #8]
    f140:	3408      	adds	r4, #8
    f142:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    f146:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    f14a:	f1a4 0208 	sub.w	r2, r4, #8
    f14e:	4293      	cmp	r3, r2
    f150:	d804      	bhi.n	f15c <spi_nrfx_init+0x4c>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    f152:	4628      	mov	r0, r5
    f154:	f7ff ffba 	bl	f0cc <spi_context_unlock_unconditionally>
	return 0;
    f158:	2000      	movs	r0, #0
    f15a:	e029      	b.n	f1b0 <spi_nrfx_init+0xa0>
		if (!device_is_ready(cs_gpio->port)) {
    f15c:	f854 0c08 	ldr.w	r0, [r4, #-8]
    f160:	f000 fa0b 	bl	f57a <z_device_is_ready>
    f164:	b338      	cbz	r0, f1b6 <spi_nrfx_init+0xa6>
	return gpio_pin_configure(spec->port,
    f166:	f854 0c08 	ldr.w	r0, [r4, #-8]
    f16a:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
    f16e:	f834 3c02 	ldrh.w	r3, [r4, #-2]
	struct gpio_driver_data *data =
    f172:	f8d0 c010 	ldr.w	ip, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    f176:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    f178:	f8dc 7000 	ldr.w	r7, [ip]
	return gpio_pin_configure(spec->port,
    f17c:	bf54      	ite	pl
    f17e:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    f182:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	const struct gpio_driver_api *api =
    f186:	f8d0 8008 	ldr.w	r8, [r0, #8]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    f18a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    f18e:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    f192:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    f194:	bf4c      	ite	mi
    f196:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    f19a:	ea27 070e 	bicpl.w	r7, r7, lr
	return api->pin_configure(port, pin, flags);
    f19e:	f8d8 3000 	ldr.w	r3, [r8]
    f1a2:	f8cc 7000 	str.w	r7, [ip]
    f1a6:	4798      	blx	r3
		if (ret < 0) {
    f1a8:	2800      	cmp	r0, #0
    f1aa:	f104 0408 	add.w	r4, r4, #8
    f1ae:	dac8      	bge.n	f142 <spi_nrfx_init+0x32>
}
    f1b0:	b002      	add	sp, #8
    f1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENODEV;
    f1b6:	f06f 0012 	mvn.w	r0, #18
    f1ba:	e7f9      	b.n	f1b0 <spi_nrfx_init+0xa0>

0000f1bc <event_handler>:
{
    f1bc:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    f1be:	7803      	ldrb	r3, [r0, #0]
{
    f1c0:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    f1c2:	2b00      	cmp	r3, #0
    f1c4:	d145      	bne.n	f252 <event_handler+0x96>
	if (!ctx->tx_len) {
    f1c6:	6e0b      	ldr	r3, [r1, #96]	; 0x60
    f1c8:	b1a3      	cbz	r3, f1f4 <event_handler+0x38>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    f1ca:	6f4a      	ldr	r2, [r1, #116]	; 0x74
	if (len > ctx->tx_len) {
    f1cc:	429a      	cmp	r2, r3
    f1ce:	d811      	bhi.n	f1f4 <event_handler+0x38>
	ctx->tx_len -= len;
    f1d0:	1a9b      	subs	r3, r3, r2
    f1d2:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->tx_len) {
    f1d4:	2b00      	cmp	r3, #0
    f1d6:	d130      	bne.n	f23a <event_handler+0x7e>
		++ctx->current_tx;
    f1d8:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_tx,
    f1da:	f101 0260 	add.w	r2, r1, #96	; 0x60
		++ctx->current_tx;
    f1de:	3308      	adds	r3, #8
    f1e0:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->tx_count;
    f1e2:	6d0b      	ldr	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_tx,
    f1e4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
		--ctx->tx_count;
    f1e8:	3b01      	subs	r3, #1
    f1ea:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_tx,
    f1ec:	3150      	adds	r1, #80	; 0x50
    f1ee:	f7ff ff26 	bl	f03e <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    f1f2:	65e0      	str	r0, [r4, #92]	; 0x5c
	return (ctx->config->operation & SPI_OP_MODE_SLAVE);
    f1f4:	6823      	ldr	r3, [r4, #0]
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    f1f6:	6f62      	ldr	r2, [r4, #116]	; 0x74
    f1f8:	889b      	ldrh	r3, [r3, #4]
	if (spi_context_is_slave(ctx)) {
    f1fa:	07db      	lsls	r3, r3, #31
		ctx->recv_frames += len;
    f1fc:	bf42      	ittt	mi
    f1fe:	6ee3      	ldrmi	r3, [r4, #108]	; 0x6c
    f200:	189b      	addmi	r3, r3, r2
    f202:	66e3      	strmi	r3, [r4, #108]	; 0x6c
	if (!ctx->rx_len) {
    f204:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    f206:	b19b      	cbz	r3, f230 <event_handler+0x74>
	if (len > ctx->rx_len) {
    f208:	429a      	cmp	r2, r3
    f20a:	d811      	bhi.n	f230 <event_handler+0x74>
	ctx->rx_len -= len;
    f20c:	1a9b      	subs	r3, r3, r2
    f20e:	66a3      	str	r3, [r4, #104]	; 0x68
	if (!ctx->rx_len) {
    f210:	b9cb      	cbnz	r3, f246 <event_handler+0x8a>
		++ctx->current_rx;
    f212:	6d63      	ldr	r3, [r4, #84]	; 0x54
			spi_context_get_next_buf(&ctx->current_rx,
    f214:	f104 0268 	add.w	r2, r4, #104	; 0x68
		++ctx->current_rx;
    f218:	3308      	adds	r3, #8
    f21a:	6563      	str	r3, [r4, #84]	; 0x54
		--ctx->rx_count;
    f21c:	6da3      	ldr	r3, [r4, #88]	; 0x58
			spi_context_get_next_buf(&ctx->current_rx,
    f21e:	f104 0158 	add.w	r1, r4, #88	; 0x58
		--ctx->rx_count;
    f222:	3b01      	subs	r3, #1
    f224:	65a3      	str	r3, [r4, #88]	; 0x58
			spi_context_get_next_buf(&ctx->current_rx,
    f226:	f104 0054 	add.w	r0, r4, #84	; 0x54
    f22a:	f7ff ff08 	bl	f03e <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    f22e:	6660      	str	r0, [r4, #100]	; 0x64
		transfer_next_chunk(dev_data->dev);
    f230:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
    f232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    f236:	f7fa bef9 	b.w	a02c <transfer_next_chunk>
	} else if (ctx->tx_buf) {
    f23a:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
    f23c:	2b00      	cmp	r3, #0
    f23e:	d0d9      	beq.n	f1f4 <event_handler+0x38>
		ctx->tx_buf += dfs * len;
    f240:	4413      	add	r3, r2
    f242:	65cb      	str	r3, [r1, #92]	; 0x5c
    f244:	e7d6      	b.n	f1f4 <event_handler+0x38>
	} else if (ctx->rx_buf) {
    f246:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f248:	2b00      	cmp	r3, #0
    f24a:	d0f1      	beq.n	f230 <event_handler+0x74>
		ctx->rx_buf += dfs * len;
    f24c:	4413      	add	r3, r2
    f24e:	6663      	str	r3, [r4, #100]	; 0x64
    f250:	e7ee      	b.n	f230 <event_handler+0x74>
}
    f252:	bd10      	pop	{r4, pc}

0000f254 <spi_nrfx_transceive_async>:
{
    f254:	b513      	push	{r0, r1, r4, lr}
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, true, async);
    f256:	9c04      	ldr	r4, [sp, #16]
    f258:	9401      	str	r4, [sp, #4]
    f25a:	2401      	movs	r4, #1
    f25c:	9400      	str	r4, [sp, #0]
    f25e:	f7fa ff4d 	bl	a0fc <transceive>
}
    f262:	b002      	add	sp, #8
    f264:	bd10      	pop	{r4, pc}

0000f266 <spi_nrfx_transceive>:
{
    f266:	b513      	push	{r0, r1, r4, lr}
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
    f268:	2400      	movs	r4, #0
    f26a:	e9cd 4400 	strd	r4, r4, [sp]
    f26e:	f7fa ff45 	bl	a0fc <transceive>
}
    f272:	b002      	add	sp, #8
    f274:	bd10      	pop	{r4, pc}

0000f276 <uarte_nrfx_config_get>:
{
    f276:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    f278:	6902      	ldr	r2, [r0, #16]
    f27a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    f27e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    f282:	2000      	movs	r0, #0
    f284:	4770      	bx	lr

0000f286 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    f286:	6843      	ldr	r3, [r0, #4]
    f288:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    f28a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    f28e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    f292:	4770      	bx	lr

0000f294 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    f294:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    f296:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    f298:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f29a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    f29e:	b150      	cbz	r0, f2b6 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f2a0:	2000      	movs	r0, #0
	*c = *data->rx_data;
    f2a2:	6952      	ldr	r2, [r2, #20]
    f2a4:	7812      	ldrb	r2, [r2, #0]
    f2a6:	700a      	strb	r2, [r1, #0]
    f2a8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    f2ac:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f2b0:	2201      	movs	r2, #1
    f2b2:	601a      	str	r2, [r3, #0]
	return 0;
    f2b4:	4770      	bx	lr
		return -1;
    f2b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    f2ba:	4770      	bx	lr

0000f2bc <is_tx_ready.isra.0>:
	return config->uarte_regs;
    f2bc:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    f2be:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f2c0:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    f2c4:	b940      	cbnz	r0, f2d8 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    f2c6:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    f2c8:	079b      	lsls	r3, r3, #30
    f2ca:	d406      	bmi.n	f2da <is_tx_ready.isra.0+0x1e>
    f2cc:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    f2d0:	3800      	subs	r0, #0
    f2d2:	bf18      	it	ne
    f2d4:	2001      	movne	r0, #1
    f2d6:	4770      	bx	lr
    f2d8:	2001      	movs	r0, #1
}
    f2da:	4770      	bx	lr

0000f2dc <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    f2dc:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    f2de:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    f2e0:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    f2e4:	05c9      	lsls	r1, r1, #23
    f2e6:	d518      	bpl.n	f31a <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f2e8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    f2ec:	b1a9      	cbz	r1, f31a <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    f2ee:	f04f 0020 	mov.w	r0, #32
    f2f2:	f3ef 8111 	mrs	r1, BASEPRI
    f2f6:	f380 8812 	msr	BASEPRI_MAX, r0
    f2fa:	f3bf 8f6f 	isb	sy
    f2fe:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    f302:	b130      	cbz	r0, f312 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f304:	2000      	movs	r0, #0
    f306:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    f30a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f30e:	2001      	movs	r0, #1
    f310:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    f312:	f381 8811 	msr	BASEPRI, r1
    f316:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    f31a:	6852      	ldr	r2, [r2, #4]
    f31c:	06d2      	lsls	r2, r2, #27
    f31e:	d515      	bpl.n	f34c <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    f320:	f04f 0120 	mov.w	r1, #32
    f324:	f3ef 8211 	mrs	r2, BASEPRI
    f328:	f381 8812 	msr	BASEPRI_MAX, r1
    f32c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f330:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    f334:	b111      	cbz	r1, f33c <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    f336:	2100      	movs	r1, #0
    f338:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    f33c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    f340:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    f344:	f382 8811 	msr	BASEPRI, r2
    f348:	f3bf 8f6f 	isb	sy
}
    f34c:	4770      	bx	lr

0000f34e <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
    f34e:	4608      	mov	r0, r1
    f350:	b508      	push	{r3, lr}
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
    f352:	4611      	mov	r1, r2
    f354:	f7fb fe9c 	bl	b090 <psa_generate_random>
	int err = EINVAL;
    f358:	2800      	cmp	r0, #0
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
    f35a:	bf18      	it	ne
    f35c:	2016      	movne	r0, #22
    f35e:	bd08      	pop	{r3, pc}

0000f360 <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
    f360:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
    f362:	f000 f86d 	bl	f440 <psa_crypto_init>
	if (status != PSA_SUCCESS) {
		return -EINVAL;
    f366:	2800      	cmp	r0, #0
		return -EINVAL;
	}
#endif

	return 0;
}
    f368:	bf18      	it	ne
    f36a:	f06f 0015 	mvnne.w	r0, #21
    f36e:	bd08      	pop	{r3, pc}

0000f370 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    f370:	4770      	bx	lr

0000f372 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    f372:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    f374:	6843      	ldr	r3, [r0, #4]
    f376:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    f378:	7a03      	ldrb	r3, [r0, #8]
    f37a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    f37e:	3b01      	subs	r3, #1
    f380:	00db      	lsls	r3, r3, #3
    f382:	6845      	ldr	r5, [r0, #4]
    f384:	6814      	ldr	r4, [r2, #0]
    f386:	441d      	add	r5, r3
    f388:	42ac      	cmp	r4, r5
    f38a:	d902      	bls.n	f392 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    f38c:	f06f 0001 	mvn.w	r0, #1
}
    f390:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    f392:	7965      	ldrb	r5, [r4, #5]
    f394:	428d      	cmp	r5, r1
    f396:	d002      	beq.n	f39e <pinctrl_lookup_state+0x2c>
		(*state)++;
    f398:	3408      	adds	r4, #8
    f39a:	6014      	str	r4, [r2, #0]
    f39c:	e7f1      	b.n	f382 <pinctrl_lookup_state+0x10>
			return 0;
    f39e:	2000      	movs	r0, #0
    f3a0:	e7f6      	b.n	f390 <pinctrl_lookup_state+0x1e>

0000f3a2 <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
    f3a2:	f000 badd 	b.w	f960 <z_impl_k_busy_wait>

0000f3a6 <nrf_modem_os_errno_set>:
{
    f3a6:	b510      	push	{r4, lr}
    f3a8:	4604      	mov	r4, r0
	errno = err_code;
    f3aa:	f7ff fd61 	bl	ee70 <__errno>
    f3ae:	6004      	str	r4, [r0, #0]
}
    f3b0:	bd10      	pop	{r4, pc}

0000f3b2 <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
    f3b2:	f000 b97b 	b.w	f6ac <k_is_in_isr>

0000f3b6 <nrf_modem_os_sem_give>:
	z_impl_k_sem_give(sem);
    f3b6:	f7fe b839 	b.w	d42c <z_impl_k_sem_give>

0000f3ba <nrf_modem_os_sem_take>:
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
    f3ba:	1c4b      	adds	r3, r1, #1
{
    f3bc:	b570      	push	{r4, r5, r6, lr}
    f3be:	4605      	mov	r5, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
    f3c0:	d017      	beq.n	f3f2 <nrf_modem_os_sem_take+0x38>
    f3c2:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
    f3c6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    f3ca:	f240 30e7 	movw	r0, #999	; 0x3e7
    f3ce:	2100      	movs	r1, #0
    f3d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f3d4:	2300      	movs	r3, #0
    f3d6:	fbc4 0106 	smlal	r0, r1, r4, r6
    f3da:	f7f8 feb3 	bl	8144 <__aeabi_uldivmod>
    f3de:	4602      	mov	r2, r0
    f3e0:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    f3e2:	4628      	mov	r0, r5
    f3e4:	f7fe f848 	bl	d478 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
    f3e8:	2800      	cmp	r0, #0
}
    f3ea:	bf18      	it	ne
    f3ec:	f06f 000a 	mvnne.w	r0, #10
    f3f0:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
    f3f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f3f6:	4613      	mov	r3, r2
    f3f8:	e7f3      	b.n	f3e2 <nrf_modem_os_sem_take+0x28>

0000f3fa <rpc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    f3fa:	4668      	mov	r0, sp
    f3fc:	f020 0107 	bic.w	r1, r0, #7
    f400:	468d      	mov	sp, r1
    f402:	b501      	push	{r0, lr}
	nrf_modem_application_irq_handler();
    f404:	f7fc ff1c 	bl	c240 <nrf_modem_application_irq_handler>
	nrf_modem_os_event_notify();
    f408:	f7fb fda8 	bl	af5c <nrf_modem_os_event_notify>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
    f40c:	f7f9 ff1c 	bl	9248 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
    f410:	f7f9 fff6 	bl	9400 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
    f414:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    f418:	4685      	mov	sp, r0
    f41a:	4770      	bx	lr

0000f41c <read_task_create>:
{
    f41c:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(APPLICATION_IRQ, APPLICATION_IRQ_PRIORITY,
    f41e:	201c      	movs	r0, #28
    f420:	2200      	movs	r2, #0
    f422:	2106      	movs	r1, #6
    f424:	f7f9 fefa 	bl	921c <z_arm_irq_priority_set>
}
    f428:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(APPLICATION_IRQ);
    f42c:	201c      	movs	r0, #28
    f42e:	f7f9 bec3 	b.w	91b8 <arch_irq_enable>

0000f432 <nrf_modem_fault_handler>:

#if CONFIG_NRF_MODEM_LIB_ON_FAULT_DO_NOTHING
void nrf_modem_fault_handler(struct nrf_modem_fault_info *fault_info)
{
	LOG_ERR("Modem error: 0x%x, PC: 0x%x", fault_info->reason, fault_info->program_counter);
}
    f432:	4770      	bx	lr

0000f434 <k_sys_fatal_error_handler>:
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    f434:	2000      	movs	r0, #0
{
    f436:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
    f438:	f7fa f928 	bl	968c <sys_arch_reboot>

0000f43c <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
    f43c:	2000      	movs	r0, #0
    f43e:	4770      	bx	lr

0000f440 <psa_crypto_init>:
}
    f440:	2000      	movs	r0, #0
    f442:	4770      	bx	lr

0000f444 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    f444:	4700      	bx	r0

0000f446 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    f446:	f000 ba8b 	b.w	f960 <z_impl_k_busy_wait>

0000f44a <nrfx_clock_stop>:
    clock_stop(domain);
    f44a:	f7fb bea7 	b.w	b19c <clock_stop>

0000f44e <set_ss_pin_state>:
{
    f44e:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    f450:	7fc0      	ldrb	r0, [r0, #31]
    f452:	28ff      	cmp	r0, #255	; 0xff
    f454:	d006      	beq.n	f464 <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
    f456:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
    f458:	079b      	lsls	r3, r3, #30
    f45a:	bf58      	it	pl
    f45c:	f081 0101 	eorpl.w	r1, r1, #1
    f460:	f7fc bb4a 	b.w	baf8 <nrf_gpio_pin_write>
}
    f464:	4770      	bx	lr

0000f466 <rpc_handle_ctrl_message>:
    f466:	2902      	cmp	r1, #2
    f468:	b510      	push	{r4, lr}
    f46a:	4604      	mov	r4, r0
    f46c:	d005      	beq.n	f47a <rpc_handle_ctrl_message+0x14>
    f46e:	2904      	cmp	r1, #4
    f470:	d001      	beq.n	f476 <rpc_handle_ctrl_message+0x10>
    f472:	2901      	cmp	r1, #1
    f474:	d107      	bne.n	f486 <rpc_handle_ctrl_message+0x20>
    f476:	2000      	movs	r0, #0
    f478:	bd10      	pop	{r4, pc}
    f47a:	6880      	ldr	r0, [r0, #8]
    f47c:	2800      	cmp	r0, #0
    f47e:	d0fa      	beq.n	f476 <rpc_handle_ctrl_message+0x10>
    f480:	f000 f833 	bl	f4ea <rpc_transport_local_data_free>
    f484:	e7f7      	b.n	f476 <rpc_handle_ctrl_message+0x10>
    f486:	6880      	ldr	r0, [r0, #8]
    f488:	b108      	cbz	r0, f48e <rpc_handle_ctrl_message+0x28>
    f48a:	f000 f82e 	bl	f4ea <rpc_transport_local_data_free>
    f48e:	4620      	mov	r0, r4
    f490:	f000 f827 	bl	f4e2 <rpc_transport_msg_free>
    f494:	e7ef      	b.n	f476 <rpc_handle_ctrl_message+0x10>

0000f496 <rpc_message_send>:
    f496:	6843      	ldr	r3, [r0, #4]
    f498:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    f49c:	f043 0302 	orr.w	r3, r3, #2
    f4a0:	6043      	str	r3, [r0, #4]
    f4a2:	f000 b826 	b.w	f4f2 <rpc_transport_data_msg_send>

0000f4a6 <rpc_message_alloc>:
    f4a6:	b570      	push	{r4, r5, r6, lr}
    f4a8:	4606      	mov	r6, r0
    f4aa:	b130      	cbz	r0, f4ba <rpc_message_alloc+0x14>
    f4ac:	f000 f81b 	bl	f4e6 <rpc_transport_data_alloc>
    f4b0:	4605      	mov	r5, r0
    f4b2:	b918      	cbnz	r0, f4bc <rpc_message_alloc+0x16>
    f4b4:	2400      	movs	r4, #0
    f4b6:	4620      	mov	r0, r4
    f4b8:	bd70      	pop	{r4, r5, r6, pc}
    f4ba:	4605      	mov	r5, r0
    f4bc:	f000 f80f 	bl	f4de <rpc_transport_data_msg_alloc>
    f4c0:	4604      	mov	r4, r0
    f4c2:	b110      	cbz	r0, f4ca <rpc_message_alloc+0x24>
    f4c4:	60c6      	str	r6, [r0, #12]
    f4c6:	6085      	str	r5, [r0, #8]
    f4c8:	e7f5      	b.n	f4b6 <rpc_message_alloc+0x10>
    f4ca:	2d00      	cmp	r5, #0
    f4cc:	d0f2      	beq.n	f4b4 <rpc_message_alloc+0xe>
    f4ce:	4628      	mov	r0, r5
    f4d0:	f000 f80b 	bl	f4ea <rpc_transport_local_data_free>
    f4d4:	e7ef      	b.n	f4b6 <rpc_message_alloc+0x10>

0000f4d6 <rpc_message_free>:
    f4d6:	f000 b804 	b.w	f4e2 <rpc_transport_msg_free>

0000f4da <rpc_message_data_free>:
    f4da:	f000 b808 	b.w	f4ee <rpc_transport_peer_data_free>

0000f4de <rpc_transport_data_msg_alloc>:
    f4de:	f7fc be71 	b.w	c1c4 <rpc_transport_ipc_data_msg_alloc>

0000f4e2 <rpc_transport_msg_free>:
    f4e2:	f7fc bec1 	b.w	c268 <rpc_transport_ipc_msg_free>

0000f4e6 <rpc_transport_data_alloc>:
    f4e6:	f7fc bea1 	b.w	c22c <rpc_transport_ipc_data_alloc>

0000f4ea <rpc_transport_local_data_free>:
    f4ea:	f000 b804 	b.w	f4f6 <rpc_transport_ipc_local_data_free>

0000f4ee <rpc_transport_peer_data_free>:
    f4ee:	f7fc bee1 	b.w	c2b4 <rpc_transport_ipc_peer_data_free>

0000f4f2 <rpc_transport_data_msg_send>:
    f4f2:	f7fc be2b 	b.w	c14c <rpc_transport_ipc_data_msg_send>

0000f4f6 <rpc_transport_ipc_local_data_free>:
    f4f6:	b508      	push	{r3, lr}
    f4f8:	f7fb fd5c 	bl	afb4 <nrf_modem_os_shm_tx_free>
    f4fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f500:	f7fb bd1c 	b.w	af3c <nrf_modem_os_application_irq_set>

0000f504 <rpc_client_request_alloc>:
    f504:	b508      	push	{r3, lr}
    f506:	f7ff ffce 	bl	f4a6 <rpc_message_alloc>
    f50a:	b100      	cbz	r0, f50e <rpc_client_request_alloc+0xa>
    f50c:	3008      	adds	r0, #8
    f50e:	bd08      	pop	{r3, pc}

0000f510 <rpc_client_request_send>:
    f510:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    f514:	4610      	mov	r0, r2
    f516:	f840 1d08 	str.w	r1, [r0, #-8]!
    f51a:	f7ff bfbc 	b.w	f496 <rpc_message_send>

0000f51e <rpc_client_message_free>:
    f51e:	3808      	subs	r0, #8
    f520:	f7ff bfd9 	b.w	f4d6 <rpc_message_free>

0000f524 <rpc_client_data_free>:
    f524:	f7ff bfd9 	b.w	f4da <rpc_message_data_free>

0000f528 <sock_pkt_append>:
    f528:	2300      	movs	r3, #0
    f52a:	600b      	str	r3, [r1, #0]
    f52c:	6883      	ldr	r3, [r0, #8]
    f52e:	b913      	cbnz	r3, f536 <sock_pkt_append+0xe>
    f530:	e9c0 1101 	strd	r1, r1, [r0, #4]
    f534:	4770      	bx	lr
    f536:	6019      	str	r1, [r3, #0]
    f538:	6081      	str	r1, [r0, #8]
    f53a:	4770      	bx	lr

0000f53c <sock_proto_is_secure>:
    f53c:	6940      	ldr	r0, [r0, #20]
    f53e:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
    f542:	d005      	beq.n	f550 <sock_proto_is_secure+0x14>
    f544:	f240 1311 	movw	r3, #273	; 0x111
    f548:	1ac3      	subs	r3, r0, r3
    f54a:	4258      	negs	r0, r3
    f54c:	4158      	adcs	r0, r3
    f54e:	4770      	bx	lr
    f550:	2001      	movs	r0, #1
    f552:	4770      	bx	lr

0000f554 <sock_is_attaching>:
    f554:	7f00      	ldrb	r0, [r0, #28]
    f556:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f55a:	4770      	bx	lr

0000f55c <sock_is_nonblock>:
    f55c:	6b40      	ldr	r0, [r0, #52]	; 0x34
    f55e:	f000 0001 	and.w	r0, r0, #1
    f562:	4770      	bx	lr

0000f564 <on_conf_dnssrv_res>:
    f564:	f000 b800 	b.w	f568 <res_forward>

0000f568 <res_forward>:
    f568:	4603      	mov	r3, r0
    f56a:	68c0      	ldr	r0, [r0, #12]
    f56c:	b108      	cbz	r0, f572 <res_forward+0xa>
    f56e:	6003      	str	r3, [r0, #0]
    f570:	2001      	movs	r0, #1
    f572:	4770      	bx	lr

0000f574 <nrf_modem_is_initialized>:
    f574:	f7fd bcc4 	b.w	cf00 <nrf_modem_state_is_initialized>

0000f578 <z_device_state_init>:
}
    f578:	4770      	bx	lr

0000f57a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    f57a:	b138      	cbz	r0, f58c <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    f57c:	68c3      	ldr	r3, [r0, #12]
    f57e:	8818      	ldrh	r0, [r3, #0]
    f580:	f3c0 0008 	ubfx	r0, r0, #0, #9
    f584:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    f588:	4258      	negs	r0, r3
    f58a:	4158      	adcs	r0, r3
}
    f58c:	4770      	bx	lr

0000f58e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    f58e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f590:	4605      	mov	r5, r0
    f592:	460e      	mov	r6, r1
	__asm__ volatile(
    f594:	f04f 0320 	mov.w	r3, #32
    f598:	f3ef 8711 	mrs	r7, BASEPRI
    f59c:	f383 8812 	msr	BASEPRI_MAX, r3
    f5a0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    f5a4:	f7fe fa82 	bl	daac <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    f5a8:	4631      	mov	r1, r6
    f5aa:	4604      	mov	r4, r0
    f5ac:	4628      	mov	r0, r5
    f5ae:	f7ff ff41 	bl	f434 <k_sys_fatal_error_handler>
	__asm__ volatile(
    f5b2:	f387 8811 	msr	BASEPRI, r7
    f5b6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    f5ba:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    f5bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    f5c0:	f7fa b8ac 	b.w	971c <z_impl_k_thread_abort>

0000f5c4 <z_early_memset>:
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    f5c4:	f000 ba9b 	b.w	fafe <memset>

0000f5c8 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    f5c8:	f000 ba8c 	b.w	fae4 <memcpy>

0000f5cc <k_heap_init>:
{
    f5cc:	b410      	push	{r4}
    f5ce:	f100 040c 	add.w	r4, r0, #12
    f5d2:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    f5d6:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    f5d8:	f7ff bb9e 	b.w	ed18 <sys_heap_init>

0000f5dc <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    f5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f5e0:	b085      	sub	sp, #20
    f5e2:	4606      	mov	r6, r0
    f5e4:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    f5e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
    f5ea:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    f5ec:	f000 f9bc 	bl	f968 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    f5f0:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    f5f4:	4605      	mov	r5, r0
    f5f6:	460f      	mov	r7, r1
	__asm__ volatile(
    f5f8:	f04f 0320 	mov.w	r3, #32
    f5fc:	f3ef 8411 	mrs	r4, BASEPRI
    f600:	f383 8812 	msr	BASEPRI_MAX, r3
    f604:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    f608:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    f60c:	464a      	mov	r2, r9
    f60e:	4641      	mov	r1, r8
    f610:	4630      	mov	r0, r6
    f612:	f7ff fb19 	bl	ec48 <sys_heap_aligned_alloc>
    f616:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    f618:	f7fe fbfa 	bl	de10 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    f61c:	9b03      	ldr	r3, [sp, #12]
    f61e:	b13b      	cbz	r3, f630 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
    f620:	f384 8811 	msr	BASEPRI, r4
    f624:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    f628:	4618      	mov	r0, r3
    f62a:	b005      	add	sp, #20
    f62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    f630:	1a28      	subs	r0, r5, r0
    f632:	eb67 0101 	sbc.w	r1, r7, r1
    f636:	2801      	cmp	r0, #1
    f638:	f171 0200 	sbcs.w	r2, r1, #0
    f63c:	dbf0      	blt.n	f620 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    f63e:	e9cd 0100 	strd	r0, r1, [sp]
    f642:	465a      	mov	r2, fp
    f644:	4621      	mov	r1, r4
    f646:	4650      	mov	r0, sl
    f648:	f7fe f8d8 	bl	d7fc <z_pend_curr>
	__asm__ volatile(
    f64c:	f04f 0320 	mov.w	r3, #32
    f650:	f3ef 8411 	mrs	r4, BASEPRI
    f654:	f383 8812 	msr	BASEPRI_MAX, r3
    f658:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    f65c:	e7d6      	b.n	f60c <k_heap_aligned_alloc+0x30>

0000f65e <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
    f65e:	b507      	push	{r0, r1, r2, lr}
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
    f660:	e9cd 2300 	strd	r2, r3, [sp]
    f664:	460a      	mov	r2, r1
    f666:	2104      	movs	r1, #4
    f668:	f7ff ffb8 	bl	f5dc <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
    f66c:	b003      	add	sp, #12
    f66e:	f85d fb04 	ldr.w	pc, [sp], #4

0000f672 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
    f672:	b538      	push	{r3, r4, r5, lr}
    f674:	4604      	mov	r4, r0
    f676:	f04f 0320 	mov.w	r3, #32
    f67a:	f3ef 8511 	mrs	r5, BASEPRI
    f67e:	f383 8812 	msr	BASEPRI_MAX, r3
    f682:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    f686:	f7ff faa7 	bl	ebd8 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    f68a:	f104 000c 	add.w	r0, r4, #12
    f68e:	f000 f8f4 	bl	f87a <z_unpend_all>
    f692:	b130      	cbz	r0, f6a2 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    f694:	4629      	mov	r1, r5
    f696:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    f69a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    f69e:	f7fd bf59 	b.w	d554 <z_reschedule>
	__asm__ volatile(
    f6a2:	f385 8811 	msr	BASEPRI, r5
    f6a6:	f3bf 8f6f 	isb	sy
}
    f6aa:	bd38      	pop	{r3, r4, r5, pc}

0000f6ac <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f6ac:	f3ef 8005 	mrs	r0, IPSR
}
    f6b0:	3800      	subs	r0, #0
    f6b2:	bf18      	it	ne
    f6b4:	2001      	movne	r0, #1
    f6b6:	4770      	bx	lr

0000f6b8 <z_impl_k_thread_name_set>:
}
    f6b8:	f06f 0057 	mvn.w	r0, #87	; 0x57
    f6bc:	4770      	bx	lr

0000f6be <z_impl_k_thread_start>:
	z_sched_start(thread);
    f6be:	f7fe b841 	b.w	d744 <z_sched_start>

0000f6c2 <z_pm_save_idle_exit>:
{
    f6c2:	b508      	push	{r3, lr}
	pm_system_resume();
    f6c4:	f7f9 fc5c 	bl	8f80 <pm_system_resume>
}
    f6c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    f6cc:	f7ff be50 	b.w	f370 <sys_clock_idle_exit>

0000f6d0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    f6d0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f6d4:	428b      	cmp	r3, r1
    f6d6:	d001      	beq.n	f6dc <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    f6d8:	f7fe b8a4 	b.w	d824 <z_set_prio>
}
    f6dc:	2000      	movs	r0, #0
    f6de:	4770      	bx	lr

0000f6e0 <z_impl_k_mutex_init>:
{
    f6e0:	4603      	mov	r3, r0
	mutex->owner = NULL;
    f6e2:	2000      	movs	r0, #0
    f6e4:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    f6e8:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    f6ec:	4770      	bx	lr

0000f6ee <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    f6ee:	b15a      	cbz	r2, f708 <z_impl_k_sem_init+0x1a>
    f6f0:	428a      	cmp	r2, r1
    f6f2:	d309      	bcc.n	f708 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    f6f4:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    f6f8:	e9c0 1202 	strd	r1, r2, [r0, #8]
    f6fc:	e9c0 0000 	strd	r0, r0, [r0]
    f700:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    f704:	2000      	movs	r0, #0
    f706:	4770      	bx	lr
		return -EINVAL;
    f708:	f06f 0015 	mvn.w	r0, #21
}
    f70c:	4770      	bx	lr

0000f70e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    f70e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    f712:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    f714:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    f716:	2300      	movs	r3, #0
	node->prev = NULL;
    f718:	e9c0 3300 	strd	r3, r3, [r0]
}
    f71c:	4770      	bx	lr

0000f71e <unpend_thread_no_timeout>:
{
    f71e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    f720:	f7ff fff5 	bl	f70e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    f724:	7b43      	ldrb	r3, [r0, #13]
    f726:	f023 0302 	bic.w	r3, r3, #2
    f72a:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    f72c:	2300      	movs	r3, #0
    f72e:	6083      	str	r3, [r0, #8]
}
    f730:	bd08      	pop	{r3, pc}

0000f732 <z_unpend_thread>:
{
    f732:	b510      	push	{r4, lr}
	__asm__ volatile(
    f734:	f04f 0320 	mov.w	r3, #32
    f738:	f3ef 8411 	mrs	r4, BASEPRI
    f73c:	f383 8812 	msr	BASEPRI_MAX, r3
    f740:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    f744:	f7ff ffeb 	bl	f71e <unpend_thread_no_timeout>
	__asm__ volatile(
    f748:	f384 8811 	msr	BASEPRI, r4
    f74c:	f3bf 8f6f 	isb	sy
}
    f750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f754:	3018      	adds	r0, #24
    f756:	f000 b8bd 	b.w	f8d4 <z_abort_timeout>

0000f75a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    f75a:	4603      	mov	r3, r0
    f75c:	b920      	cbnz	r0, f768 <z_reschedule_irqlock+0xe>
    f75e:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    f762:	b90a      	cbnz	r2, f768 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    f764:	f7f9 bd9e 	b.w	92a4 <arch_swap>
    f768:	f383 8811 	msr	BASEPRI, r3
    f76c:	f3bf 8f6f 	isb	sy
}
    f770:	4770      	bx	lr

0000f772 <z_reschedule_unlocked>:
	__asm__ volatile(
    f772:	f04f 0320 	mov.w	r3, #32
    f776:	f3ef 8011 	mrs	r0, BASEPRI
    f77a:	f383 8812 	msr	BASEPRI_MAX, r3
    f77e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    f782:	f7ff bfea 	b.w	f75a <z_reschedule_irqlock>

0000f786 <z_priq_dumb_best>:
{
    f786:	4603      	mov	r3, r0
	return list->head == list;
    f788:	6800      	ldr	r0, [r0, #0]
}
    f78a:	4283      	cmp	r3, r0
    f78c:	bf08      	it	eq
    f78e:	2000      	moveq	r0, #0
    f790:	4770      	bx	lr

0000f792 <z_ready_thread>:
{
    f792:	b510      	push	{r4, lr}
    f794:	f04f 0320 	mov.w	r3, #32
    f798:	f3ef 8411 	mrs	r4, BASEPRI
    f79c:	f383 8812 	msr	BASEPRI_MAX, r3
    f7a0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    f7a4:	f7fd ff98 	bl	d6d8 <ready_thread>
	__asm__ volatile(
    f7a8:	f384 8811 	msr	BASEPRI, r4
    f7ac:	f3bf 8f6f 	isb	sy
}
    f7b0:	bd10      	pop	{r4, pc}

0000f7b2 <z_thread_timeout>:
{
    f7b2:	4601      	mov	r1, r0
    f7b4:	b510      	push	{r4, lr}
	__asm__ volatile(
    f7b6:	f04f 0320 	mov.w	r3, #32
    f7ba:	f3ef 8411 	mrs	r4, BASEPRI
    f7be:	f383 8812 	msr	BASEPRI_MAX, r3
    f7c2:	f3bf 8f6f 	isb	sy
		if (!killed) {
    f7c6:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    f7ca:	f013 0f28 	tst.w	r3, #40	; 0x28
    f7ce:	d10d      	bne.n	f7ec <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    f7d0:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    f7d4:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    f7d6:	b10b      	cbz	r3, f7dc <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    f7d8:	f7ff ffa1 	bl	f71e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    f7dc:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    f7e0:	f023 0314 	bic.w	r3, r3, #20
    f7e4:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    f7e8:	f7fd ff76 	bl	d6d8 <ready_thread>
	__asm__ volatile(
    f7ec:	f384 8811 	msr	BASEPRI, r4
    f7f0:	f3bf 8f6f 	isb	sy
}
    f7f4:	bd10      	pop	{r4, pc}

0000f7f6 <add_to_waitq_locked>:
{
    f7f6:	b538      	push	{r3, r4, r5, lr}
    f7f8:	4604      	mov	r4, r0
    f7fa:	460d      	mov	r5, r1
	unready_thread(thread);
    f7fc:	f7fd ffc0 	bl	d780 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    f800:	7b63      	ldrb	r3, [r4, #13]
    f802:	f043 0302 	orr.w	r3, r3, #2
    f806:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    f808:	b195      	cbz	r5, f830 <add_to_waitq_locked+0x3a>
    f80a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    f80c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f80e:	429d      	cmp	r5, r3
    f810:	d015      	beq.n	f83e <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f812:	b1a3      	cbz	r3, f83e <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    f814:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    f818:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    f81c:	4291      	cmp	r1, r2
    f81e:	d008      	beq.n	f832 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    f820:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    f822:	2a00      	cmp	r2, #0
    f824:	dd05      	ble.n	f832 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    f826:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    f828:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    f82c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    f82e:	605c      	str	r4, [r3, #4]
}
    f830:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    f832:	686a      	ldr	r2, [r5, #4]
    f834:	4293      	cmp	r3, r2
    f836:	d002      	beq.n	f83e <add_to_waitq_locked+0x48>
    f838:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f83a:	2b00      	cmp	r3, #0
    f83c:	d1ec      	bne.n	f818 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    f83e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    f840:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    f844:	601c      	str	r4, [r3, #0]
	list->tail = node;
    f846:	606c      	str	r4, [r5, #4]
}
    f848:	e7f2      	b.n	f830 <add_to_waitq_locked+0x3a>

0000f84a <z_unpend_first_thread>:
{
    f84a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    f84c:	f04f 0320 	mov.w	r3, #32
    f850:	f3ef 8511 	mrs	r5, BASEPRI
    f854:	f383 8812 	msr	BASEPRI_MAX, r3
    f858:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    f85c:	f7ff ff93 	bl	f786 <z_priq_dumb_best>
		if (thread != NULL) {
    f860:	4604      	mov	r4, r0
    f862:	b120      	cbz	r0, f86e <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    f864:	f7ff ff5b 	bl	f71e <unpend_thread_no_timeout>
    f868:	3018      	adds	r0, #24
    f86a:	f000 f833 	bl	f8d4 <z_abort_timeout>
	__asm__ volatile(
    f86e:	f385 8811 	msr	BASEPRI, r5
    f872:	f3bf 8f6f 	isb	sy
}
    f876:	4620      	mov	r0, r4
    f878:	bd38      	pop	{r3, r4, r5, pc}

0000f87a <z_unpend_all>:
{
    f87a:	b538      	push	{r3, r4, r5, lr}
    f87c:	4605      	mov	r5, r0
	int need_sched = 0;
    f87e:	2000      	movs	r0, #0
	return list->head == list;
    f880:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f882:	42a5      	cmp	r5, r4
    f884:	d000      	beq.n	f888 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    f886:	b904      	cbnz	r4, f88a <z_unpend_all+0x10>
}
    f888:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    f88a:	4620      	mov	r0, r4
    f88c:	f7ff ff51 	bl	f732 <z_unpend_thread>
		z_ready_thread(thread);
    f890:	4620      	mov	r0, r4
    f892:	f7ff ff7e 	bl	f792 <z_ready_thread>
		need_sched = 1;
    f896:	2001      	movs	r0, #1
    f898:	e7f2      	b.n	f880 <z_unpend_all+0x6>

0000f89a <z_sched_wake>:
{
    f89a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    f89c:	f04f 0320 	mov.w	r3, #32
    f8a0:	f3ef 8511 	mrs	r5, BASEPRI
    f8a4:	f383 8812 	msr	BASEPRI_MAX, r3
    f8a8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    f8ac:	f7ff ff6b 	bl	f786 <z_priq_dumb_best>
		if (thread != NULL) {
    f8b0:	4604      	mov	r4, r0
    f8b2:	b150      	cbz	r0, f8ca <z_sched_wake+0x30>
    f8b4:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    f8b6:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    f8b8:	f7ff ff31 	bl	f71e <unpend_thread_no_timeout>
    f8bc:	3018      	adds	r0, #24
    f8be:	f000 f809 	bl	f8d4 <z_abort_timeout>
			ready_thread(thread);
    f8c2:	4620      	mov	r0, r4
    f8c4:	f7fd ff08 	bl	d6d8 <ready_thread>
			ret = true;
    f8c8:	2001      	movs	r0, #1
	__asm__ volatile(
    f8ca:	f385 8811 	msr	BASEPRI, r5
    f8ce:	f3bf 8f6f 	isb	sy
}
    f8d2:	bd38      	pop	{r3, r4, r5, pc}

0000f8d4 <z_abort_timeout>:
{
    f8d4:	b510      	push	{r4, lr}
	__asm__ volatile(
    f8d6:	f04f 0220 	mov.w	r2, #32
    f8da:	f3ef 8411 	mrs	r4, BASEPRI
    f8de:	f382 8812 	msr	BASEPRI_MAX, r2
    f8e2:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    f8e6:	6803      	ldr	r3, [r0, #0]
    f8e8:	b13b      	cbz	r3, f8fa <z_abort_timeout+0x26>
			remove_timeout(to);
    f8ea:	f7fe f9a1 	bl	dc30 <remove_timeout>
			ret = 0;
    f8ee:	2000      	movs	r0, #0
	__asm__ volatile(
    f8f0:	f384 8811 	msr	BASEPRI, r4
    f8f4:	f3bf 8f6f 	isb	sy
}
    f8f8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    f8fa:	f06f 0015 	mvn.w	r0, #21
    f8fe:	e7f7      	b.n	f8f0 <z_abort_timeout+0x1c>

0000f900 <z_get_next_timeout_expiry>:
{
    f900:	b510      	push	{r4, lr}
	__asm__ volatile(
    f902:	f04f 0320 	mov.w	r3, #32
    f906:	f3ef 8411 	mrs	r4, BASEPRI
    f90a:	f383 8812 	msr	BASEPRI_MAX, r3
    f90e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    f912:	f7fe f967 	bl	dbe4 <next_timeout>
	__asm__ volatile(
    f916:	f384 8811 	msr	BASEPRI, r4
    f91a:	f3bf 8f6f 	isb	sy
}
    f91e:	bd10      	pop	{r4, pc}

0000f920 <z_set_timeout_expiry>:
{
    f920:	b570      	push	{r4, r5, r6, lr}
    f922:	4604      	mov	r4, r0
    f924:	460d      	mov	r5, r1
	__asm__ volatile(
    f926:	f04f 0320 	mov.w	r3, #32
    f92a:	f3ef 8611 	mrs	r6, BASEPRI
    f92e:	f383 8812 	msr	BASEPRI_MAX, r3
    f932:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    f936:	f7fe f955 	bl	dbe4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    f93a:	2801      	cmp	r0, #1
    f93c:	dd05      	ble.n	f94a <z_set_timeout_expiry+0x2a>
    f93e:	42a0      	cmp	r0, r4
    f940:	db03      	blt.n	f94a <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    f942:	4629      	mov	r1, r5
    f944:	4620      	mov	r0, r4
    f946:	f7fb f8af 	bl	aaa8 <sys_clock_set_timeout>
	__asm__ volatile(
    f94a:	f386 8811 	msr	BASEPRI, r6
    f94e:	f3bf 8f6f 	isb	sy
}
    f952:	bd70      	pop	{r4, r5, r6, pc}

0000f954 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    f954:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    f956:	f7fe fa5b 	bl	de10 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    f95a:	bd08      	pop	{r3, pc}

0000f95c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    f95c:	f7fe ba58 	b.w	de10 <sys_clock_tick_get>

0000f960 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    f960:	b108      	cbz	r0, f966 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    f962:	f7f9 bad3 	b.w	8f0c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    f966:	4770      	bx	lr

0000f968 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f968:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    f96c:	bf08      	it	eq
    f96e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    f972:	b538      	push	{r3, r4, r5, lr}
    f974:	4605      	mov	r5, r0
    f976:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f978:	d01d      	beq.n	f9b6 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f97a:	ea51 0300 	orrs.w	r3, r1, r0
    f97e:	d103      	bne.n	f988 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    f980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    f984:	f7fe ba44 	b.w	de10 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    f988:	f06f 0301 	mvn.w	r3, #1
    f98c:	1a18      	subs	r0, r3, r0
    f98e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f992:	eb63 0101 	sbc.w	r1, r3, r1
    f996:	2900      	cmp	r1, #0
    f998:	da0c      	bge.n	f9b4 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
    f99a:	f7fe fa39 	bl	de10 <sys_clock_tick_get>
    f99e:	2d01      	cmp	r5, #1
    f9a0:	4622      	mov	r2, r4
    f9a2:	f174 0400 	sbcs.w	r4, r4, #0
    f9a6:	462b      	mov	r3, r5
    f9a8:	bfbc      	itt	lt
    f9aa:	2301      	movlt	r3, #1
    f9ac:	2200      	movlt	r2, #0
    f9ae:	1818      	adds	r0, r3, r0
    f9b0:	eb41 0102 	adc.w	r1, r1, r2
}
    f9b4:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    f9b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f9ba:	4601      	mov	r1, r0
    f9bc:	e7fa      	b.n	f9b4 <sys_clock_timeout_end_calc+0x4c>

0000f9be <signal_poll_event>:
{
    f9be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    f9c2:	6884      	ldr	r4, [r0, #8]
{
    f9c4:	4605      	mov	r5, r0
    f9c6:	460e      	mov	r6, r1
	if (poller != NULL) {
    f9c8:	b144      	cbz	r4, f9dc <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
    f9ca:	7863      	ldrb	r3, [r4, #1]
    f9cc:	2b01      	cmp	r3, #1
    f9ce:	d136      	bne.n	fa3e <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
    f9d0:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    f9d4:	f013 0302 	ands.w	r3, r3, #2
    f9d8:	d10a      	bne.n	f9f0 <signal_poll_event+0x32>
		poller->is_polling = false;
    f9da:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
    f9dc:	2000      	movs	r0, #0
	event->state |= state;
    f9de:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
    f9e0:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    f9e2:	f3c3 3145 	ubfx	r1, r3, #13, #6
    f9e6:	430e      	orrs	r6, r1
    f9e8:	f366 3352 	bfi	r3, r6, #13, #6
    f9ec:	60eb      	str	r3, [r5, #12]
	return retcode;
    f9ee:	e00b      	b.n	fa08 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
    f9f0:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    f9f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f9f8:	bf08      	it	eq
    f9fa:	f112 0f02 	cmneq.w	r2, #2
    f9fe:	d105      	bne.n	fa0c <signal_poll_event+0x4e>
		poller->is_polling = false;
    fa00:	2300      	movs	r3, #0
		return -EAGAIN;
    fa02:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
    fa06:	7023      	strb	r3, [r4, #0]
}
    fa08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    fa0c:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
    fa10:	4640      	mov	r0, r8
    fa12:	f7ff fe8e 	bl	f732 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    fa16:	2e08      	cmp	r6, #8
    fa18:	bf0c      	ite	eq
    fa1a:	f06f 0303 	mvneq.w	r3, #3
    fa1e:	2300      	movne	r3, #0
    fa20:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    fa22:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    fa26:	06db      	lsls	r3, r3, #27
    fa28:	d102      	bne.n	fa30 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
    fa2a:	f854 7c48 	ldr.w	r7, [r4, #-72]
    fa2e:	b10f      	cbz	r7, fa34 <signal_poll_event+0x76>
		poller->is_polling = false;
    fa30:	2300      	movs	r3, #0
    fa32:	e7d2      	b.n	f9da <signal_poll_event+0x1c>
	z_ready_thread(thread);
    fa34:	4640      	mov	r0, r8
    fa36:	f7ff feac 	bl	f792 <z_ready_thread>
		poller->is_polling = false;
    fa3a:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    fa3c:	e7ce      	b.n	f9dc <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
    fa3e:	2b02      	cmp	r3, #2
    fa40:	d1f6      	bne.n	fa30 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    fa42:	7823      	ldrb	r3, [r4, #0]
    fa44:	2b00      	cmp	r3, #0
    fa46:	d0c9      	beq.n	f9dc <signal_poll_event+0x1e>
    fa48:	f854 7c04 	ldr.w	r7, [r4, #-4]
    fa4c:	2f00      	cmp	r7, #0
    fa4e:	d0f4      	beq.n	fa3a <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
    fa50:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    fa54:	f1a4 0914 	sub.w	r9, r4, #20
    fa58:	f104 0014 	add.w	r0, r4, #20
    fa5c:	f7ff ff3a 	bl	f8d4 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
    fa60:	4649      	mov	r1, r9
    fa62:	4638      	mov	r0, r7
		twork->poll_result = 0;
    fa64:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
    fa68:	f000 f823 	bl	fab2 <z_work_submit_to_queue>
		poller->is_polling = false;
    fa6c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    fa70:	e7b4      	b.n	f9dc <signal_poll_event+0x1e>

0000fa72 <z_handle_obj_poll_events>:
{
    fa72:	4603      	mov	r3, r0
	return list->head == list;
    fa74:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    fa76:	4283      	cmp	r3, r0
    fa78:	d008      	beq.n	fa8c <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    fa7a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    fa7e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    fa80:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    fa82:	2300      	movs	r3, #0
	node->prev = NULL;
    fa84:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    fa88:	f7ff bf99 	b.w	f9be <signal_poll_event>
}
    fa8c:	4770      	bx	lr

0000fa8e <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
    fa8e:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
    fa90:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    fa92:	408b      	lsls	r3, r1
    fa94:	ea22 0303 	bic.w	r3, r2, r3
    fa98:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    fa9a:	fa22 f001 	lsr.w	r0, r2, r1
}
    fa9e:	f000 0001 	and.w	r0, r0, #1
    faa2:	4770      	bx	lr

0000faa4 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    faa4:	b120      	cbz	r0, fab0 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    faa6:	2200      	movs	r2, #0
    faa8:	3090      	adds	r0, #144	; 0x90
    faaa:	4611      	mov	r1, r2
    faac:	f7ff bef5 	b.w	f89a <z_sched_wake>
}
    fab0:	4770      	bx	lr

0000fab2 <z_work_submit_to_queue>:
{
    fab2:	b513      	push	{r0, r1, r4, lr}
    fab4:	9001      	str	r0, [sp, #4]
    fab6:	4608      	mov	r0, r1
	__asm__ volatile(
    fab8:	f04f 0320 	mov.w	r3, #32
    fabc:	f3ef 8411 	mrs	r4, BASEPRI
    fac0:	f383 8812 	msr	BASEPRI_MAX, r3
    fac4:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    fac8:	a901      	add	r1, sp, #4
    faca:	f7fe faa5 	bl	e018 <submit_to_queue_locked>
	__asm__ volatile(
    face:	f384 8811 	msr	BASEPRI, r4
    fad2:	f3bf 8f6f 	isb	sy
}
    fad6:	b002      	add	sp, #8
    fad8:	bd10      	pop	{r4, pc}

0000fada <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    fada:	4770      	bx	lr

0000fadc <abs>:
    fadc:	2800      	cmp	r0, #0
    fade:	bfb8      	it	lt
    fae0:	4240      	neglt	r0, r0
    fae2:	4770      	bx	lr

0000fae4 <memcpy>:
    fae4:	440a      	add	r2, r1
    fae6:	1e43      	subs	r3, r0, #1
    fae8:	4291      	cmp	r1, r2
    faea:	d100      	bne.n	faee <memcpy+0xa>
    faec:	4770      	bx	lr
    faee:	b510      	push	{r4, lr}
    faf0:	f811 4b01 	ldrb.w	r4, [r1], #1
    faf4:	4291      	cmp	r1, r2
    faf6:	f803 4f01 	strb.w	r4, [r3, #1]!
    fafa:	d1f9      	bne.n	faf0 <memcpy+0xc>
    fafc:	bd10      	pop	{r4, pc}

0000fafe <memset>:
    fafe:	4402      	add	r2, r0
    fb00:	4603      	mov	r3, r0
    fb02:	4293      	cmp	r3, r2
    fb04:	d100      	bne.n	fb08 <memset+0xa>
    fb06:	4770      	bx	lr
    fb08:	f803 1b01 	strb.w	r1, [r3], #1
    fb0c:	e7f9      	b.n	fb02 <memset+0x4>

0000fb0e <_printf_common>:
    fb0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fb12:	4616      	mov	r6, r2
    fb14:	4699      	mov	r9, r3
    fb16:	688a      	ldr	r2, [r1, #8]
    fb18:	4607      	mov	r7, r0
    fb1a:	690b      	ldr	r3, [r1, #16]
    fb1c:	460c      	mov	r4, r1
    fb1e:	f8dd 8020 	ldr.w	r8, [sp, #32]
    fb22:	4293      	cmp	r3, r2
    fb24:	bfb8      	it	lt
    fb26:	4613      	movlt	r3, r2
    fb28:	6033      	str	r3, [r6, #0]
    fb2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    fb2e:	b10a      	cbz	r2, fb34 <_printf_common+0x26>
    fb30:	3301      	adds	r3, #1
    fb32:	6033      	str	r3, [r6, #0]
    fb34:	6823      	ldr	r3, [r4, #0]
    fb36:	0699      	lsls	r1, r3, #26
    fb38:	bf42      	ittt	mi
    fb3a:	6833      	ldrmi	r3, [r6, #0]
    fb3c:	3302      	addmi	r3, #2
    fb3e:	6033      	strmi	r3, [r6, #0]
    fb40:	6825      	ldr	r5, [r4, #0]
    fb42:	f015 0506 	ands.w	r5, r5, #6
    fb46:	d106      	bne.n	fb56 <_printf_common+0x48>
    fb48:	f104 0a19 	add.w	sl, r4, #25
    fb4c:	68e3      	ldr	r3, [r4, #12]
    fb4e:	6832      	ldr	r2, [r6, #0]
    fb50:	1a9b      	subs	r3, r3, r2
    fb52:	42ab      	cmp	r3, r5
    fb54:	dc29      	bgt.n	fbaa <_printf_common+0x9c>
    fb56:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
    fb5a:	1e13      	subs	r3, r2, #0
    fb5c:	6822      	ldr	r2, [r4, #0]
    fb5e:	bf18      	it	ne
    fb60:	2301      	movne	r3, #1
    fb62:	0692      	lsls	r2, r2, #26
    fb64:	d42e      	bmi.n	fbc4 <_printf_common+0xb6>
    fb66:	f104 0243 	add.w	r2, r4, #67	; 0x43
    fb6a:	4649      	mov	r1, r9
    fb6c:	4638      	mov	r0, r7
    fb6e:	47c0      	blx	r8
    fb70:	3001      	adds	r0, #1
    fb72:	d021      	beq.n	fbb8 <_printf_common+0xaa>
    fb74:	6823      	ldr	r3, [r4, #0]
    fb76:	341a      	adds	r4, #26
    fb78:	f854 5c0e 	ldr.w	r5, [r4, #-14]
    fb7c:	f003 0306 	and.w	r3, r3, #6
    fb80:	6832      	ldr	r2, [r6, #0]
    fb82:	2600      	movs	r6, #0
    fb84:	2b04      	cmp	r3, #4
    fb86:	f854 3c12 	ldr.w	r3, [r4, #-18]
    fb8a:	bf08      	it	eq
    fb8c:	1aad      	subeq	r5, r5, r2
    fb8e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
    fb92:	bf14      	ite	ne
    fb94:	2500      	movne	r5, #0
    fb96:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    fb9a:	4293      	cmp	r3, r2
    fb9c:	bfc4      	itt	gt
    fb9e:	1a9b      	subgt	r3, r3, r2
    fba0:	18ed      	addgt	r5, r5, r3
    fba2:	42b5      	cmp	r5, r6
    fba4:	d11a      	bne.n	fbdc <_printf_common+0xce>
    fba6:	2000      	movs	r0, #0
    fba8:	e008      	b.n	fbbc <_printf_common+0xae>
    fbaa:	2301      	movs	r3, #1
    fbac:	4652      	mov	r2, sl
    fbae:	4649      	mov	r1, r9
    fbb0:	4638      	mov	r0, r7
    fbb2:	47c0      	blx	r8
    fbb4:	3001      	adds	r0, #1
    fbb6:	d103      	bne.n	fbc0 <_printf_common+0xb2>
    fbb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fbbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fbc0:	3501      	adds	r5, #1
    fbc2:	e7c3      	b.n	fb4c <_printf_common+0x3e>
    fbc4:	18e1      	adds	r1, r4, r3
    fbc6:	1c5a      	adds	r2, r3, #1
    fbc8:	2030      	movs	r0, #48	; 0x30
    fbca:	3302      	adds	r3, #2
    fbcc:	4422      	add	r2, r4
    fbce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    fbd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    fbd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    fbda:	e7c4      	b.n	fb66 <_printf_common+0x58>
    fbdc:	2301      	movs	r3, #1
    fbde:	4622      	mov	r2, r4
    fbe0:	4649      	mov	r1, r9
    fbe2:	4638      	mov	r0, r7
    fbe4:	47c0      	blx	r8
    fbe6:	3001      	adds	r0, #1
    fbe8:	d0e6      	beq.n	fbb8 <_printf_common+0xaa>
    fbea:	3601      	adds	r6, #1
    fbec:	e7d9      	b.n	fba2 <_printf_common+0x94>

0000fbee <strcpy>:
    fbee:	4603      	mov	r3, r0
    fbf0:	f811 2b01 	ldrb.w	r2, [r1], #1
    fbf4:	f803 2b01 	strb.w	r2, [r3], #1
    fbf8:	2a00      	cmp	r2, #0
    fbfa:	d1f9      	bne.n	fbf0 <strcpy+0x2>
    fbfc:	4770      	bx	lr

0000fbfe <strnlen>:
    fbfe:	4602      	mov	r2, r0
    fc00:	4401      	add	r1, r0
    fc02:	b510      	push	{r4, lr}
    fc04:	428a      	cmp	r2, r1
    fc06:	4613      	mov	r3, r2
    fc08:	d003      	beq.n	fc12 <strnlen+0x14>
    fc0a:	781c      	ldrb	r4, [r3, #0]
    fc0c:	3201      	adds	r2, #1
    fc0e:	2c00      	cmp	r4, #0
    fc10:	d1f8      	bne.n	fc04 <strnlen+0x6>
    fc12:	1a18      	subs	r0, r3, r0
    fc14:	bd10      	pop	{r4, pc}

0000fc16 <strstr>:
    fc16:	780a      	ldrb	r2, [r1, #0]
    fc18:	b570      	push	{r4, r5, r6, lr}
    fc1a:	b96a      	cbnz	r2, fc38 <strstr+0x22>
    fc1c:	bd70      	pop	{r4, r5, r6, pc}
    fc1e:	429a      	cmp	r2, r3
    fc20:	d109      	bne.n	fc36 <strstr+0x20>
    fc22:	460c      	mov	r4, r1
    fc24:	4605      	mov	r5, r0
    fc26:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    fc2a:	2b00      	cmp	r3, #0
    fc2c:	d0f6      	beq.n	fc1c <strstr+0x6>
    fc2e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    fc32:	429e      	cmp	r6, r3
    fc34:	d0f7      	beq.n	fc26 <strstr+0x10>
    fc36:	3001      	adds	r0, #1
    fc38:	7803      	ldrb	r3, [r0, #0]
    fc3a:	2b00      	cmp	r3, #0
    fc3c:	d1ef      	bne.n	fc1e <strstr+0x8>
    fc3e:	4618      	mov	r0, r3
    fc40:	e7ec      	b.n	fc1c <strstr+0x6>

0000fc42 <_vsniprintf_r>:
    fc42:	b530      	push	{r4, r5, lr}
    fc44:	4614      	mov	r4, r2
    fc46:	b09b      	sub	sp, #108	; 0x6c
    fc48:	4605      	mov	r5, r0
    fc4a:	461a      	mov	r2, r3
    fc4c:	2c00      	cmp	r4, #0
    fc4e:	da05      	bge.n	fc5c <_vsniprintf_r+0x1a>
    fc50:	238b      	movs	r3, #139	; 0x8b
    fc52:	6003      	str	r3, [r0, #0]
    fc54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fc58:	b01b      	add	sp, #108	; 0x6c
    fc5a:	bd30      	pop	{r4, r5, pc}
    fc5c:	f44f 7302 	mov.w	r3, #520	; 0x208
    fc60:	9100      	str	r1, [sp, #0]
    fc62:	9104      	str	r1, [sp, #16]
    fc64:	4669      	mov	r1, sp
    fc66:	f8ad 300c 	strh.w	r3, [sp, #12]
    fc6a:	bf14      	ite	ne
    fc6c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
    fc70:	4623      	moveq	r3, r4
    fc72:	9302      	str	r3, [sp, #8]
    fc74:	9305      	str	r3, [sp, #20]
    fc76:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fc7a:	f8ad 300e 	strh.w	r3, [sp, #14]
    fc7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    fc80:	f7fe fccc 	bl	e61c <_svfiprintf_r>
    fc84:	1c43      	adds	r3, r0, #1
    fc86:	bfbc      	itt	lt
    fc88:	238b      	movlt	r3, #139	; 0x8b
    fc8a:	602b      	strlt	r3, [r5, #0]
    fc8c:	2c00      	cmp	r4, #0
    fc8e:	d0e3      	beq.n	fc58 <_vsniprintf_r+0x16>
    fc90:	9b00      	ldr	r3, [sp, #0]
    fc92:	2200      	movs	r2, #0
    fc94:	701a      	strb	r2, [r3, #0]
    fc96:	e7df      	b.n	fc58 <_vsniprintf_r+0x16>

0000fc98 <memchr>:
    fc98:	b2c9      	uxtb	r1, r1
    fc9a:	4603      	mov	r3, r0
    fc9c:	4402      	add	r2, r0
    fc9e:	b510      	push	{r4, lr}
    fca0:	4293      	cmp	r3, r2
    fca2:	4618      	mov	r0, r3
    fca4:	d101      	bne.n	fcaa <memchr+0x12>
    fca6:	2000      	movs	r0, #0
    fca8:	e003      	b.n	fcb2 <memchr+0x1a>
    fcaa:	7804      	ldrb	r4, [r0, #0]
    fcac:	3301      	adds	r3, #1
    fcae:	428c      	cmp	r4, r1
    fcb0:	d1f6      	bne.n	fca0 <memchr+0x8>
    fcb2:	bd10      	pop	{r4, pc}

0000fcb4 <memmove>:
    fcb4:	4288      	cmp	r0, r1
    fcb6:	b510      	push	{r4, lr}
    fcb8:	eb01 0402 	add.w	r4, r1, r2
    fcbc:	d902      	bls.n	fcc4 <memmove+0x10>
    fcbe:	4284      	cmp	r4, r0
    fcc0:	4623      	mov	r3, r4
    fcc2:	d807      	bhi.n	fcd4 <memmove+0x20>
    fcc4:	1e43      	subs	r3, r0, #1
    fcc6:	42a1      	cmp	r1, r4
    fcc8:	d008      	beq.n	fcdc <memmove+0x28>
    fcca:	f811 2b01 	ldrb.w	r2, [r1], #1
    fcce:	f803 2f01 	strb.w	r2, [r3, #1]!
    fcd2:	e7f8      	b.n	fcc6 <memmove+0x12>
    fcd4:	4402      	add	r2, r0
    fcd6:	4601      	mov	r1, r0
    fcd8:	428a      	cmp	r2, r1
    fcda:	d100      	bne.n	fcde <memmove+0x2a>
    fcdc:	bd10      	pop	{r4, pc}
    fcde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    fce2:	f802 4d01 	strb.w	r4, [r2, #-1]!
    fce6:	e7f7      	b.n	fcd8 <memmove+0x24>

0000fce8 <_realloc_r>:
    fce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fcea:	4607      	mov	r7, r0
    fcec:	4614      	mov	r4, r2
    fcee:	460e      	mov	r6, r1
    fcf0:	b921      	cbnz	r1, fcfc <_realloc_r+0x14>
    fcf2:	4611      	mov	r1, r2
    fcf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    fcf8:	f7fe ba60 	b.w	e1bc <_malloc_r>
    fcfc:	b922      	cbnz	r2, fd08 <_realloc_r+0x20>
    fcfe:	4625      	mov	r5, r4
    fd00:	f7fe fa12 	bl	e128 <_free_r>
    fd04:	4628      	mov	r0, r5
    fd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd08:	f000 f86f 	bl	fdea <_malloc_usable_size_r>
    fd0c:	42a0      	cmp	r0, r4
    fd0e:	d20f      	bcs.n	fd30 <_realloc_r+0x48>
    fd10:	4621      	mov	r1, r4
    fd12:	4638      	mov	r0, r7
    fd14:	f7fe fa52 	bl	e1bc <_malloc_r>
    fd18:	4605      	mov	r5, r0
    fd1a:	2800      	cmp	r0, #0
    fd1c:	d0f2      	beq.n	fd04 <_realloc_r+0x1c>
    fd1e:	4631      	mov	r1, r6
    fd20:	4622      	mov	r2, r4
    fd22:	f7ff fedf 	bl	fae4 <memcpy>
    fd26:	4631      	mov	r1, r6
    fd28:	4638      	mov	r0, r7
    fd2a:	f7fe f9fd 	bl	e128 <_free_r>
    fd2e:	e7e9      	b.n	fd04 <_realloc_r+0x1c>
    fd30:	4635      	mov	r5, r6
    fd32:	e7e7      	b.n	fd04 <_realloc_r+0x1c>

0000fd34 <__ssputs_r>:
    fd34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fd38:	688e      	ldr	r6, [r1, #8]
    fd3a:	4682      	mov	sl, r0
    fd3c:	460c      	mov	r4, r1
    fd3e:	4690      	mov	r8, r2
    fd40:	429e      	cmp	r6, r3
    fd42:	461f      	mov	r7, r3
    fd44:	d838      	bhi.n	fdb8 <__ssputs_r+0x84>
    fd46:	898a      	ldrh	r2, [r1, #12]
    fd48:	f412 6f90 	tst.w	r2, #1152	; 0x480
    fd4c:	d032      	beq.n	fdb4 <__ssputs_r+0x80>
    fd4e:	6825      	ldr	r5, [r4, #0]
    fd50:	3301      	adds	r3, #1
    fd52:	6909      	ldr	r1, [r1, #16]
    fd54:	eba5 0901 	sub.w	r9, r5, r1
    fd58:	6965      	ldr	r5, [r4, #20]
    fd5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    fd5e:	444b      	add	r3, r9
    fd60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    fd64:	106d      	asrs	r5, r5, #1
    fd66:	429d      	cmp	r5, r3
    fd68:	bf38      	it	cc
    fd6a:	461d      	movcc	r5, r3
    fd6c:	0553      	lsls	r3, r2, #21
    fd6e:	d531      	bpl.n	fdd4 <__ssputs_r+0xa0>
    fd70:	4629      	mov	r1, r5
    fd72:	f7fe fa23 	bl	e1bc <_malloc_r>
    fd76:	4606      	mov	r6, r0
    fd78:	b950      	cbnz	r0, fd90 <__ssputs_r+0x5c>
    fd7a:	230c      	movs	r3, #12
    fd7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fd80:	f8ca 3000 	str.w	r3, [sl]
    fd84:	89a3      	ldrh	r3, [r4, #12]
    fd86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fd8a:	81a3      	strh	r3, [r4, #12]
    fd8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fd90:	464a      	mov	r2, r9
    fd92:	6921      	ldr	r1, [r4, #16]
    fd94:	f7ff fea6 	bl	fae4 <memcpy>
    fd98:	89a3      	ldrh	r3, [r4, #12]
    fd9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    fd9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    fda2:	81a3      	strh	r3, [r4, #12]
    fda4:	6126      	str	r6, [r4, #16]
    fda6:	444e      	add	r6, r9
    fda8:	6165      	str	r5, [r4, #20]
    fdaa:	eba5 0509 	sub.w	r5, r5, r9
    fdae:	6026      	str	r6, [r4, #0]
    fdb0:	463e      	mov	r6, r7
    fdb2:	60a5      	str	r5, [r4, #8]
    fdb4:	42be      	cmp	r6, r7
    fdb6:	d900      	bls.n	fdba <__ssputs_r+0x86>
    fdb8:	463e      	mov	r6, r7
    fdba:	4632      	mov	r2, r6
    fdbc:	4641      	mov	r1, r8
    fdbe:	6820      	ldr	r0, [r4, #0]
    fdc0:	f7ff ff78 	bl	fcb4 <memmove>
    fdc4:	68a3      	ldr	r3, [r4, #8]
    fdc6:	2000      	movs	r0, #0
    fdc8:	1b9b      	subs	r3, r3, r6
    fdca:	60a3      	str	r3, [r4, #8]
    fdcc:	6823      	ldr	r3, [r4, #0]
    fdce:	4433      	add	r3, r6
    fdd0:	6023      	str	r3, [r4, #0]
    fdd2:	e7db      	b.n	fd8c <__ssputs_r+0x58>
    fdd4:	462a      	mov	r2, r5
    fdd6:	f7ff ff87 	bl	fce8 <_realloc_r>
    fdda:	4606      	mov	r6, r0
    fddc:	2800      	cmp	r0, #0
    fdde:	d1e1      	bne.n	fda4 <__ssputs_r+0x70>
    fde0:	6921      	ldr	r1, [r4, #16]
    fde2:	4650      	mov	r0, sl
    fde4:	f7fe f9a0 	bl	e128 <_free_r>
    fde8:	e7c7      	b.n	fd7a <__ssputs_r+0x46>

0000fdea <_malloc_usable_size_r>:
    fdea:	f851 3c04 	ldr.w	r3, [r1, #-4]
    fdee:	1f18      	subs	r0, r3, #4
    fdf0:	2b00      	cmp	r3, #0
    fdf2:	bfbc      	itt	lt
    fdf4:	580b      	ldrlt	r3, [r1, r0]
    fdf6:	18c0      	addlt	r0, r0, r3
    fdf8:	4770      	bx	lr
